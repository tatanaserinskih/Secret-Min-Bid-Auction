// deploy/deploy.ts
import { DeployFunction } from "hardhat-deploy/types";
import { HardhatRuntimeEnvironment } from "hardhat/types";

const func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  const { deployments, getNamedAccounts, network } = hre;
  const { deploy, execute, read, log, getArtifact } = deployments;
  const { deployer } = await getNamedAccounts();

  const envFQN = process.env.FQN?.trim(); // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–æ—á–Ω—ã–π FQN –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
  const waitConfirmations = Number(process.env.WAIT_CONFIRMATIONS ?? 1);

  // ‚îÄ‚îÄ 1) –ü–æ–∏—Å–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const candidates: string[] = [
    ...(envFQN ? [envFQN] : []),
    "SecretMinBidAuction",
    "contracts/SecretMinBidAuction.sol:SecretMinBidAuction",
    "contracts/auction/SecretMinBidAuction.sol:SecretMinBidAuction",
    "src/SecretMinBidAuction.sol:SecretMinBidAuction",
  ];

  let contractId: string | null = null;
  for (const c of candidates) {
    try {
      await getArtifact(c);
      contractId = c;
      break;
    } catch {}
  }
  if (!contractId) {
    throw new Error(
      `Cannot find artifact for SecretMinBidAuction. ` +
        `Make sure the contract is compiled and try one of: ${candidates.join(", ")}`,
    );
  }

  log(`üî® Deploying SecretMinBidAuction‚Ä¶ (artifact: ${contractId})`);

  // ‚îÄ‚îÄ 2) –î–µ–ø–ª–æ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  const d = await deploy("SecretMinBidAuction", {
    from: deployer,
    contract: contractId,
    args: [], // constructor() –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    log: true,
    waitConfirmations,
  });

  // ‚îÄ‚îÄ 3) –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–≤–æ—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  try {
    const ver: string = await read("SecretMinBidAuction", "version");
    const open: boolean = await read("SecretMinBidAuction", "biddingOpen");
    const ready: boolean = await read("SecretMinBidAuction", "resultsReady");
    const count: bigint = await read("SecretMinBidAuction", "participantsCount");
    log(
      `‚úÖ Deployed at ${d.address} on ${network.name} ` +
        `(version: ${ver}, biddingOpen: ${open}, resultsReady: ${ready}, participants: ${count.toString()})`,
    );
  } catch {
    log(`‚úÖ Deployed at ${d.address} on ${network.name}`);
  }

  // ‚îÄ‚îÄ 4) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —á–µ—Ä–µ–∑ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  // CLOSE=1|true     ‚Äî –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º —Å—Ç–∞–≤–æ–∫ (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å—Ç–∞–≤–∫–∞)
  // FINALIZE=1|true  ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏)
  const CLOSE = (process.env.CLOSE ?? "").toLowerCase();
  const FINALIZE = (process.env.FINALIZE ?? "").toLowerCase();
  const doClose = CLOSE === "1" || CLOSE === "true";
  const doFinalize = FINALIZE === "1" || FINALIZE === "true";

  if (doClose) {
    const isOpen: boolean = await read("SecretMinBidAuction", "biddingOpen");
    if (!isOpen) {
      log("‚ÑπÔ∏è Bidding already closed");
    } else {
      const count: bigint = await read("SecretMinBidAuction", "participantsCount");
      if ((count ?? 0n) > 0n) {
        log("üîí Closing bidding‚Ä¶");
        await execute("SecretMinBidAuction", { from: deployer, log: true }, "closeBidding");
        log("üîí Bidding closed");
      } else {
        log("‚ö†Ô∏è Cannot close: no bids yet");
      }
    }
  }

  if (doFinalize) {
    const isOpen: boolean = await read("SecretMinBidAuction", "biddingOpen");
    const ready: boolean = await read("SecretMinBidAuction", "resultsReady");
    const count: bigint = await read("SecretMinBidAuction", "participantsCount");

    if (isOpen) {
      log("‚ö†Ô∏è Cannot finalize: bidding is still open. Set CLOSE=1 first.");
    } else if (ready) {
      log("‚ÑπÔ∏è Already finalized");
    } else if ((count ?? 0n) === 0n) {
      log("‚ö†Ô∏è Cannot finalize: no participants");
    } else {
      log("üèÅ Finalizing auction (prepare winner flags)‚Ä¶");
      await execute("SecretMinBidAuction", { from: deployer, log: true }, "finalize");
      log("üèÅ Finalization complete (winner flags granted)");
    }
  }

  console.log(`SecretMinBidAuction contract: ${d.address}`);
};

export default func;
func.id = "deploy_secret_min_bid_auction"; // —á—Ç–æ–±—ã hardhat-deploy –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
func.tags = ["SecretMinBidAuction"];
