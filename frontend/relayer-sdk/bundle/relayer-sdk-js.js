const ns = globalThis || void 0 || self;
var sw = {}, Lo = {};
Lo.byteLength = Hg;
Lo.toByteArray = qg;
Lo.fromByteArray = Wg;
var ar = [], Me = [], jg = typeof Uint8Array < "u" ? Uint8Array : Array, xa = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var ji = 0, Gg = xa.length; ji < Gg; ++ji)
  ar[ji] = xa[ji], Me[xa.charCodeAt(ji)] = ji;
Me[45] = 62;
Me[95] = 63;
function ow(n) {
  var t = n.length;
  if (t % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var e = n.indexOf("=");
  e === -1 && (e = t);
  var r = e === t ? 0 : 4 - e % 4;
  return [e, r];
}
function Hg(n) {
  var t = ow(n), e = t[0], r = t[1];
  return (e + r) * 3 / 4 - r;
}
function Vg(n, t, e) {
  return (t + e) * 3 / 4 - e;
}
function qg(n) {
  var t, e = ow(n), r = e[0], i = e[1], o = new jg(Vg(n, r, i)), a = 0, u = i > 0 ? r - 4 : r, _;
  for (_ = 0; _ < u; _ += 4)
    t = Me[n.charCodeAt(_)] << 18 | Me[n.charCodeAt(_ + 1)] << 12 | Me[n.charCodeAt(_ + 2)] << 6 | Me[n.charCodeAt(_ + 3)], o[a++] = t >> 16 & 255, o[a++] = t >> 8 & 255, o[a++] = t & 255;
  return i === 2 && (t = Me[n.charCodeAt(_)] << 2 | Me[n.charCodeAt(_ + 1)] >> 4, o[a++] = t & 255), i === 1 && (t = Me[n.charCodeAt(_)] << 10 | Me[n.charCodeAt(_ + 1)] << 4 | Me[n.charCodeAt(_ + 2)] >> 2, o[a++] = t >> 8 & 255, o[a++] = t & 255), o;
}
function Qg(n) {
  return ar[n >> 18 & 63] + ar[n >> 12 & 63] + ar[n >> 6 & 63] + ar[n & 63];
}
function Kg(n, t, e) {
  for (var r, i = [], o = t; o < e; o += 3)
    r = (n[o] << 16 & 16711680) + (n[o + 1] << 8 & 65280) + (n[o + 2] & 255), i.push(Qg(r));
  return i.join("");
}
function Wg(n) {
  for (var t, e = n.length, r = e % 3, i = [], o = 16383, a = 0, u = e - r; a < u; a += o)
    i.push(Kg(n, a, a + o > u ? u : a + o));
  return r === 1 ? (t = n[e - 1], i.push(
    ar[t >> 2] + ar[t << 4 & 63] + "=="
  )) : r === 2 && (t = (n[e - 2] << 8) + n[e - 1], i.push(
    ar[t >> 10] + ar[t >> 4 & 63] + ar[t << 2 & 63] + "="
  )), i.join("");
}
var Nu = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
Nu.read = function(n, t, e, r, i) {
  var o, a, u = i * 8 - r - 1, _ = (1 << u) - 1, l = _ >> 1, f = -7, g = e ? i - 1 : 0, y = e ? -1 : 1, B = n[t + g];
  for (g += y, o = B & (1 << -f) - 1, B >>= -f, f += u; f > 0; o = o * 256 + n[t + g], g += y, f -= 8)
    ;
  for (a = o & (1 << -f) - 1, o >>= -f, f += r; f > 0; a = a * 256 + n[t + g], g += y, f -= 8)
    ;
  if (o === 0)
    o = 1 - l;
  else {
    if (o === _)
      return a ? NaN : (B ? -1 : 1) * (1 / 0);
    a = a + Math.pow(2, r), o = o - l;
  }
  return (B ? -1 : 1) * a * Math.pow(2, o - r);
};
Nu.write = function(n, t, e, r, i, o) {
  var a, u, _, l = o * 8 - i - 1, f = (1 << l) - 1, g = f >> 1, y = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, B = r ? 0 : o - 1, I = r ? 1 : -1, S = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
  for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (u = isNaN(t) ? 1 : 0, a = f) : (a = Math.floor(Math.log(t) / Math.LN2), t * (_ = Math.pow(2, -a)) < 1 && (a--, _ *= 2), a + g >= 1 ? t += y / _ : t += y * Math.pow(2, 1 - g), t * _ >= 2 && (a++, _ /= 2), a + g >= f ? (u = 0, a = f) : a + g >= 1 ? (u = (t * _ - 1) * Math.pow(2, i), a = a + g) : (u = t * Math.pow(2, g - 1) * Math.pow(2, i), a = 0)); i >= 8; n[e + B] = u & 255, B += I, u /= 256, i -= 8)
    ;
  for (a = a << i | u, l += i; l > 0; n[e + B] = a & 255, B += I, a /= 256, l -= 8)
    ;
  n[e + B - I] |= S * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(n) {
  const t = Lo, e = Nu, r = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  n.Buffer = f, n.SlowBuffer = k, n.INSPECT_MAX_BYTES = 50;
  const i = 2147483647;
  n.kMaxLength = i;
  const { Uint8Array: o, ArrayBuffer: a, SharedArrayBuffer: u } = globalThis;
  f.TYPED_ARRAY_SUPPORT = _(), !f.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function _() {
    try {
      const b = new o(1), h = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(h, o.prototype), Object.setPrototypeOf(b, h), b.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(f.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (f.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(f.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (f.isBuffer(this))
        return this.byteOffset;
    }
  });
  function l(b) {
    if (b > i)
      throw new RangeError('The value "' + b + '" is invalid for option "size"');
    const h = new o(b);
    return Object.setPrototypeOf(h, f.prototype), h;
  }
  function f(b, h, w) {
    if (typeof b == "number") {
      if (typeof h == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return I(b);
    }
    return g(b, h, w);
  }
  f.poolSize = 8192;
  function g(b, h, w) {
    if (typeof b == "string")
      return S(b, h);
    if (a.isView(b))
      return A(b);
    if (b == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof b
      );
    if (fe(b, a) || b && fe(b.buffer, a) || typeof u < "u" && (fe(b, u) || b && fe(b.buffer, u)))
      return R(b, h, w);
    if (typeof b == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const F = b.valueOf && b.valueOf();
    if (F != null && F !== b)
      return f.from(F, h, w);
    const U = P(b);
    if (U) return U;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof b[Symbol.toPrimitive] == "function")
      return f.from(b[Symbol.toPrimitive]("string"), h, w);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof b
    );
  }
  f.from = function(b, h, w) {
    return g(b, h, w);
  }, Object.setPrototypeOf(f.prototype, o.prototype), Object.setPrototypeOf(f, o);
  function y(b) {
    if (typeof b != "number")
      throw new TypeError('"size" argument must be of type number');
    if (b < 0)
      throw new RangeError('The value "' + b + '" is invalid for option "size"');
  }
  function B(b, h, w) {
    return y(b), b <= 0 ? l(b) : h !== void 0 ? typeof w == "string" ? l(b).fill(h, w) : l(b).fill(h) : l(b);
  }
  f.alloc = function(b, h, w) {
    return B(b, h, w);
  };
  function I(b) {
    return y(b), l(b < 0 ? 0 : z(b) | 0);
  }
  f.allocUnsafe = function(b) {
    return I(b);
  }, f.allocUnsafeSlow = function(b) {
    return I(b);
  };
  function S(b, h) {
    if ((typeof h != "string" || h === "") && (h = "utf8"), !f.isEncoding(h))
      throw new TypeError("Unknown encoding: " + h);
    const w = C(b, h) | 0;
    let F = l(w);
    const U = F.write(b, h);
    return U !== w && (F = F.slice(0, U)), F;
  }
  function T(b) {
    const h = b.length < 0 ? 0 : z(b.length) | 0, w = l(h);
    for (let F = 0; F < h; F += 1)
      w[F] = b[F] & 255;
    return w;
  }
  function A(b) {
    if (fe(b, o)) {
      const h = new o(b);
      return R(h.buffer, h.byteOffset, h.byteLength);
    }
    return T(b);
  }
  function R(b, h, w) {
    if (h < 0 || b.byteLength < h)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (b.byteLength < h + (w || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let F;
    return h === void 0 && w === void 0 ? F = new o(b) : w === void 0 ? F = new o(b, h) : F = new o(b, h, w), Object.setPrototypeOf(F, f.prototype), F;
  }
  function P(b) {
    if (f.isBuffer(b)) {
      const h = z(b.length) | 0, w = l(h);
      return w.length === 0 || b.copy(w, 0, 0, h), w;
    }
    if (b.length !== void 0)
      return typeof b.length != "number" || Ee(b.length) ? l(0) : T(b);
    if (b.type === "Buffer" && Array.isArray(b.data))
      return T(b.data);
  }
  function z(b) {
    if (b >= i)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");
    return b | 0;
  }
  function k(b) {
    return +b != b && (b = 0), f.alloc(+b);
  }
  f.isBuffer = function(h) {
    return h != null && h._isBuffer === !0 && h !== f.prototype;
  }, f.compare = function(h, w) {
    if (fe(h, o) && (h = f.from(h, h.offset, h.byteLength)), fe(w, o) && (w = f.from(w, w.offset, w.byteLength)), !f.isBuffer(h) || !f.isBuffer(w))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (h === w) return 0;
    let F = h.length, U = w.length;
    for (let J = 0, st = Math.min(F, U); J < st; ++J)
      if (h[J] !== w[J]) {
        F = h[J], U = w[J];
        break;
      }
    return F < U ? -1 : U < F ? 1 : 0;
  }, f.isEncoding = function(h) {
    switch (String(h).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, f.concat = function(h, w) {
    if (!Array.isArray(h))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (h.length === 0)
      return f.alloc(0);
    let F;
    if (w === void 0)
      for (w = 0, F = 0; F < h.length; ++F)
        w += h[F].length;
    const U = f.allocUnsafe(w);
    let J = 0;
    for (F = 0; F < h.length; ++F) {
      let st = h[F];
      if (fe(st, o))
        J + st.length > U.length ? (f.isBuffer(st) || (st = f.from(st)), st.copy(U, J)) : o.prototype.set.call(
          U,
          st,
          J
        );
      else if (f.isBuffer(st))
        st.copy(U, J);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      J += st.length;
    }
    return U;
  };
  function C(b, h) {
    if (f.isBuffer(b))
      return b.length;
    if (a.isView(b) || fe(b, a))
      return b.byteLength;
    if (typeof b != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof b
      );
    const w = b.length, F = arguments.length > 2 && arguments[2] === !0;
    if (!F && w === 0) return 0;
    let U = !1;
    for (; ; )
      switch (h) {
        case "ascii":
        case "latin1":
        case "binary":
          return w;
        case "utf8":
        case "utf-8":
          return pe(b).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return w * 2;
        case "hex":
          return w >>> 1;
        case "base64":
          return Qt(b).length;
        default:
          if (U)
            return F ? -1 : pe(b).length;
          h = ("" + h).toLowerCase(), U = !0;
      }
  }
  f.byteLength = C;
  function N(b, h, w) {
    let F = !1;
    if ((h === void 0 || h < 0) && (h = 0), h > this.length || ((w === void 0 || w > this.length) && (w = this.length), w <= 0) || (w >>>= 0, h >>>= 0, w <= h))
      return "";
    for (b || (b = "utf8"); ; )
      switch (b) {
        case "hex":
          return W(this, h, w);
        case "utf8":
        case "utf-8":
          return Et(this, h, w);
        case "ascii":
          return Bt(this, h, w);
        case "latin1":
        case "binary":
          return jt(this, h, w);
        case "base64":
          return wt(this, h, w);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return X(this, h, w);
        default:
          if (F) throw new TypeError("Unknown encoding: " + b);
          b = (b + "").toLowerCase(), F = !0;
      }
  }
  f.prototype._isBuffer = !0;
  function D(b, h, w) {
    const F = b[h];
    b[h] = b[w], b[w] = F;
  }
  f.prototype.swap16 = function() {
    const h = this.length;
    if (h % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let w = 0; w < h; w += 2)
      D(this, w, w + 1);
    return this;
  }, f.prototype.swap32 = function() {
    const h = this.length;
    if (h % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let w = 0; w < h; w += 4)
      D(this, w, w + 3), D(this, w + 1, w + 2);
    return this;
  }, f.prototype.swap64 = function() {
    const h = this.length;
    if (h % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let w = 0; w < h; w += 8)
      D(this, w, w + 7), D(this, w + 1, w + 6), D(this, w + 2, w + 5), D(this, w + 3, w + 4);
    return this;
  }, f.prototype.toString = function() {
    const h = this.length;
    return h === 0 ? "" : arguments.length === 0 ? Et(this, 0, h) : N.apply(this, arguments);
  }, f.prototype.toLocaleString = f.prototype.toString, f.prototype.equals = function(h) {
    if (!f.isBuffer(h)) throw new TypeError("Argument must be a Buffer");
    return this === h ? !0 : f.compare(this, h) === 0;
  }, f.prototype.inspect = function() {
    let h = "";
    const w = n.INSPECT_MAX_BYTES;
    return h = this.toString("hex", 0, w).replace(/(.{2})/g, "$1 ").trim(), this.length > w && (h += " ... "), "<Buffer " + h + ">";
  }, r && (f.prototype[r] = f.prototype.inspect), f.prototype.compare = function(h, w, F, U, J) {
    if (fe(h, o) && (h = f.from(h, h.offset, h.byteLength)), !f.isBuffer(h))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof h
      );
    if (w === void 0 && (w = 0), F === void 0 && (F = h ? h.length : 0), U === void 0 && (U = 0), J === void 0 && (J = this.length), w < 0 || F > h.length || U < 0 || J > this.length)
      throw new RangeError("out of range index");
    if (U >= J && w >= F)
      return 0;
    if (U >= J)
      return -1;
    if (w >= F)
      return 1;
    if (w >>>= 0, F >>>= 0, U >>>= 0, J >>>= 0, this === h) return 0;
    let st = J - U, kt = F - w;
    const Vt = Math.min(st, kt), qt = this.slice(U, J), Kt = h.slice(w, F);
    for (let Dt = 0; Dt < Vt; ++Dt)
      if (qt[Dt] !== Kt[Dt]) {
        st = qt[Dt], kt = Kt[Dt];
        break;
      }
    return st < kt ? -1 : kt < st ? 1 : 0;
  };
  function Y(b, h, w, F, U) {
    if (b.length === 0) return -1;
    if (typeof w == "string" ? (F = w, w = 0) : w > 2147483647 ? w = 2147483647 : w < -2147483648 && (w = -2147483648), w = +w, Ee(w) && (w = U ? 0 : b.length - 1), w < 0 && (w = b.length + w), w >= b.length) {
      if (U) return -1;
      w = b.length - 1;
    } else if (w < 0)
      if (U) w = 0;
      else return -1;
    if (typeof h == "string" && (h = f.from(h, F)), f.isBuffer(h))
      return h.length === 0 ? -1 : Z(b, h, w, F, U);
    if (typeof h == "number")
      return h = h & 255, typeof o.prototype.indexOf == "function" ? U ? o.prototype.indexOf.call(b, h, w) : o.prototype.lastIndexOf.call(b, h, w) : Z(b, [h], w, F, U);
    throw new TypeError("val must be string, number or Buffer");
  }
  function Z(b, h, w, F, U) {
    let J = 1, st = b.length, kt = h.length;
    if (F !== void 0 && (F = String(F).toLowerCase(), F === "ucs2" || F === "ucs-2" || F === "utf16le" || F === "utf-16le")) {
      if (b.length < 2 || h.length < 2)
        return -1;
      J = 2, st /= 2, kt /= 2, w /= 2;
    }
    function Vt(Kt, Dt) {
      return J === 1 ? Kt[Dt] : Kt.readUInt16BE(Dt * J);
    }
    let qt;
    if (U) {
      let Kt = -1;
      for (qt = w; qt < st; qt++)
        if (Vt(b, qt) === Vt(h, Kt === -1 ? 0 : qt - Kt)) {
          if (Kt === -1 && (Kt = qt), qt - Kt + 1 === kt) return Kt * J;
        } else
          Kt !== -1 && (qt -= qt - Kt), Kt = -1;
    } else
      for (w + kt > st && (w = st - kt), qt = w; qt >= 0; qt--) {
        let Kt = !0;
        for (let Dt = 0; Dt < kt; Dt++)
          if (Vt(b, qt + Dt) !== Vt(h, Dt)) {
            Kt = !1;
            break;
          }
        if (Kt) return qt;
      }
    return -1;
  }
  f.prototype.includes = function(h, w, F) {
    return this.indexOf(h, w, F) !== -1;
  }, f.prototype.indexOf = function(h, w, F) {
    return Y(this, h, w, F, !0);
  }, f.prototype.lastIndexOf = function(h, w, F) {
    return Y(this, h, w, F, !1);
  };
  function ft(b, h, w, F) {
    w = Number(w) || 0;
    const U = b.length - w;
    F ? (F = Number(F), F > U && (F = U)) : F = U;
    const J = h.length;
    F > J / 2 && (F = J / 2);
    let st;
    for (st = 0; st < F; ++st) {
      const kt = parseInt(h.substr(st * 2, 2), 16);
      if (Ee(kt)) return st;
      b[w + st] = kt;
    }
    return st;
  }
  function L(b, h, w, F) {
    return de(pe(h, b.length - w), b, w, F);
  }
  function At(b, h, w, F) {
    return de(we(h), b, w, F);
  }
  function Rt(b, h, w, F) {
    return de(Qt(h), b, w, F);
  }
  function at(b, h, w, F) {
    return de(Gt(h, b.length - w), b, w, F);
  }
  f.prototype.write = function(h, w, F, U) {
    if (w === void 0)
      U = "utf8", F = this.length, w = 0;
    else if (F === void 0 && typeof w == "string")
      U = w, F = this.length, w = 0;
    else if (isFinite(w))
      w = w >>> 0, isFinite(F) ? (F = F >>> 0, U === void 0 && (U = "utf8")) : (U = F, F = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const J = this.length - w;
    if ((F === void 0 || F > J) && (F = J), h.length > 0 && (F < 0 || w < 0) || w > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    U || (U = "utf8");
    let st = !1;
    for (; ; )
      switch (U) {
        case "hex":
          return ft(this, h, w, F);
        case "utf8":
        case "utf-8":
          return L(this, h, w, F);
        case "ascii":
        case "latin1":
        case "binary":
          return At(this, h, w, F);
        case "base64":
          return Rt(this, h, w, F);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return at(this, h, w, F);
        default:
          if (st) throw new TypeError("Unknown encoding: " + U);
          U = ("" + U).toLowerCase(), st = !0;
      }
  }, f.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function wt(b, h, w) {
    return h === 0 && w === b.length ? t.fromByteArray(b) : t.fromByteArray(b.slice(h, w));
  }
  function Et(b, h, w) {
    w = Math.min(b.length, w);
    const F = [];
    let U = h;
    for (; U < w; ) {
      const J = b[U];
      let st = null, kt = J > 239 ? 4 : J > 223 ? 3 : J > 191 ? 2 : 1;
      if (U + kt <= w) {
        let Vt, qt, Kt, Dt;
        switch (kt) {
          case 1:
            J < 128 && (st = J);
            break;
          case 2:
            Vt = b[U + 1], (Vt & 192) === 128 && (Dt = (J & 31) << 6 | Vt & 63, Dt > 127 && (st = Dt));
            break;
          case 3:
            Vt = b[U + 1], qt = b[U + 2], (Vt & 192) === 128 && (qt & 192) === 128 && (Dt = (J & 15) << 12 | (Vt & 63) << 6 | qt & 63, Dt > 2047 && (Dt < 55296 || Dt > 57343) && (st = Dt));
            break;
          case 4:
            Vt = b[U + 1], qt = b[U + 2], Kt = b[U + 3], (Vt & 192) === 128 && (qt & 192) === 128 && (Kt & 192) === 128 && (Dt = (J & 15) << 18 | (Vt & 63) << 12 | (qt & 63) << 6 | Kt & 63, Dt > 65535 && Dt < 1114112 && (st = Dt));
        }
      }
      st === null ? (st = 65533, kt = 1) : st > 65535 && (st -= 65536, F.push(st >>> 10 & 1023 | 55296), st = 56320 | st & 1023), F.push(st), U += kt;
    }
    return vt(F);
  }
  const xt = 4096;
  function vt(b) {
    const h = b.length;
    if (h <= xt)
      return String.fromCharCode.apply(String, b);
    let w = "", F = 0;
    for (; F < h; )
      w += String.fromCharCode.apply(
        String,
        b.slice(F, F += xt)
      );
    return w;
  }
  function Bt(b, h, w) {
    let F = "";
    w = Math.min(b.length, w);
    for (let U = h; U < w; ++U)
      F += String.fromCharCode(b[U] & 127);
    return F;
  }
  function jt(b, h, w) {
    let F = "";
    w = Math.min(b.length, w);
    for (let U = h; U < w; ++U)
      F += String.fromCharCode(b[U]);
    return F;
  }
  function W(b, h, w) {
    const F = b.length;
    (!h || h < 0) && (h = 0), (!w || w < 0 || w > F) && (w = F);
    let U = "";
    for (let J = h; J < w; ++J)
      U += Se[b[J]];
    return U;
  }
  function X(b, h, w) {
    const F = b.slice(h, w);
    let U = "";
    for (let J = 0; J < F.length - 1; J += 2)
      U += String.fromCharCode(F[J] + F[J + 1] * 256);
    return U;
  }
  f.prototype.slice = function(h, w) {
    const F = this.length;
    h = ~~h, w = w === void 0 ? F : ~~w, h < 0 ? (h += F, h < 0 && (h = 0)) : h > F && (h = F), w < 0 ? (w += F, w < 0 && (w = 0)) : w > F && (w = F), w < h && (w = h);
    const U = this.subarray(h, w);
    return Object.setPrototypeOf(U, f.prototype), U;
  };
  function nt(b, h, w) {
    if (b % 1 !== 0 || b < 0) throw new RangeError("offset is not uint");
    if (b + h > w) throw new RangeError("Trying to access beyond buffer length");
  }
  f.prototype.readUintLE = f.prototype.readUIntLE = function(h, w, F) {
    h = h >>> 0, w = w >>> 0, F || nt(h, w, this.length);
    let U = this[h], J = 1, st = 0;
    for (; ++st < w && (J *= 256); )
      U += this[h + st] * J;
    return U;
  }, f.prototype.readUintBE = f.prototype.readUIntBE = function(h, w, F) {
    h = h >>> 0, w = w >>> 0, F || nt(h, w, this.length);
    let U = this[h + --w], J = 1;
    for (; w > 0 && (J *= 256); )
      U += this[h + --w] * J;
    return U;
  }, f.prototype.readUint8 = f.prototype.readUInt8 = function(h, w) {
    return h = h >>> 0, w || nt(h, 1, this.length), this[h];
  }, f.prototype.readUint16LE = f.prototype.readUInt16LE = function(h, w) {
    return h = h >>> 0, w || nt(h, 2, this.length), this[h] | this[h + 1] << 8;
  }, f.prototype.readUint16BE = f.prototype.readUInt16BE = function(h, w) {
    return h = h >>> 0, w || nt(h, 2, this.length), this[h] << 8 | this[h + 1];
  }, f.prototype.readUint32LE = f.prototype.readUInt32LE = function(h, w) {
    return h = h >>> 0, w || nt(h, 4, this.length), (this[h] | this[h + 1] << 8 | this[h + 2] << 16) + this[h + 3] * 16777216;
  }, f.prototype.readUint32BE = f.prototype.readUInt32BE = function(h, w) {
    return h = h >>> 0, w || nt(h, 4, this.length), this[h] * 16777216 + (this[h + 1] << 16 | this[h + 2] << 8 | this[h + 3]);
  }, f.prototype.readBigUInt64LE = ae(function(h) {
    h = h >>> 0, yt(h, "offset");
    const w = this[h], F = this[h + 7];
    (w === void 0 || F === void 0) && Pt(h, this.length - 8);
    const U = w + this[++h] * 2 ** 8 + this[++h] * 2 ** 16 + this[++h] * 2 ** 24, J = this[++h] + this[++h] * 2 ** 8 + this[++h] * 2 ** 16 + F * 2 ** 24;
    return BigInt(U) + (BigInt(J) << BigInt(32));
  }), f.prototype.readBigUInt64BE = ae(function(h) {
    h = h >>> 0, yt(h, "offset");
    const w = this[h], F = this[h + 7];
    (w === void 0 || F === void 0) && Pt(h, this.length - 8);
    const U = w * 2 ** 24 + this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + this[++h], J = this[++h] * 2 ** 24 + this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + F;
    return (BigInt(U) << BigInt(32)) + BigInt(J);
  }), f.prototype.readIntLE = function(h, w, F) {
    h = h >>> 0, w = w >>> 0, F || nt(h, w, this.length);
    let U = this[h], J = 1, st = 0;
    for (; ++st < w && (J *= 256); )
      U += this[h + st] * J;
    return J *= 128, U >= J && (U -= Math.pow(2, 8 * w)), U;
  }, f.prototype.readIntBE = function(h, w, F) {
    h = h >>> 0, w = w >>> 0, F || nt(h, w, this.length);
    let U = w, J = 1, st = this[h + --U];
    for (; U > 0 && (J *= 256); )
      st += this[h + --U] * J;
    return J *= 128, st >= J && (st -= Math.pow(2, 8 * w)), st;
  }, f.prototype.readInt8 = function(h, w) {
    return h = h >>> 0, w || nt(h, 1, this.length), this[h] & 128 ? (255 - this[h] + 1) * -1 : this[h];
  }, f.prototype.readInt16LE = function(h, w) {
    h = h >>> 0, w || nt(h, 2, this.length);
    const F = this[h] | this[h + 1] << 8;
    return F & 32768 ? F | 4294901760 : F;
  }, f.prototype.readInt16BE = function(h, w) {
    h = h >>> 0, w || nt(h, 2, this.length);
    const F = this[h + 1] | this[h] << 8;
    return F & 32768 ? F | 4294901760 : F;
  }, f.prototype.readInt32LE = function(h, w) {
    return h = h >>> 0, w || nt(h, 4, this.length), this[h] | this[h + 1] << 8 | this[h + 2] << 16 | this[h + 3] << 24;
  }, f.prototype.readInt32BE = function(h, w) {
    return h = h >>> 0, w || nt(h, 4, this.length), this[h] << 24 | this[h + 1] << 16 | this[h + 2] << 8 | this[h + 3];
  }, f.prototype.readBigInt64LE = ae(function(h) {
    h = h >>> 0, yt(h, "offset");
    const w = this[h], F = this[h + 7];
    (w === void 0 || F === void 0) && Pt(h, this.length - 8);
    const U = this[h + 4] + this[h + 5] * 2 ** 8 + this[h + 6] * 2 ** 16 + (F << 24);
    return (BigInt(U) << BigInt(32)) + BigInt(w + this[++h] * 2 ** 8 + this[++h] * 2 ** 16 + this[++h] * 2 ** 24);
  }), f.prototype.readBigInt64BE = ae(function(h) {
    h = h >>> 0, yt(h, "offset");
    const w = this[h], F = this[h + 7];
    (w === void 0 || F === void 0) && Pt(h, this.length - 8);
    const U = (w << 24) + // Overflow
    this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + this[++h];
    return (BigInt(U) << BigInt(32)) + BigInt(this[++h] * 2 ** 24 + this[++h] * 2 ** 16 + this[++h] * 2 ** 8 + F);
  }), f.prototype.readFloatLE = function(h, w) {
    return h = h >>> 0, w || nt(h, 4, this.length), e.read(this, h, !0, 23, 4);
  }, f.prototype.readFloatBE = function(h, w) {
    return h = h >>> 0, w || nt(h, 4, this.length), e.read(this, h, !1, 23, 4);
  }, f.prototype.readDoubleLE = function(h, w) {
    return h = h >>> 0, w || nt(h, 8, this.length), e.read(this, h, !0, 52, 8);
  }, f.prototype.readDoubleBE = function(h, w) {
    return h = h >>> 0, w || nt(h, 8, this.length), e.read(this, h, !1, 52, 8);
  };
  function dt(b, h, w, F, U, J) {
    if (!f.isBuffer(b)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (h > U || h < J) throw new RangeError('"value" argument is out of bounds');
    if (w + F > b.length) throw new RangeError("Index out of range");
  }
  f.prototype.writeUintLE = f.prototype.writeUIntLE = function(h, w, F, U) {
    if (h = +h, w = w >>> 0, F = F >>> 0, !U) {
      const kt = Math.pow(2, 8 * F) - 1;
      dt(this, h, w, F, kt, 0);
    }
    let J = 1, st = 0;
    for (this[w] = h & 255; ++st < F && (J *= 256); )
      this[w + st] = h / J & 255;
    return w + F;
  }, f.prototype.writeUintBE = f.prototype.writeUIntBE = function(h, w, F, U) {
    if (h = +h, w = w >>> 0, F = F >>> 0, !U) {
      const kt = Math.pow(2, 8 * F) - 1;
      dt(this, h, w, F, kt, 0);
    }
    let J = F - 1, st = 1;
    for (this[w + J] = h & 255; --J >= 0 && (st *= 256); )
      this[w + J] = h / st & 255;
    return w + F;
  }, f.prototype.writeUint8 = f.prototype.writeUInt8 = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 1, 255, 0), this[w] = h & 255, w + 1;
  }, f.prototype.writeUint16LE = f.prototype.writeUInt16LE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 2, 65535, 0), this[w] = h & 255, this[w + 1] = h >>> 8, w + 2;
  }, f.prototype.writeUint16BE = f.prototype.writeUInt16BE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 2, 65535, 0), this[w] = h >>> 8, this[w + 1] = h & 255, w + 2;
  }, f.prototype.writeUint32LE = f.prototype.writeUInt32LE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 4, 4294967295, 0), this[w + 3] = h >>> 24, this[w + 2] = h >>> 16, this[w + 1] = h >>> 8, this[w] = h & 255, w + 4;
  }, f.prototype.writeUint32BE = f.prototype.writeUInt32BE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 4, 4294967295, 0), this[w] = h >>> 24, this[w + 1] = h >>> 16, this[w + 2] = h >>> 8, this[w + 3] = h & 255, w + 4;
  };
  function G(b, h, w, F, U) {
    St(h, F, U, b, w, 7);
    let J = Number(h & BigInt(4294967295));
    b[w++] = J, J = J >> 8, b[w++] = J, J = J >> 8, b[w++] = J, J = J >> 8, b[w++] = J;
    let st = Number(h >> BigInt(32) & BigInt(4294967295));
    return b[w++] = st, st = st >> 8, b[w++] = st, st = st >> 8, b[w++] = st, st = st >> 8, b[w++] = st, w;
  }
  function M(b, h, w, F, U) {
    St(h, F, U, b, w, 7);
    let J = Number(h & BigInt(4294967295));
    b[w + 7] = J, J = J >> 8, b[w + 6] = J, J = J >> 8, b[w + 5] = J, J = J >> 8, b[w + 4] = J;
    let st = Number(h >> BigInt(32) & BigInt(4294967295));
    return b[w + 3] = st, st = st >> 8, b[w + 2] = st, st = st >> 8, b[w + 1] = st, st = st >> 8, b[w] = st, w + 8;
  }
  f.prototype.writeBigUInt64LE = ae(function(h, w = 0) {
    return G(this, h, w, BigInt(0), BigInt("0xffffffffffffffff"));
  }), f.prototype.writeBigUInt64BE = ae(function(h, w = 0) {
    return M(this, h, w, BigInt(0), BigInt("0xffffffffffffffff"));
  }), f.prototype.writeIntLE = function(h, w, F, U) {
    if (h = +h, w = w >>> 0, !U) {
      const Vt = Math.pow(2, 8 * F - 1);
      dt(this, h, w, F, Vt - 1, -Vt);
    }
    let J = 0, st = 1, kt = 0;
    for (this[w] = h & 255; ++J < F && (st *= 256); )
      h < 0 && kt === 0 && this[w + J - 1] !== 0 && (kt = 1), this[w + J] = (h / st >> 0) - kt & 255;
    return w + F;
  }, f.prototype.writeIntBE = function(h, w, F, U) {
    if (h = +h, w = w >>> 0, !U) {
      const Vt = Math.pow(2, 8 * F - 1);
      dt(this, h, w, F, Vt - 1, -Vt);
    }
    let J = F - 1, st = 1, kt = 0;
    for (this[w + J] = h & 255; --J >= 0 && (st *= 256); )
      h < 0 && kt === 0 && this[w + J + 1] !== 0 && (kt = 1), this[w + J] = (h / st >> 0) - kt & 255;
    return w + F;
  }, f.prototype.writeInt8 = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 1, 127, -128), h < 0 && (h = 255 + h + 1), this[w] = h & 255, w + 1;
  }, f.prototype.writeInt16LE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 2, 32767, -32768), this[w] = h & 255, this[w + 1] = h >>> 8, w + 2;
  }, f.prototype.writeInt16BE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 2, 32767, -32768), this[w] = h >>> 8, this[w + 1] = h & 255, w + 2;
  }, f.prototype.writeInt32LE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 4, 2147483647, -2147483648), this[w] = h & 255, this[w + 1] = h >>> 8, this[w + 2] = h >>> 16, this[w + 3] = h >>> 24, w + 4;
  }, f.prototype.writeInt32BE = function(h, w, F) {
    return h = +h, w = w >>> 0, F || dt(this, h, w, 4, 2147483647, -2147483648), h < 0 && (h = 4294967295 + h + 1), this[w] = h >>> 24, this[w + 1] = h >>> 16, this[w + 2] = h >>> 8, this[w + 3] = h & 255, w + 4;
  }, f.prototype.writeBigInt64LE = ae(function(h, w = 0) {
    return G(this, h, w, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), f.prototype.writeBigInt64BE = ae(function(h, w = 0) {
    return M(this, h, w, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function tt(b, h, w, F, U, J) {
    if (w + F > b.length) throw new RangeError("Index out of range");
    if (w < 0) throw new RangeError("Index out of range");
  }
  function ct(b, h, w, F, U) {
    return h = +h, w = w >>> 0, U || tt(b, h, w, 4), e.write(b, h, w, F, 23, 4), w + 4;
  }
  f.prototype.writeFloatLE = function(h, w, F) {
    return ct(this, h, w, !0, F);
  }, f.prototype.writeFloatBE = function(h, w, F) {
    return ct(this, h, w, !1, F);
  };
  function ut(b, h, w, F, U) {
    return h = +h, w = w >>> 0, U || tt(b, h, w, 8), e.write(b, h, w, F, 52, 8), w + 8;
  }
  f.prototype.writeDoubleLE = function(h, w, F) {
    return ut(this, h, w, !0, F);
  }, f.prototype.writeDoubleBE = function(h, w, F) {
    return ut(this, h, w, !1, F);
  }, f.prototype.copy = function(h, w, F, U) {
    if (!f.isBuffer(h)) throw new TypeError("argument should be a Buffer");
    if (F || (F = 0), !U && U !== 0 && (U = this.length), w >= h.length && (w = h.length), w || (w = 0), U > 0 && U < F && (U = F), U === F || h.length === 0 || this.length === 0) return 0;
    if (w < 0)
      throw new RangeError("targetStart out of bounds");
    if (F < 0 || F >= this.length) throw new RangeError("Index out of range");
    if (U < 0) throw new RangeError("sourceEnd out of bounds");
    U > this.length && (U = this.length), h.length - w < U - F && (U = h.length - w + F);
    const J = U - F;
    return this === h && typeof o.prototype.copyWithin == "function" ? this.copyWithin(w, F, U) : o.prototype.set.call(
      h,
      this.subarray(F, U),
      w
    ), J;
  }, f.prototype.fill = function(h, w, F, U) {
    if (typeof h == "string") {
      if (typeof w == "string" ? (U = w, w = 0, F = this.length) : typeof F == "string" && (U = F, F = this.length), U !== void 0 && typeof U != "string")
        throw new TypeError("encoding must be a string");
      if (typeof U == "string" && !f.isEncoding(U))
        throw new TypeError("Unknown encoding: " + U);
      if (h.length === 1) {
        const st = h.charCodeAt(0);
        (U === "utf8" && st < 128 || U === "latin1") && (h = st);
      }
    } else typeof h == "number" ? h = h & 255 : typeof h == "boolean" && (h = Number(h));
    if (w < 0 || this.length < w || this.length < F)
      throw new RangeError("Out of range index");
    if (F <= w)
      return this;
    w = w >>> 0, F = F === void 0 ? this.length : F >>> 0, h || (h = 0);
    let J;
    if (typeof h == "number")
      for (J = w; J < F; ++J)
        this[J] = h;
    else {
      const st = f.isBuffer(h) ? h : f.from(h, U), kt = st.length;
      if (kt === 0)
        throw new TypeError('The value "' + h + '" is invalid for argument "value"');
      for (J = 0; J < F - w; ++J)
        this[J + w] = st[J % kt];
    }
    return this;
  };
  const v = {};
  function x(b, h, w) {
    v[b] = class extends w {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: h.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${b}]`, this.stack, delete this.name;
      }
      get code() {
        return b;
      }
      set code(U) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: U,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${b}]: ${this.message}`;
      }
    };
  }
  x(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(b) {
      return b ? `${b} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), x(
    "ERR_INVALID_ARG_TYPE",
    function(b, h) {
      return `The "${b}" argument must be of type number. Received type ${typeof h}`;
    },
    TypeError
  ), x(
    "ERR_OUT_OF_RANGE",
    function(b, h, w) {
      let F = `The value of "${b}" is out of range.`, U = w;
      return Number.isInteger(w) && Math.abs(w) > 2 ** 32 ? U = et(String(w)) : typeof w == "bigint" && (U = String(w), (w > BigInt(2) ** BigInt(32) || w < -(BigInt(2) ** BigInt(32))) && (U = et(U)), U += "n"), F += ` It must be ${h}. Received ${U}`, F;
    },
    RangeError
  );
  function et(b) {
    let h = "", w = b.length;
    const F = b[0] === "-" ? 1 : 0;
    for (; w >= F + 4; w -= 3)
      h = `_${b.slice(w - 3, w)}${h}`;
    return `${b.slice(0, w)}${h}`;
  }
  function lt(b, h, w) {
    yt(h, "offset"), (b[h] === void 0 || b[h + w] === void 0) && Pt(h, b.length - (w + 1));
  }
  function St(b, h, w, F, U, J) {
    if (b > w || b < h) {
      const st = typeof h == "bigint" ? "n" : "";
      let kt;
      throw h === 0 || h === BigInt(0) ? kt = `>= 0${st} and < 2${st} ** ${(J + 1) * 8}${st}` : kt = `>= -(2${st} ** ${(J + 1) * 8 - 1}${st}) and < 2 ** ${(J + 1) * 8 - 1}${st}`, new v.ERR_OUT_OF_RANGE("value", kt, b);
    }
    lt(F, U, J);
  }
  function yt(b, h) {
    if (typeof b != "number")
      throw new v.ERR_INVALID_ARG_TYPE(h, "number", b);
  }
  function Pt(b, h, w) {
    throw Math.floor(b) !== b ? (yt(b, w), new v.ERR_OUT_OF_RANGE("offset", "an integer", b)) : h < 0 ? new v.ERR_BUFFER_OUT_OF_BOUNDS() : new v.ERR_OUT_OF_RANGE(
      "offset",
      `>= 0 and <= ${h}`,
      b
    );
  }
  const he = /[^+/0-9A-Za-z-_]/g;
  function it(b) {
    if (b = b.split("=")[0], b = b.trim().replace(he, ""), b.length < 2) return "";
    for (; b.length % 4 !== 0; )
      b = b + "=";
    return b;
  }
  function pe(b, h) {
    h = h || 1 / 0;
    let w;
    const F = b.length;
    let U = null;
    const J = [];
    for (let st = 0; st < F; ++st) {
      if (w = b.charCodeAt(st), w > 55295 && w < 57344) {
        if (!U) {
          if (w > 56319) {
            (h -= 3) > -1 && J.push(239, 191, 189);
            continue;
          } else if (st + 1 === F) {
            (h -= 3) > -1 && J.push(239, 191, 189);
            continue;
          }
          U = w;
          continue;
        }
        if (w < 56320) {
          (h -= 3) > -1 && J.push(239, 191, 189), U = w;
          continue;
        }
        w = (U - 55296 << 10 | w - 56320) + 65536;
      } else U && (h -= 3) > -1 && J.push(239, 191, 189);
      if (U = null, w < 128) {
        if ((h -= 1) < 0) break;
        J.push(w);
      } else if (w < 2048) {
        if ((h -= 2) < 0) break;
        J.push(
          w >> 6 | 192,
          w & 63 | 128
        );
      } else if (w < 65536) {
        if ((h -= 3) < 0) break;
        J.push(
          w >> 12 | 224,
          w >> 6 & 63 | 128,
          w & 63 | 128
        );
      } else if (w < 1114112) {
        if ((h -= 4) < 0) break;
        J.push(
          w >> 18 | 240,
          w >> 12 & 63 | 128,
          w >> 6 & 63 | 128,
          w & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return J;
  }
  function we(b) {
    const h = [];
    for (let w = 0; w < b.length; ++w)
      h.push(b.charCodeAt(w) & 255);
    return h;
  }
  function Gt(b, h) {
    let w, F, U;
    const J = [];
    for (let st = 0; st < b.length && !((h -= 2) < 0); ++st)
      w = b.charCodeAt(st), F = w >> 8, U = w % 256, J.push(U), J.push(F);
    return J;
  }
  function Qt(b) {
    return t.toByteArray(it(b));
  }
  function de(b, h, w, F) {
    let U;
    for (U = 0; U < F && !(U + w >= h.length || U >= b.length); ++U)
      h[U + w] = b[U];
    return U;
  }
  function fe(b, h) {
    return b instanceof h || b != null && b.constructor != null && b.constructor.name != null && b.constructor.name === h.name;
  }
  function Ee(b) {
    return b !== b;
  }
  const Se = function() {
    const b = "0123456789abcdef", h = new Array(256);
    for (let w = 0; w < 16; ++w) {
      const F = w * 16;
      for (let U = 0; U < 16; ++U)
        h[F + U] = b[w] + b[U];
    }
    return h;
  }();
  function ae(b) {
    return typeof BigInt > "u" ? Ne : b;
  }
  function Ne() {
    throw new Error("BigInt not supported");
  }
})(sw);
const Ye = sw.Buffer, Jg = "6.15.0";
function $g(n, t, e) {
  const r = t.split("|").map((o) => o.trim());
  for (let o = 0; o < r.length; o++)
    switch (t) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof n === t)
          return;
    }
  const i = new Error(`invalid value for type ${t}`);
  throw i.code = "INVALID_ARGUMENT", i.argument = `value.${e}`, i.value = n, i;
}
async function ve(n) {
  const t = Object.keys(n);
  return (await Promise.all(t.map((r) => Promise.resolve(n[r])))).reduce((r, i, o) => (r[t[o]] = i, r), {});
}
function zt(n, t, e) {
  for (let r in t) {
    let i = t[r];
    const o = e ? e[r] : null;
    o && $g(i, o, r), Object.defineProperty(n, r, { enumerable: !0, value: i, writable: !1 });
  }
}
function Qi(n, t) {
  if (n == null)
    return "null";
  if (t == null && (t = /* @__PURE__ */ new Set()), typeof n == "object") {
    if (t.has(n))
      return "[Circular]";
    t.add(n);
  }
  if (Array.isArray(n))
    return "[ " + n.map((e) => Qi(e, t)).join(", ") + " ]";
  if (n instanceof Uint8Array) {
    const e = "0123456789abcdef";
    let r = "0x";
    for (let i = 0; i < n.length; i++)
      r += e[n[i] >> 4], r += e[n[i] & 15];
    return r;
  }
  if (typeof n == "object" && typeof n.toJSON == "function")
    return Qi(n.toJSON(), t);
  switch (typeof n) {
    case "boolean":
    case "number":
    case "symbol":
      return n.toString();
    case "bigint":
      return BigInt(n).toString();
    case "string":
      return JSON.stringify(n);
    case "object": {
      const e = Object.keys(n);
      return e.sort(), "{ " + e.map((r) => `${Qi(r, t)}: ${Qi(n[r], t)}`).join(", ") + " }";
    }
  }
  return "[ COULD NOT SERIALIZE ]";
}
function Ae(n, t) {
  return n && n.code === t;
}
function Lu(n) {
  return Ae(n, "CALL_EXCEPTION");
}
function te(n, t, e) {
  let r = n;
  {
    const o = [];
    if (e) {
      if ("message" in e || "code" in e || "name" in e)
        throw new Error(`value will overwrite populated values: ${Qi(e)}`);
      for (const a in e) {
        if (a === "shortMessage")
          continue;
        const u = e[a];
        o.push(a + "=" + Qi(u));
      }
    }
    o.push(`code=${t}`), o.push(`version=${Jg}`), o.length && (n += " (" + o.join(", ") + ")");
  }
  let i;
  switch (t) {
    case "INVALID_ARGUMENT":
      i = new TypeError(n);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      i = new RangeError(n);
      break;
    default:
      i = new Error(n);
  }
  return zt(i, { code: t }), e && Object.assign(i, e), i.shortMessage == null && zt(i, { shortMessage: r }), i;
}
function _t(n, t, e, r) {
  if (!n)
    throw te(t, e, r);
}
function V(n, t, e, r) {
  _t(n, t, "INVALID_ARGUMENT", { argument: e, value: r });
}
function aw(n, t, e) {
  e == null && (e = ""), e && (e = ": " + e), _t(n >= t, "missing argument" + e, "MISSING_ARGUMENT", {
    count: n,
    expectedCount: t
  }), _t(n <= t, "too many arguments" + e, "UNEXPECTED_ARGUMENT", {
    count: n,
    expectedCount: t
  });
}
["NFD", "NFC", "NFKD", "NFKC"].reduce((n, t) => {
  try {
    if ("test".normalize(t) !== "test")
      throw new Error("bad");
    if (t === "NFD" && "é".normalize("NFD") !== "é")
      throw new Error("broken");
    n.push(t);
  } catch {
  }
  return n;
}, []);
function Do(n, t, e) {
  if (e == null && (e = ""), n !== t) {
    let r = e, i = "new";
    e && (r += ".", i += " " + e), _t(!1, `private constructor; use ${r}from* methods`, "UNSUPPORTED_OPERATION", {
      operation: i
    });
  }
}
function cw(n, t, e) {
  if (n instanceof Uint8Array)
    return e ? new Uint8Array(n) : n;
  if (typeof n == "string" && n.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const r = new Uint8Array((n.length - 2) / 2);
    let i = 2;
    for (let o = 0; o < r.length; o++)
      r[o] = parseInt(n.substring(i, i + 2), 16), i += 2;
    return r;
  }
  V(!1, "invalid BytesLike value", t || "value", n);
}
function Ot(n, t) {
  return cw(n, t, !1);
}
function xe(n, t) {
  return cw(n, t, !0);
}
function Xt(n, t) {
  return !(typeof n != "string" || !n.match(/^0x[0-9A-Fa-f]*$/) || typeof t == "number" && n.length !== 2 + 2 * t || t === !0 && n.length % 2 !== 0);
}
function Du(n) {
  return Xt(n, !0) || n instanceof Uint8Array;
}
const g_ = "0123456789abcdef";
function gt(n) {
  const t = Ot(n);
  let e = "0x";
  for (let r = 0; r < t.length; r++) {
    const i = t[r];
    e += g_[(i & 240) >> 4] + g_[i & 15];
  }
  return e;
}
function oe(n) {
  return "0x" + n.map((t) => gt(t).substring(2)).join("");
}
function Ji(n) {
  return Xt(n, !0) ? (n.length - 2) / 2 : Ot(n).length;
}
function ne(n, t, e) {
  const r = Ot(n);
  return e != null && e > r.length && _t(!1, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
    buffer: r,
    length: r.length,
    offset: e
  }), gt(r.slice(t ?? 0, e ?? r.length));
}
function uw(n, t, e) {
  const r = Ot(n);
  _t(t >= r.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(r),
    length: t,
    offset: t + 1
  });
  const i = new Uint8Array(t);
  return i.fill(0), e ? i.set(r, t - r.length) : i.set(r, 0), gt(i);
}
function Yn(n, t) {
  return uw(n, t, !0);
}
function Yg(n, t) {
  return uw(n, t, !1);
}
const Uo = BigInt(0), Je = BigInt(1), Ki = 9007199254740991;
function Zg(n, t) {
  const e = Mo(n, "value"), r = BigInt(Tt(t, "width"));
  if (_t(e >> r === Uo, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: n
  }), e >> r - Je) {
    const i = (Je << r) - Je;
    return -((~e & i) + Je);
  }
  return e;
}
function _w(n, t) {
  let e = mt(n, "value");
  const r = BigInt(Tt(t, "width")), i = Je << r - Je;
  if (e < Uo) {
    e = -e, _t(e <= i, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: n
    });
    const o = (Je << r) - Je;
    return (~e & o) + Je;
  } else
    _t(e < i, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: n
    });
  return e;
}
function zs(n, t) {
  const e = Mo(n, "value"), r = BigInt(Tt(t, "bits"));
  return e & (Je << r) - Je;
}
function mt(n, t) {
  switch (typeof n) {
    case "bigint":
      return n;
    case "number":
      return V(Number.isInteger(n), "underflow", t || "value", n), V(n >= -Ki && n <= Ki, "overflow", t || "value", n), BigInt(n);
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return n[0] === "-" && n[1] !== "-" ? -BigInt(n.substring(1)) : BigInt(n);
      } catch (e) {
        V(!1, `invalid BigNumberish string: ${e.message}`, t || "value", n);
      }
  }
  V(!1, "invalid BigNumberish value", t || "value", n);
}
function Mo(n, t) {
  const e = mt(n, t);
  return _t(e >= Uo, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value: n
  }), e;
}
const y_ = "0123456789abcdef";
function Uu(n) {
  if (n instanceof Uint8Array) {
    let t = "0x0";
    for (const e of n)
      t += y_[e >> 4], t += y_[e & 15];
    return BigInt(t);
  }
  return mt(n);
}
function Tt(n, t) {
  switch (typeof n) {
    case "bigint":
      return V(n >= -Ki && n <= Ki, "overflow", t || "value", n), Number(n);
    case "number":
      return V(Number.isInteger(n), "underflow", t || "value", n), V(n >= -Ki && n <= Ki, "overflow", t || "value", n), n;
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return Tt(BigInt(n), t);
      } catch (e) {
        V(!1, `invalid numeric string: ${e.message}`, t || "value", n);
      }
  }
  V(!1, "invalid numeric value", t || "value", n);
}
function Xg(n) {
  return Tt(Uu(n));
}
function _i(n, t) {
  let r = Mo(n, "value").toString(16);
  if (t == null)
    r.length % 2 && (r = "0" + r);
  else {
    const i = Tt(t, "width");
    for (_t(i * 2 >= r.length, `value exceeds width (${i} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: n
    }); r.length < i * 2; )
      r = "0" + r;
  }
  return "0x" + r;
}
function ge(n) {
  const t = Mo(n, "value");
  if (t === Uo)
    return new Uint8Array([]);
  let e = t.toString(16);
  e.length % 2 && (e = "0" + e);
  const r = new Uint8Array(e.length / 2);
  for (let i = 0; i < r.length; i++) {
    const o = i * 2;
    r[i] = parseInt(e.substring(o, o + 2), 16);
  }
  return r;
}
function Ke(n) {
  let t = gt(Du(n) ? n : ge(n)).substring(2);
  for (; t.startsWith("0"); )
    t = t.substring(1);
  return t === "" && (t = "0"), "0x" + t;
}
const b_ = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
BigInt(0);
const m_ = BigInt(58);
function t0(n) {
  const t = Ot(n);
  let e = Uu(t), r = "";
  for (; e; )
    r = b_[Number(e % m_)] + r, e /= m_;
  for (let i = 0; i < t.length && !t[i]; i++)
    r = b_[0] + r;
  return r;
}
function e0(n) {
  n = atob(n);
  const t = new Uint8Array(n.length);
  for (let e = 0; e < n.length; e++)
    t[e] = n.charCodeAt(e);
  return Ot(t);
}
function r0(n) {
  const t = Ot(n);
  let e = "";
  for (let r = 0; r < t.length; r++)
    e += String.fromCharCode(t[r]);
  return btoa(e);
}
class fw {
  /**
   *  The event filter.
   */
  filter;
  /**
   *  The **EventEmitterable**.
   */
  emitter;
  #t;
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(t, e, r) {
    this.#t = e, zt(this, { emitter: t, filter: r });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    this.#t != null && await this.emitter.off(this.filter, this.#t);
  }
}
function n0(n, t, e, r, i) {
  V(!1, `invalid codepoint at offset ${t}; ${n}`, "bytes", e);
}
function lw(n, t, e, r, i) {
  if (n === "BAD_PREFIX" || n === "UNEXPECTED_CONTINUE") {
    let o = 0;
    for (let a = t + 1; a < e.length && e[a] >> 6 === 2; a++)
      o++;
    return o;
  }
  return n === "OVERRUN" ? e.length - t - 1 : 0;
}
function i0(n, t, e, r, i) {
  return n === "OVERLONG" ? (V(typeof i == "number", "invalid bad code point for replacement", "badCodepoint", i), r.push(i), 0) : (r.push(65533), lw(n, t, e));
}
const s0 = Object.freeze({
  error: n0,
  ignore: lw,
  replace: i0
});
function o0(n, t) {
  t == null && (t = s0.error);
  const e = Ot(n, "bytes"), r = [];
  let i = 0;
  for (; i < e.length; ) {
    const o = e[i++];
    if (o >> 7 === 0) {
      r.push(o);
      continue;
    }
    let a = null, u = null;
    if ((o & 224) === 192)
      a = 1, u = 127;
    else if ((o & 240) === 224)
      a = 2, u = 2047;
    else if ((o & 248) === 240)
      a = 3, u = 65535;
    else {
      (o & 192) === 128 ? i += t("UNEXPECTED_CONTINUE", i - 1, e, r) : i += t("BAD_PREFIX", i - 1, e, r);
      continue;
    }
    if (i - 1 + a >= e.length) {
      i += t("OVERRUN", i - 1, e, r);
      continue;
    }
    let _ = o & (1 << 8 - a - 1) - 1;
    for (let l = 0; l < a; l++) {
      let f = e[i];
      if ((f & 192) != 128) {
        i += t("MISSING_CONTINUE", i, e, r), _ = null;
        break;
      }
      _ = _ << 6 | f & 63, i++;
    }
    if (_ !== null) {
      if (_ > 1114111) {
        i += t("OUT_OF_RANGE", i - 1 - a, e, r, _);
        continue;
      }
      if (_ >= 55296 && _ <= 57343) {
        i += t("UTF16_SURROGATE", i - 1 - a, e, r, _);
        continue;
      }
      if (_ <= u) {
        i += t("OVERLONG", i - 1 - a, e, r, _);
        continue;
      }
      r.push(_);
    }
  }
  return r;
}
function Jn(n, t) {
  V(typeof n == "string", "invalid string value", "str", n);
  let e = [];
  for (let r = 0; r < n.length; r++) {
    const i = n.charCodeAt(r);
    if (i < 128)
      e.push(i);
    else if (i < 2048)
      e.push(i >> 6 | 192), e.push(i & 63 | 128);
    else if ((i & 64512) == 55296) {
      r++;
      const o = n.charCodeAt(r);
      V(r < n.length && (o & 64512) === 56320, "invalid surrogate pair", "str", n);
      const a = 65536 + ((i & 1023) << 10) + (o & 1023);
      e.push(a >> 18 | 240), e.push(a >> 12 & 63 | 128), e.push(a >> 6 & 63 | 128), e.push(a & 63 | 128);
    } else
      e.push(i >> 12 | 224), e.push(i >> 6 & 63 | 128), e.push(i & 63 | 128);
  }
  return new Uint8Array(e);
}
function a0(n) {
  return n.map((t) => t <= 65535 ? String.fromCharCode(t) : (t -= 65536, String.fromCharCode((t >> 10 & 1023) + 55296, (t & 1023) + 56320))).join("");
}
function zo(n, t) {
  return a0(o0(n, t));
}
function hw(n) {
  async function t(e, r) {
    _t(r == null || !r.cancelled, "request cancelled before sending", "CANCELLED");
    const i = e.url.split(":")[0].toLowerCase();
    _t(i === "http" || i === "https", `unsupported protocol ${i}`, "UNSUPPORTED_OPERATION", {
      info: { protocol: i },
      operation: "request"
    }), _t(i === "https" || !e.credentials || e.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let o = null;
    const a = new AbortController(), u = setTimeout(() => {
      o = te("request timeout", "TIMEOUT"), a.abort();
    }, e.timeout);
    r && r.addListener(() => {
      o = te("request cancelled", "CANCELLED"), a.abort();
    });
    const _ = Object.assign({}, n, {
      method: e.method,
      headers: new Headers(Array.from(e)),
      body: e.body || void 0,
      signal: a.signal
    });
    let l;
    try {
      l = await fetch(e.url, _);
    } catch (B) {
      throw clearTimeout(u), o || B;
    }
    clearTimeout(u);
    const f = {};
    l.headers.forEach((B, I) => {
      f[I.toLowerCase()] = B;
    });
    const g = await l.arrayBuffer(), y = g == null ? null : new Uint8Array(g);
    return {
      statusCode: l.status,
      statusMessage: l.statusText,
      headers: f,
      body: y
    };
  }
  return t;
}
const c0 = 12, u0 = 250;
let A_ = hw();
const _0 = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i"), f0 = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
let Ra = !1;
async function pw(n, t) {
  try {
    const e = n.match(_0);
    if (!e)
      throw new Error("invalid data");
    return new ci(200, "OK", {
      "content-type": e[1] || "text/plain"
    }, e[2] ? e0(e[3]) : h0(e[3]));
  } catch {
    return new ci(599, "BAD REQUEST (invalid data: URI)", {}, null, new fr(n));
  }
}
function ww(n) {
  async function t(e, r) {
    try {
      const i = e.match(f0);
      if (!i)
        throw new Error("invalid link");
      return new fr(`${n}${i[2]}`);
    } catch {
      return new ci(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new fr(e));
    }
  }
  return t;
}
const no = {
  data: pw,
  ipfs: ww("https://gateway.ipfs.io/ipfs/")
}, dw = /* @__PURE__ */ new WeakMap();
class l0 {
  #t;
  #e;
  constructor(t) {
    this.#t = [], this.#e = !1, dw.set(t, () => {
      if (!this.#e) {
        this.#e = !0;
        for (const e of this.#t)
          setTimeout(() => {
            e();
          }, 0);
        this.#t = [];
      }
    });
  }
  addListener(t) {
    _t(!this.#e, "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    }), this.#t.push(t);
  }
  get cancelled() {
    return this.#e;
  }
  checkSignal() {
    _t(!this.cancelled, "cancelled", "CANCELLED", {});
  }
}
function io(n) {
  if (n == null)
    throw new Error("missing signal; should not happen");
  return n.checkSignal(), n;
}
class fr {
  #t;
  #e;
  #r;
  #n;
  #i;
  #o;
  #s;
  #a;
  #h;
  // Hooks
  #u;
  #p;
  #w;
  #c;
  #_;
  #f;
  /**
   *  The fetch URL to request.
   */
  get url() {
    return this.#o;
  }
  set url(t) {
    this.#o = String(t);
  }
  /**
   *  The fetch body, if any, to send as the request body. //(default: null)//
   *
   *  When setting a body, the intrinsic ``Content-Type`` is automatically
   *  set and will be used if **not overridden** by setting a custom
   *  header.
   *
   *  If %%body%% is null, the body is cleared (along with the
   *  intrinsic ``Content-Type``).
   *
   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
   *  ``text/plain``.
   *
   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
   *  ``application/octet-stream``.
   *
   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
   *  set to ``application/json``.
   */
  get body() {
    return this.#s == null ? null : new Uint8Array(this.#s);
  }
  set body(t) {
    if (t == null)
      this.#s = void 0, this.#a = void 0;
    else if (typeof t == "string")
      this.#s = Jn(t), this.#a = "text/plain";
    else if (t instanceof Uint8Array)
      this.#s = t, this.#a = "application/octet-stream";
    else if (typeof t == "object")
      this.#s = Jn(JSON.stringify(t)), this.#a = "application/json";
    else
      throw new Error("invalid body");
  }
  /**
   *  Returns true if the request has a body.
   */
  hasBody() {
    return this.#s != null;
  }
  /**
   *  The HTTP method to use when requesting the URI. If no method
   *  has been explicitly set, then ``GET`` is used if the body is
   *  null and ``POST`` otherwise.
   */
  get method() {
    return this.#n ? this.#n : this.hasBody() ? "POST" : "GET";
  }
  set method(t) {
    t == null && (t = ""), this.#n = String(t).toUpperCase();
  }
  /**
   *  The headers that will be used when requesting the URI. All
   *  keys are lower-case.
   *
   *  This object is a copy, so any changes will **NOT** be reflected
   *  in the ``FetchRequest``.
   *
   *  To set a header entry, use the ``setHeader`` method.
   */
  get headers() {
    const t = Object.assign({}, this.#r);
    return this.#h && (t.authorization = `Basic ${r0(Jn(this.#h))}`), this.allowGzip && (t["accept-encoding"] = "gzip"), t["content-type"] == null && this.#a && (t["content-type"] = this.#a), this.body && (t["content-length"] = String(this.body.length)), t;
  }
  /**
   *  Get the header for %%key%%, ignoring case.
   */
  getHeader(t) {
    return this.headers[t.toLowerCase()];
  }
  /**
   *  Set the header for %%key%% to %%value%%. All values are coerced
   *  to a string.
   */
  setHeader(t, e) {
    this.#r[String(t).toLowerCase()] = String(e);
  }
  /**
   *  Clear all headers, resetting all intrinsic headers.
   */
  clearHeaders() {
    this.#r = {};
  }
  [Symbol.iterator]() {
    const t = this.headers, e = Object.keys(t);
    let r = 0;
    return {
      next: () => {
        if (r < e.length) {
          const i = e[r++];
          return {
            value: [i, t[i]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  The value that will be sent for the ``Authorization`` header.
   *
   *  To set the credentials, use the ``setCredentials`` method.
   */
  get credentials() {
    return this.#h || null;
  }
  /**
   *  Sets an ``Authorization`` for %%username%% with %%password%%.
   */
  setCredentials(t, e) {
    V(!t.match(/:/), "invalid basic authentication username", "username", "[REDACTED]"), this.#h = `${t}:${e}`;
  }
  /**
   *  Enable and request gzip-encoded responses. The response will
   *  automatically be decompressed. //(default: true)//
   */
  get allowGzip() {
    return this.#e;
  }
  set allowGzip(t) {
    this.#e = !!t;
  }
  /**
   *  Allow ``Authentication`` credentials to be sent over insecure
   *  channels. //(default: false)//
   */
  get allowInsecureAuthentication() {
    return !!this.#t;
  }
  set allowInsecureAuthentication(t) {
    this.#t = !!t;
  }
  /**
   *  The timeout (in milliseconds) to wait for a complete response.
   *  //(default: 5 minutes)//
   */
  get timeout() {
    return this.#i;
  }
  set timeout(t) {
    V(t >= 0, "timeout must be non-zero", "timeout", t), this.#i = t;
  }
  /**
   *  This function is called prior to each request, for example
   *  during a redirection or retry in case of server throttling.
   *
   *  This offers an opportunity to populate headers or update
   *  content before sending a request.
   */
  get preflightFunc() {
    return this.#u || null;
  }
  set preflightFunc(t) {
    this.#u = t;
  }
  /**
   *  This function is called after each response, offering an
   *  opportunity to provide client-level throttling or updating
   *  response data.
   *
   *  Any error thrown in this causes the ``send()`` to throw.
   *
   *  To schedule a retry attempt (assuming the maximum retry limit
   *  has not been reached), use [[response.throwThrottleError]].
   */
  get processFunc() {
    return this.#p || null;
  }
  set processFunc(t) {
    this.#p = t;
  }
  /**
   *  This function is called on each retry attempt.
   */
  get retryFunc() {
    return this.#w || null;
  }
  set retryFunc(t) {
    this.#w = t;
  }
  /**
   *  This function is called to fetch content from HTTP and
   *  HTTPS URLs and is platform specific (e.g. nodejs vs
   *  browsers).
   *
   *  This is by default the currently registered global getUrl
   *  function, which can be changed using [[registerGetUrl]].
   *  If this has been set, setting is to ``null`` will cause
   *  this FetchRequest (and any future clones) to revert back to
   *  using the currently registered global getUrl function.
   *
   *  Setting this is generally not necessary, but may be useful
   *  for developers that wish to intercept requests or to
   *  configurege a proxy or other agent.
   */
  get getUrlFunc() {
    return this.#f || A_;
  }
  set getUrlFunc(t) {
    this.#f = t;
  }
  /**
   *  Create a new FetchRequest instance with default values.
   *
   *  Once created, each property may be set before issuing a
   *  ``.send()`` to make the request.
   */
  constructor(t) {
    this.#o = String(t), this.#t = !1, this.#e = !0, this.#r = {}, this.#n = "", this.#i = 3e5, this.#_ = {
      slotInterval: u0,
      maxAttempts: c0
    }, this.#f = null;
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#s ? gt(this.#s) : "null"}>`;
  }
  /**
   *  Update the throttle parameters used to determine maximum
   *  attempts and exponential-backoff properties.
   */
  setThrottleParams(t) {
    t.slotInterval != null && (this.#_.slotInterval = t.slotInterval), t.maxAttempts != null && (this.#_.maxAttempts = t.maxAttempts);
  }
  async #l(t, e, r, i, o) {
    if (t >= this.#_.maxAttempts)
      return o.makeServerError("exceeded maximum retry limit");
    _t(E_() <= e, "timeout", "TIMEOUT", {
      operation: "request.send",
      reason: "timeout",
      request: i
    }), r > 0 && await p0(r);
    let a = this.clone();
    const u = (a.url.split(":")[0] || "").toLowerCase();
    if (u in no) {
      const f = await no[u](a.url, io(i.#c));
      if (f instanceof ci) {
        let g = f;
        if (this.processFunc) {
          io(i.#c);
          try {
            g = await this.processFunc(a, g);
          } catch (y) {
            (y.throttle == null || typeof y.stall != "number") && g.makeServerError("error in post-processing function", y).assertOk();
          }
        }
        return g;
      }
      a = f;
    }
    this.preflightFunc && (a = await this.preflightFunc(a));
    const _ = await this.getUrlFunc(a, io(i.#c));
    let l = new ci(_.statusCode, _.statusMessage, _.headers, _.body, i);
    if (l.statusCode === 301 || l.statusCode === 302) {
      try {
        const f = l.headers.location || "";
        return a.redirect(f).#l(t + 1, e, 0, i, l);
      } catch {
      }
      return l;
    } else if (l.statusCode === 429 && (this.retryFunc == null || await this.retryFunc(a, l, t))) {
      const f = l.headers["retry-after"];
      let g = this.#_.slotInterval * Math.trunc(Math.random() * Math.pow(2, t));
      return typeof f == "string" && f.match(/^[1-9][0-9]*$/) && (g = parseInt(f)), a.clone().#l(t + 1, e, g, i, l);
    }
    if (this.processFunc) {
      io(i.#c);
      try {
        l = await this.processFunc(a, l);
      } catch (f) {
        (f.throttle == null || typeof f.stall != "number") && l.makeServerError("error in post-processing function", f).assertOk();
        let g = this.#_.slotInterval * Math.trunc(Math.random() * Math.pow(2, t));
        return f.stall >= 0 && (g = f.stall), a.clone().#l(t + 1, e, g, i, l);
      }
    }
    return l;
  }
  /**
   *  Resolves to the response by sending the request.
   */
  send() {
    return _t(this.#c == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" }), this.#c = new l0(this), this.#l(0, E_() + this.timeout, 0, this, new ci(0, "", {}, null, this));
  }
  /**
   *  Cancels the inflight response, causing a ``CANCELLED``
   *  error to be rejected from the [[send]].
   */
  cancel() {
    _t(this.#c != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const t = dw.get(this);
    if (!t)
      throw new Error("missing signal; should not happen");
    t();
  }
  /**
   *  Returns a new [[FetchRequest]] that represents the redirection
   *  to %%location%%.
   */
  redirect(t) {
    const e = this.url.split(":")[0].toLowerCase(), r = t.split(":")[0].toLowerCase();
    _t(this.method === "GET" && (e !== "https" || r !== "http") && t.match(/^https?:/), "unsupported redirect", "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(t)})`
    });
    const i = new fr(t);
    return i.method = "GET", i.allowGzip = this.allowGzip, i.timeout = this.timeout, i.#r = Object.assign({}, this.#r), this.#s && (i.#s = new Uint8Array(this.#s)), i.#a = this.#a, i;
  }
  /**
   *  Create a new copy of this request.
   */
  clone() {
    const t = new fr(this.url);
    return t.#n = this.#n, this.#s && (t.#s = this.#s), t.#a = this.#a, t.#r = Object.assign({}, this.#r), t.#h = this.#h, this.allowGzip && (t.allowGzip = !0), t.timeout = this.timeout, this.allowInsecureAuthentication && (t.allowInsecureAuthentication = !0), t.#u = this.#u, t.#p = this.#p, t.#w = this.#w, t.#_ = Object.assign({}, this.#_), t.#f = this.#f, t;
  }
  /**
   *  Locks all static configuration for gateways and FetchGetUrlFunc
   *  registration.
   */
  static lockConfig() {
    Ra = !0;
  }
  /**
   *  Get the current Gateway function for %%scheme%%.
   */
  static getGateway(t) {
    return no[t.toLowerCase()] || null;
  }
  /**
   *  Use the %%func%% when fetching URIs using %%scheme%%.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGateway(t, e) {
    if (t = t.toLowerCase(), t === "http" || t === "https")
      throw new Error(`cannot intercept ${t}; use registerGetUrl`);
    if (Ra)
      throw new Error("gateways locked");
    no[t] = e;
  }
  /**
   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGetUrl(t) {
    if (Ra)
      throw new Error("gateways locked");
    A_ = t;
  }
  /**
   *  Creates a getUrl function that fetches content from HTTP and
   *  HTTPS URLs.
   *
   *  The available %%options%% are dependent on the platform
   *  implementation of the default getUrl function.
   *
   *  This is not generally something that is needed, but is useful
   *  when trying to customize simple behaviour when fetching HTTP
   *  content.
   */
  static createGetUrlFunc(t) {
    return hw(t);
  }
  /**
   *  Creates a function that can "fetch" data URIs.
   *
   *  Note that this is automatically done internally to support
   *  data URIs, so it is not necessary to register it.
   *
   *  This is not generally something that is needed, but may
   *  be useful in a wrapper to perfom custom data URI functionality.
   */
  static createDataGateway() {
    return pw;
  }
  /**
   *  Creates a function that will fetch IPFS (unvalidated) from
   *  a custom gateway baseUrl.
   *
   *  The default IPFS gateway used internally is
   *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
   */
  static createIpfsGatewayFunc(t) {
    return ww(t);
  }
}
class ci {
  #t;
  #e;
  #r;
  #n;
  #i;
  #o;
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${this.#n ? gt(this.#n) : "null"}>`;
  }
  /**
   *  The response status code.
   */
  get statusCode() {
    return this.#t;
  }
  /**
   *  The response status message.
   */
  get statusMessage() {
    return this.#e;
  }
  /**
   *  The response headers. All keys are lower-case.
   */
  get headers() {
    return Object.assign({}, this.#r);
  }
  /**
   *  The response body, or ``null`` if there was no body.
   */
  get body() {
    return this.#n == null ? null : new Uint8Array(this.#n);
  }
  /**
   *  The response body as a UTF-8 encoded string, or the empty
   *  string (i.e. ``""``) if there was no body.
   *
   *  An error is thrown if the body is invalid UTF-8 data.
   */
  get bodyText() {
    try {
      return this.#n == null ? "" : zo(this.#n);
    } catch {
      _t(!1, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  /**
   *  The response body, decoded as JSON.
   *
   *  An error is thrown if the body is invalid JSON-encoded data
   *  or if there was no body.
   */
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch {
      _t(!1, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const t = this.headers, e = Object.keys(t);
    let r = 0;
    return {
      next: () => {
        if (r < e.length) {
          const i = e[r++];
          return {
            value: [i, t[i]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  constructor(t, e, r, i, o) {
    this.#t = t, this.#e = e, this.#r = Object.keys(r).reduce((a, u) => (a[u.toLowerCase()] = String(r[u]), a), {}), this.#n = i == null ? null : new Uint8Array(i), this.#i = o || null, this.#o = { message: "" };
  }
  /**
   *  Return a Response with matching headers and body, but with
   *  an error status code (i.e. 599) and %%message%% with an
   *  optional %%error%%.
   */
  makeServerError(t, e) {
    let r;
    t ? r = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${t})` : (t = `${this.statusCode} ${this.statusMessage}`, r = `CLIENT ESCALATED SERVER ERROR (${t})`);
    const i = new ci(599, r, this.headers, this.body, this.#i || void 0);
    return i.#o = { message: t, error: e }, i;
  }
  /**
   *  If called within a [request.processFunc](FetchRequest-processFunc)
   *  call, causes the request to retry as if throttled for %%stall%%
   *  milliseconds.
   */
  throwThrottleError(t, e) {
    e == null ? e = -1 : V(Number.isInteger(e) && e >= 0, "invalid stall timeout", "stall", e);
    const r = new Error(t || "throttling requests");
    throw zt(r, { stall: e, throttle: !0 }), r;
  }
  /**
   *  Get the header value for %%key%%, ignoring case.
   */
  getHeader(t) {
    return this.headers[t.toLowerCase()];
  }
  /**
   *  Returns true if the response has a body.
   */
  hasBody() {
    return this.#n != null;
  }
  /**
   *  The request made for this response.
   */
  get request() {
    return this.#i;
  }
  /**
   *  Returns true if this response was a success statusCode.
   */
  ok() {
    return this.#o.message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  /**
   *  Throws a ``SERVER_ERROR`` if this response is not ok.
   */
  assertOk() {
    if (this.ok())
      return;
    let { message: t, error: e } = this.#o;
    t === "" && (t = `server response ${this.statusCode} ${this.statusMessage}`);
    let r = null;
    this.request && (r = this.request.url);
    let i = null;
    try {
      this.#n && (i = zo(this.#n));
    } catch {
    }
    _t(!1, t, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error: e,
      info: {
        requestUrl: r,
        responseBody: i,
        responseStatus: `${this.statusCode} ${this.statusMessage}`
      }
    });
  }
}
function E_() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function h0(n) {
  return Jn(n.replace(/%([0-9a-f][0-9a-f])/gi, (t, e) => String.fromCharCode(parseInt(e, 16))));
}
function p0(n) {
  return new Promise((t) => setTimeout(t, n));
}
function w0(n) {
  let t = n.toString(16);
  for (; t.length < 2; )
    t = "0" + t;
  return "0x" + t;
}
function v_(n, t, e) {
  let r = 0;
  for (let i = 0; i < e; i++)
    r = r * 256 + n[t + i];
  return r;
}
function x_(n, t, e, r) {
  const i = [];
  for (; e < t + 1 + r; ) {
    const o = gw(n, e);
    i.push(o.result), e += o.consumed, _t(e <= t + 1 + r, "child data too short", "BUFFER_OVERRUN", {
      buffer: n,
      length: r,
      offset: t
    });
  }
  return { consumed: 1 + r, result: i };
}
function gw(n, t) {
  _t(n.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: n,
    length: 0,
    offset: 1
  });
  const e = (r) => {
    _t(r <= n.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: n,
      length: n.length,
      offset: r
    });
  };
  if (n[t] >= 248) {
    const r = n[t] - 247;
    e(t + 1 + r);
    const i = v_(n, t + 1, r);
    return e(t + 1 + r + i), x_(n, t, t + 1 + r, r + i);
  } else if (n[t] >= 192) {
    const r = n[t] - 192;
    return e(t + 1 + r), x_(n, t, t + 1, r);
  } else if (n[t] >= 184) {
    const r = n[t] - 183;
    e(t + 1 + r);
    const i = v_(n, t + 1, r);
    e(t + 1 + r + i);
    const o = gt(n.slice(t + 1 + r, t + 1 + r + i));
    return { consumed: 1 + r + i, result: o };
  } else if (n[t] >= 128) {
    const r = n[t] - 128;
    e(t + 1 + r);
    const i = gt(n.slice(t + 1, t + 1 + r));
    return { consumed: 1 + r, result: i };
  }
  return { consumed: 1, result: w0(n[t]) };
}
function Ks(n) {
  const t = Ot(n, "data"), e = gw(t, 0);
  return V(e.consumed === t.length, "unexpected junk after rlp payload", "data", n), e.result;
}
function R_(n) {
  const t = [];
  for (; n; )
    t.unshift(n & 255), n >>= 8;
  return t;
}
function yw(n) {
  if (Array.isArray(n)) {
    let r = [];
    if (n.forEach(function(o) {
      r = r.concat(yw(o));
    }), r.length <= 55)
      return r.unshift(192 + r.length), r;
    const i = R_(r.length);
    return i.unshift(247 + i.length), i.concat(r);
  }
  const t = Array.prototype.slice.call(Ot(n, "object"));
  if (t.length === 1 && t[0] <= 127)
    return t;
  if (t.length <= 55)
    return t.unshift(128 + t.length), t;
  const e = R_(t.length);
  return e.unshift(183 + e.length), e.concat(t);
}
const z_ = "0123456789abcdef";
function fi(n) {
  let t = "0x";
  for (const e of yw(n))
    t += z_[e >> 4], t += z_[e & 15];
  return t;
}
const Re = 32, fu = new Uint8Array(Re), d0 = ["then"], so = {}, bw = /* @__PURE__ */ new WeakMap();
function mi(n) {
  return bw.get(n);
}
function B_(n, t) {
  bw.set(n, t);
}
function Es(n, t) {
  const e = new Error(`deferred error during ABI decoding triggered accessing ${n}`);
  throw e.error = t, e;
}
function lu(n, t, e) {
  return n.indexOf(null) >= 0 ? t.map((r, i) => r instanceof Qn ? lu(mi(r), r, e) : r) : n.reduce((r, i, o) => {
    let a = t.getValue(i);
    return i in r || (e && a instanceof Qn && (a = lu(mi(a), a, e)), r[i] = a), r;
  }, {});
}
class Qn extends Array {
  // No longer used; but cannot be removed as it will remove the
  // #private field from the .d.ts which may break backwards
  // compatibility
  #t;
  /**
   *  @private
   */
  constructor(...t) {
    const e = t[0];
    let r = t[1], i = (t[2] || []).slice(), o = !0;
    e !== so && (r = t, i = [], o = !1), super(r.length), r.forEach((_, l) => {
      this[l] = _;
    });
    const a = i.reduce((_, l) => (typeof l == "string" && _.set(l, (_.get(l) || 0) + 1), _), /* @__PURE__ */ new Map());
    if (B_(this, Object.freeze(r.map((_, l) => {
      const f = i[l];
      return f != null && a.get(f) === 1 ? f : null;
    }))), this.#t = [], this.#t == null && this.#t, !o)
      return;
    Object.freeze(this);
    const u = new Proxy(this, {
      get: (_, l, f) => {
        if (typeof l == "string") {
          if (l.match(/^[0-9]+$/)) {
            const y = Tt(l, "%index");
            if (y < 0 || y >= this.length)
              throw new RangeError("out of result range");
            const B = _[y];
            return B instanceof Error && Es(`index ${y}`, B), B;
          }
          if (d0.indexOf(l) >= 0)
            return Reflect.get(_, l, f);
          const g = _[l];
          if (g instanceof Function)
            return function(...y) {
              return g.apply(this === f ? _ : this, y);
            };
          if (!(l in _))
            return _.getValue.apply(this === f ? _ : this, [l]);
        }
        return Reflect.get(_, l, f);
      }
    });
    return B_(u, mi(this)), u;
  }
  /**
   *  Returns the Result as a normal Array. If %%deep%%, any children
   *  which are Result objects are also converted to a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray(t) {
    const e = [];
    return this.forEach((r, i) => {
      r instanceof Error && Es(`index ${i}`, r), t && r instanceof Qn && (r = r.toArray(t)), e.push(r);
    }), e;
  }
  /**
   *  Returns the Result as an Object with each name-value pair. If
   *  %%deep%%, any children which are Result objects are also
   *  converted to an Object.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject(t) {
    const e = mi(this);
    return e.reduce((r, i, o) => (_t(i != null, `value at index ${o} unnamed`, "UNSUPPORTED_OPERATION", {
      operation: "toObject()"
    }), lu(e, this, t)), {});
  }
  /**
   *  @_ignore
   */
  slice(t, e) {
    t == null && (t = 0), t < 0 && (t += this.length, t < 0 && (t = 0)), e == null && (e = this.length), e < 0 && (e += this.length, e < 0 && (e = 0)), e > this.length && (e = this.length);
    const r = mi(this), i = [], o = [];
    for (let a = t; a < e; a++)
      i.push(this[a]), o.push(r[a]);
    return new Qn(so, i, o);
  }
  /**
   *  @_ignore
   */
  filter(t, e) {
    const r = mi(this), i = [], o = [];
    for (let a = 0; a < this.length; a++) {
      const u = this[a];
      u instanceof Error && Es(`index ${a}`, u), t.call(e, u, a, this) && (i.push(u), o.push(r[a]));
    }
    return new Qn(so, i, o);
  }
  /**
   *  @_ignore
   */
  map(t, e) {
    const r = [];
    for (let i = 0; i < this.length; i++) {
      const o = this[i];
      o instanceof Error && Es(`index ${i}`, o), r.push(t.call(e, o, i, this));
    }
    return r;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(t) {
    const e = mi(this).indexOf(t);
    if (e === -1)
      return;
    const r = this[e];
    return r instanceof Error && Es(`property ${JSON.stringify(t)}`, r.error), r;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(t, e) {
    return new Qn(so, t, e);
  }
}
function S_(n) {
  let t = ge(n);
  return _t(t.length <= Re, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: t, length: Re, offset: t.length }), t.length !== Re && (t = xe(oe([fu.slice(t.length % Re), t]))), t;
}
class Xn {
  // The coder name:
  //   - address, uint256, tuple, array, etc.
  name;
  // The fully expanded type, including composite types:
  //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
  type;
  // The localName bound in the signature, in this example it is "baz":
  //   - tuple(address foo, uint bar) baz
  localName;
  // Whether this type is dynamic:
  //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
  //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
  dynamic;
  constructor(t, e, r, i) {
    zt(this, { name: t, type: e, localName: r, dynamic: i }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(t, e) {
    V(!1, t, this.localName, e);
  }
}
class hu {
  // An array of WordSize lengthed objects to concatenation
  #t;
  #e;
  constructor() {
    this.#t = [], this.#e = 0;
  }
  get data() {
    return oe(this.#t);
  }
  get length() {
    return this.#e;
  }
  #r(t) {
    return this.#t.push(t), this.#e += t.length, t.length;
  }
  appendWriter(t) {
    return this.#r(xe(t.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(t) {
    let e = xe(t);
    const r = e.length % Re;
    return r && (e = xe(oe([e, fu.slice(r)]))), this.#r(e);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(t) {
    return this.#r(S_(t));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const t = this.#t.length;
    return this.#t.push(fu), this.#e += Re, (e) => {
      this.#t[t] = S_(e);
    };
  }
}
class Mu {
  // Allows incomplete unpadded data to be read; otherwise an error
  // is raised if attempting to overrun the buffer. This is required
  // to deal with an old Solidity bug, in which event data for
  // external (not public thoguh) was tightly packed.
  allowLoose;
  #t;
  #e;
  #r;
  #n;
  #i;
  constructor(t, e, r) {
    zt(this, { allowLoose: !!e }), this.#t = xe(t), this.#r = 0, this.#n = null, this.#i = r ?? 1024, this.#e = 0;
  }
  get data() {
    return gt(this.#t);
  }
  get dataLength() {
    return this.#t.length;
  }
  get consumed() {
    return this.#e;
  }
  get bytes() {
    return new Uint8Array(this.#t);
  }
  #o(t) {
    if (this.#n)
      return this.#n.#o(t);
    this.#r += t, _t(this.#i < 1 || this.#r <= this.#i * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#i} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
      buffer: xe(this.#t),
      offset: this.#e,
      length: t,
      info: {
        bytesRead: this.#r,
        dataLength: this.dataLength
      }
    });
  }
  #s(t, e, r) {
    let i = Math.ceil(e / Re) * Re;
    return this.#e + i > this.#t.length && (this.allowLoose && r && this.#e + e <= this.#t.length ? i = e : _t(!1, "data out-of-bounds", "BUFFER_OVERRUN", {
      buffer: xe(this.#t),
      length: this.#t.length,
      offset: this.#e + i
    })), this.#t.slice(this.#e, this.#e + i);
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(t) {
    const e = new Mu(this.#t.slice(this.#e + t), this.allowLoose, this.#i);
    return e.#n = this, e;
  }
  // Read bytes
  readBytes(t, e) {
    let r = this.#s(0, t, !!e);
    return this.#o(t), this.#e += r.length, r.slice(0, t);
  }
  // Read a numeric values
  readValue() {
    return Uu(this.readBytes(Re));
  }
  readIndex() {
    return Xg(this.readBytes(Re));
  }
}
function Bo(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function ju(n, ...t) {
  if (!(n instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(n.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${n.length}`);
}
function g0(n) {
  if (typeof n != "function" || typeof n.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Bo(n.outputLen), Bo(n.blockLen);
}
function is(n, t = !0) {
  if (n.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && n.finished)
    throw new Error("Hash#digest() has already been called");
}
function mw(n, t) {
  ju(n);
  const e = t.outputLen;
  if (n.length < e)
    throw new Error(`digestInto() expects output buffer of length at least ${e}`);
}
const za = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Aw = (n) => n instanceof Uint8Array, y0 = (n) => new Uint32Array(n.buffer, n.byteOffset, Math.floor(n.byteLength / 4)), Ba = (n) => new DataView(n.buffer, n.byteOffset, n.byteLength), rr = (n, t) => n << 32 - t | n >>> t, b0 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!b0)
  throw new Error("Non little-endian hardware is not supported");
function m0(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function jo(n) {
  if (typeof n == "string" && (n = m0(n)), !Aw(n))
    throw new Error(`expected Uint8Array, got ${typeof n}`);
  return n;
}
function A0(...n) {
  const t = new Uint8Array(n.reduce((r, i) => r + i.length, 0));
  let e = 0;
  return n.forEach((r) => {
    if (!Aw(r))
      throw new Error("Uint8Array expected");
    t.set(r, e), e += r.length;
  }), t;
}
class Gu {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function Hu(n) {
  const t = (r) => n().update(jo(r)).digest(), e = n();
  return t.outputLen = e.outputLen, t.blockLen = e.blockLen, t.create = () => n(), t;
}
function E0(n = 32) {
  if (za && typeof za.getRandomValues == "function")
    return za.getRandomValues(new Uint8Array(n));
  throw new Error("crypto.getRandomValues must be defined");
}
class Ew extends Gu {
  constructor(t, e) {
    super(), this.finished = !1, this.destroyed = !1, g0(t);
    const r = jo(e);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const i = this.blockLen, o = new Uint8Array(i);
    o.set(r.length > i ? t.create().update(r).digest() : r);
    for (let a = 0; a < o.length; a++)
      o[a] ^= 54;
    this.iHash.update(o), this.oHash = t.create();
    for (let a = 0; a < o.length; a++)
      o[a] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(t) {
    return is(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    is(this), ju(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: e, iHash: r, finished: i, destroyed: o, blockLen: a, outputLen: u } = this;
    return t = t, t.finished = i, t.destroyed = o, t.blockLen = a, t.outputLen = u, t.oHash = e._cloneInto(t.oHash), t.iHash = r._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const vw = (n, t, e) => new Ew(n, t).update(e).digest();
vw.create = (n, t) => new Ew(n, t);
function v0(n, t, e, r) {
  if (typeof n.setBigUint64 == "function")
    return n.setBigUint64(t, e, r);
  const i = BigInt(32), o = BigInt(4294967295), a = Number(e >> i & o), u = Number(e & o), _ = r ? 4 : 0, l = r ? 0 : 4;
  n.setUint32(t + _, a, r), n.setUint32(t + l, u, r);
}
class xw extends Gu {
  constructor(t, e, r, i) {
    super(), this.blockLen = t, this.outputLen = e, this.padOffset = r, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = Ba(this.buffer);
  }
  update(t) {
    is(this);
    const { view: e, buffer: r, blockLen: i } = this;
    t = jo(t);
    const o = t.length;
    for (let a = 0; a < o; ) {
      const u = Math.min(i - this.pos, o - a);
      if (u === i) {
        const _ = Ba(t);
        for (; i <= o - a; a += i)
          this.process(_, a);
        continue;
      }
      r.set(t.subarray(a, a + u), this.pos), this.pos += u, a += u, this.pos === i && (this.process(e, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    is(this), mw(t, this), this.finished = !0;
    const { buffer: e, view: r, blockLen: i, isLE: o } = this;
    let { pos: a } = this;
    e[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > i - a && (this.process(r, 0), a = 0);
    for (let g = a; g < i; g++)
      e[g] = 0;
    v0(r, i - 8, BigInt(this.length * 8), o), this.process(r, 0);
    const u = Ba(t), _ = this.outputLen;
    if (_ % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l = _ / 4, f = this.get();
    if (l > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let g = 0; g < l; g++)
      u.setUint32(4 * g, f[g], o);
  }
  digest() {
    const { buffer: t, outputLen: e } = this;
    this.digestInto(t);
    const r = t.slice(0, e);
    return this.destroy(), r;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: e, buffer: r, length: i, finished: o, destroyed: a, pos: u } = this;
    return t.length = i, t.pos = u, t.finished = o, t.destroyed = a, i % e && t.buffer.set(r), t;
  }
}
const x0 = (n, t, e) => n & t ^ ~n & e, R0 = (n, t, e) => n & t ^ n & e ^ t & e, z0 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), ri = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), ni = /* @__PURE__ */ new Uint32Array(64);
class B0 extends xw {
  constructor() {
    super(64, 32, 8, !1), this.A = ri[0] | 0, this.B = ri[1] | 0, this.C = ri[2] | 0, this.D = ri[3] | 0, this.E = ri[4] | 0, this.F = ri[5] | 0, this.G = ri[6] | 0, this.H = ri[7] | 0;
  }
  get() {
    const { A: t, B: e, C: r, D: i, E: o, F: a, G: u, H: _ } = this;
    return [t, e, r, i, o, a, u, _];
  }
  // prettier-ignore
  set(t, e, r, i, o, a, u, _) {
    this.A = t | 0, this.B = e | 0, this.C = r | 0, this.D = i | 0, this.E = o | 0, this.F = a | 0, this.G = u | 0, this.H = _ | 0;
  }
  process(t, e) {
    for (let g = 0; g < 16; g++, e += 4)
      ni[g] = t.getUint32(e, !1);
    for (let g = 16; g < 64; g++) {
      const y = ni[g - 15], B = ni[g - 2], I = rr(y, 7) ^ rr(y, 18) ^ y >>> 3, S = rr(B, 17) ^ rr(B, 19) ^ B >>> 10;
      ni[g] = S + ni[g - 7] + I + ni[g - 16] | 0;
    }
    let { A: r, B: i, C: o, D: a, E: u, F: _, G: l, H: f } = this;
    for (let g = 0; g < 64; g++) {
      const y = rr(u, 6) ^ rr(u, 11) ^ rr(u, 25), B = f + y + x0(u, _, l) + z0[g] + ni[g] | 0, S = (rr(r, 2) ^ rr(r, 13) ^ rr(r, 22)) + R0(r, i, o) | 0;
      f = l, l = _, _ = u, u = a + B | 0, a = o, o = i, i = r, r = B + S | 0;
    }
    r = r + this.A | 0, i = i + this.B | 0, o = o + this.C | 0, a = a + this.D | 0, u = u + this.E | 0, _ = _ + this.F | 0, l = l + this.G | 0, f = f + this.H | 0, this.set(r, i, o, a, u, _, l, f);
  }
  roundClean() {
    ni.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const Rw = /* @__PURE__ */ Hu(() => new B0()), oo = /* @__PURE__ */ BigInt(2 ** 32 - 1), pu = /* @__PURE__ */ BigInt(32);
function zw(n, t = !1) {
  return t ? { h: Number(n & oo), l: Number(n >> pu & oo) } : { h: Number(n >> pu & oo) | 0, l: Number(n & oo) | 0 };
}
function Bw(n, t = !1) {
  let e = new Uint32Array(n.length), r = new Uint32Array(n.length);
  for (let i = 0; i < n.length; i++) {
    const { h: o, l: a } = zw(n[i], t);
    [e[i], r[i]] = [o, a];
  }
  return [e, r];
}
const S0 = (n, t) => BigInt(n >>> 0) << pu | BigInt(t >>> 0), P0 = (n, t, e) => n >>> e, k0 = (n, t, e) => n << 32 - e | t >>> e, F0 = (n, t, e) => n >>> e | t << 32 - e, I0 = (n, t, e) => n << 32 - e | t >>> e, O0 = (n, t, e) => n << 64 - e | t >>> e - 32, T0 = (n, t, e) => n >>> e - 32 | t << 64 - e, C0 = (n, t) => t, N0 = (n, t) => n, Sw = (n, t, e) => n << e | t >>> 32 - e, Pw = (n, t, e) => t << e | n >>> 32 - e, kw = (n, t, e) => t << e - 32 | n >>> 64 - e, Fw = (n, t, e) => n << e - 32 | t >>> 64 - e;
function L0(n, t, e, r) {
  const i = (t >>> 0) + (r >>> 0);
  return { h: n + e + (i / 2 ** 32 | 0) | 0, l: i | 0 };
}
const D0 = (n, t, e) => (n >>> 0) + (t >>> 0) + (e >>> 0), U0 = (n, t, e, r) => t + e + r + (n / 2 ** 32 | 0) | 0, M0 = (n, t, e, r) => (n >>> 0) + (t >>> 0) + (e >>> 0) + (r >>> 0), j0 = (n, t, e, r, i) => t + e + r + i + (n / 2 ** 32 | 0) | 0, G0 = (n, t, e, r, i) => (n >>> 0) + (t >>> 0) + (e >>> 0) + (r >>> 0) + (i >>> 0), H0 = (n, t, e, r, i, o) => t + e + r + i + o + (n / 2 ** 32 | 0) | 0, It = {
  fromBig: zw,
  split: Bw,
  toBig: S0,
  shrSH: P0,
  shrSL: k0,
  rotrSH: F0,
  rotrSL: I0,
  rotrBH: O0,
  rotrBL: T0,
  rotr32H: C0,
  rotr32L: N0,
  rotlSH: Sw,
  rotlSL: Pw,
  rotlBH: kw,
  rotlBL: Fw,
  add: L0,
  add3L: D0,
  add3H: U0,
  add4L: M0,
  add4H: j0,
  add5H: H0,
  add5L: G0
}, [V0, q0] = It.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n) => BigInt(n))), ii = /* @__PURE__ */ new Uint32Array(80), si = /* @__PURE__ */ new Uint32Array(80);
class Q0 extends xw {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: e, Bh: r, Bl: i, Ch: o, Cl: a, Dh: u, Dl: _, Eh: l, El: f, Fh: g, Fl: y, Gh: B, Gl: I, Hh: S, Hl: T } = this;
    return [t, e, r, i, o, a, u, _, l, f, g, y, B, I, S, T];
  }
  // prettier-ignore
  set(t, e, r, i, o, a, u, _, l, f, g, y, B, I, S, T) {
    this.Ah = t | 0, this.Al = e | 0, this.Bh = r | 0, this.Bl = i | 0, this.Ch = o | 0, this.Cl = a | 0, this.Dh = u | 0, this.Dl = _ | 0, this.Eh = l | 0, this.El = f | 0, this.Fh = g | 0, this.Fl = y | 0, this.Gh = B | 0, this.Gl = I | 0, this.Hh = S | 0, this.Hl = T | 0;
  }
  process(t, e) {
    for (let P = 0; P < 16; P++, e += 4)
      ii[P] = t.getUint32(e), si[P] = t.getUint32(e += 4);
    for (let P = 16; P < 80; P++) {
      const z = ii[P - 15] | 0, k = si[P - 15] | 0, C = It.rotrSH(z, k, 1) ^ It.rotrSH(z, k, 8) ^ It.shrSH(z, k, 7), N = It.rotrSL(z, k, 1) ^ It.rotrSL(z, k, 8) ^ It.shrSL(z, k, 7), D = ii[P - 2] | 0, Y = si[P - 2] | 0, Z = It.rotrSH(D, Y, 19) ^ It.rotrBH(D, Y, 61) ^ It.shrSH(D, Y, 6), ft = It.rotrSL(D, Y, 19) ^ It.rotrBL(D, Y, 61) ^ It.shrSL(D, Y, 6), L = It.add4L(N, ft, si[P - 7], si[P - 16]), At = It.add4H(L, C, Z, ii[P - 7], ii[P - 16]);
      ii[P] = At | 0, si[P] = L | 0;
    }
    let { Ah: r, Al: i, Bh: o, Bl: a, Ch: u, Cl: _, Dh: l, Dl: f, Eh: g, El: y, Fh: B, Fl: I, Gh: S, Gl: T, Hh: A, Hl: R } = this;
    for (let P = 0; P < 80; P++) {
      const z = It.rotrSH(g, y, 14) ^ It.rotrSH(g, y, 18) ^ It.rotrBH(g, y, 41), k = It.rotrSL(g, y, 14) ^ It.rotrSL(g, y, 18) ^ It.rotrBL(g, y, 41), C = g & B ^ ~g & S, N = y & I ^ ~y & T, D = It.add5L(R, k, N, q0[P], si[P]), Y = It.add5H(D, A, z, C, V0[P], ii[P]), Z = D | 0, ft = It.rotrSH(r, i, 28) ^ It.rotrBH(r, i, 34) ^ It.rotrBH(r, i, 39), L = It.rotrSL(r, i, 28) ^ It.rotrBL(r, i, 34) ^ It.rotrBL(r, i, 39), At = r & o ^ r & u ^ o & u, Rt = i & a ^ i & _ ^ a & _;
      A = S | 0, R = T | 0, S = B | 0, T = I | 0, B = g | 0, I = y | 0, { h: g, l: y } = It.add(l | 0, f | 0, Y | 0, Z | 0), l = u | 0, f = _ | 0, u = o | 0, _ = a | 0, o = r | 0, a = i | 0;
      const at = It.add3L(Z, L, Rt);
      r = It.add3H(at, Y, ft, At), i = at | 0;
    }
    ({ h: r, l: i } = It.add(this.Ah | 0, this.Al | 0, r | 0, i | 0)), { h: o, l: a } = It.add(this.Bh | 0, this.Bl | 0, o | 0, a | 0), { h: u, l: _ } = It.add(this.Ch | 0, this.Cl | 0, u | 0, _ | 0), { h: l, l: f } = It.add(this.Dh | 0, this.Dl | 0, l | 0, f | 0), { h: g, l: y } = It.add(this.Eh | 0, this.El | 0, g | 0, y | 0), { h: B, l: I } = It.add(this.Fh | 0, this.Fl | 0, B | 0, I | 0), { h: S, l: T } = It.add(this.Gh | 0, this.Gl | 0, S | 0, T | 0), { h: A, l: R } = It.add(this.Hh | 0, this.Hl | 0, A | 0, R | 0), this.set(r, i, o, a, u, _, l, f, g, y, B, I, S, T, A, R);
  }
  roundClean() {
    ii.fill(0), si.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
const K0 = /* @__PURE__ */ Hu(() => new Q0());
function W0() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof ns < "u")
    return ns;
  throw new Error("unable to locate global object");
}
const P_ = W0();
P_.crypto || P_.msCrypto;
function J0(n) {
  switch (n) {
    case "sha256":
      return Rw.create();
    case "sha512":
      return K0.create();
  }
  V(!1, "invalid hashing algorithm name", "algorithm", n);
}
const [Iw, Ow, Tw] = [[], [], []], $0 = /* @__PURE__ */ BigInt(0), vs = /* @__PURE__ */ BigInt(1), Y0 = /* @__PURE__ */ BigInt(2), Z0 = /* @__PURE__ */ BigInt(7), X0 = /* @__PURE__ */ BigInt(256), ty = /* @__PURE__ */ BigInt(113);
for (let n = 0, t = vs, e = 1, r = 0; n < 24; n++) {
  [e, r] = [r, (2 * e + 3 * r) % 5], Iw.push(2 * (5 * r + e)), Ow.push((n + 1) * (n + 2) / 2 % 64);
  let i = $0;
  for (let o = 0; o < 7; o++)
    t = (t << vs ^ (t >> Z0) * ty) % X0, t & Y0 && (i ^= vs << (vs << /* @__PURE__ */ BigInt(o)) - vs);
  Tw.push(i);
}
const [ey, ry] = /* @__PURE__ */ Bw(Tw, !0), k_ = (n, t, e) => e > 32 ? kw(n, t, e) : Sw(n, t, e), F_ = (n, t, e) => e > 32 ? Fw(n, t, e) : Pw(n, t, e);
function ny(n, t = 24) {
  const e = new Uint32Array(10);
  for (let r = 24 - t; r < 24; r++) {
    for (let a = 0; a < 10; a++)
      e[a] = n[a] ^ n[a + 10] ^ n[a + 20] ^ n[a + 30] ^ n[a + 40];
    for (let a = 0; a < 10; a += 2) {
      const u = (a + 8) % 10, _ = (a + 2) % 10, l = e[_], f = e[_ + 1], g = k_(l, f, 1) ^ e[u], y = F_(l, f, 1) ^ e[u + 1];
      for (let B = 0; B < 50; B += 10)
        n[a + B] ^= g, n[a + B + 1] ^= y;
    }
    let i = n[2], o = n[3];
    for (let a = 0; a < 24; a++) {
      const u = Ow[a], _ = k_(i, o, u), l = F_(i, o, u), f = Iw[a];
      i = n[f], o = n[f + 1], n[f] = _, n[f + 1] = l;
    }
    for (let a = 0; a < 50; a += 10) {
      for (let u = 0; u < 10; u++)
        e[u] = n[a + u];
      for (let u = 0; u < 10; u++)
        n[a + u] ^= ~e[(u + 2) % 10] & e[(u + 4) % 10];
    }
    n[0] ^= ey[r], n[1] ^= ry[r];
  }
  e.fill(0);
}
class Vu extends Gu {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(t, e, r, i = !1, o = 24) {
    if (super(), this.blockLen = t, this.suffix = e, this.outputLen = r, this.enableXOF = i, this.rounds = o, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, Bo(r), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = y0(this.state);
  }
  keccak() {
    ny(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
  }
  update(t) {
    is(this);
    const { blockLen: e, state: r } = this;
    t = jo(t);
    const i = t.length;
    for (let o = 0; o < i; ) {
      const a = Math.min(e - this.pos, i - o);
      for (let u = 0; u < a; u++)
        r[this.pos++] ^= t[o++];
      this.pos === e && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: t, suffix: e, pos: r, blockLen: i } = this;
    t[r] ^= e, (e & 128) !== 0 && r === i - 1 && this.keccak(), t[i - 1] ^= 128, this.keccak();
  }
  writeInto(t) {
    is(this, !1), ju(t), this.finish();
    const e = this.state, { blockLen: r } = this;
    for (let i = 0, o = t.length; i < o; ) {
      this.posOut >= r && this.keccak();
      const a = Math.min(r - this.posOut, o - i);
      t.set(e.subarray(this.posOut, this.posOut + a), i), this.posOut += a, i += a;
    }
    return t;
  }
  xofInto(t) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(t);
  }
  xof(t) {
    return Bo(t), this.xofInto(new Uint8Array(t));
  }
  digestInto(t) {
    if (mw(t, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(t), this.destroy(), t;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(t) {
    const { blockLen: e, suffix: r, outputLen: i, rounds: o, enableXOF: a } = this;
    return t || (t = new Vu(e, r, i, a, o)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = o, t.suffix = r, t.outputLen = i, t.enableXOF = a, t.destroyed = this.destroyed, t;
  }
}
const iy = (n, t, e) => Hu(() => new Vu(t, n, e)), sy = /* @__PURE__ */ iy(1, 136, 256 / 8);
let Cw = !1;
const Nw = function(n) {
  return sy(n);
};
let Lw = Nw;
function le(n) {
  const t = Ot(n, "data");
  return gt(Lw(t));
}
le._ = Nw;
le.lock = function() {
  Cw = !0;
};
le.register = function(n) {
  if (Cw)
    throw new TypeError("keccak256 is locked");
  Lw = n;
};
Object.freeze(le);
const Dw = function(n) {
  return J0("sha256").update(n).digest();
};
let Uw = Dw, Mw = !1;
function ws(n) {
  const t = Ot(n, "data");
  return gt(Uw(t));
}
ws._ = Dw;
ws.lock = function() {
  Mw = !0;
};
ws.register = function(n) {
  if (Mw)
    throw new Error("sha256 is locked");
  Uw = n;
};
Object.freeze(ws);
Object.freeze(ws);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const jw = BigInt(0), Go = BigInt(1), oy = BigInt(2), Ho = (n) => n instanceof Uint8Array, ay = /* @__PURE__ */ Array.from({ length: 256 }, (n, t) => t.toString(16).padStart(2, "0"));
function ss(n) {
  if (!Ho(n))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let e = 0; e < n.length; e++)
    t += ay[n[e]];
  return t;
}
function Gw(n) {
  const t = n.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function qu(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  return BigInt(n === "" ? "0" : `0x${n}`);
}
function os(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  const t = n.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const e = new Uint8Array(t / 2);
  for (let r = 0; r < e.length; r++) {
    const i = r * 2, o = n.slice(i, i + 2), a = Number.parseInt(o, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    e[r] = a;
  }
  return e;
}
function Pi(n) {
  return qu(ss(n));
}
function Qu(n) {
  if (!Ho(n))
    throw new Error("Uint8Array expected");
  return qu(ss(Uint8Array.from(n).reverse()));
}
function as(n, t) {
  return os(n.toString(16).padStart(t * 2, "0"));
}
function Ku(n, t) {
  return as(n, t).reverse();
}
function cy(n) {
  return os(Gw(n));
}
function qe(n, t, e) {
  let r;
  if (typeof t == "string")
    try {
      r = os(t);
    } catch (o) {
      throw new Error(`${n} must be valid hex string, got "${t}". Cause: ${o}`);
    }
  else if (Ho(t))
    r = Uint8Array.from(t);
  else
    throw new Error(`${n} must be hex string or Uint8Array`);
  const i = r.length;
  if (typeof e == "number" && i !== e)
    throw new Error(`${n} expected ${e} bytes, got ${i}`);
  return r;
}
function Ns(...n) {
  const t = new Uint8Array(n.reduce((r, i) => r + i.length, 0));
  let e = 0;
  return n.forEach((r) => {
    if (!Ho(r))
      throw new Error("Uint8Array expected");
    t.set(r, e), e += r.length;
  }), t;
}
function uy(n, t) {
  if (n.length !== t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] !== t[e])
      return !1;
  return !0;
}
function _y(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function fy(n) {
  let t;
  for (t = 0; n > jw; n >>= Go, t += 1)
    ;
  return t;
}
function ly(n, t) {
  return n >> BigInt(t) & Go;
}
const hy = (n, t, e) => n | (e ? Go : jw) << BigInt(t), Wu = (n) => (oy << BigInt(n - 1)) - Go, Sa = (n) => new Uint8Array(n), I_ = (n) => Uint8Array.from(n);
function Hw(n, t, e) {
  if (typeof n != "number" || n < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof e != "function")
    throw new Error("hmacFn must be a function");
  let r = Sa(n), i = Sa(n), o = 0;
  const a = () => {
    r.fill(1), i.fill(0), o = 0;
  }, u = (...g) => e(i, r, ...g), _ = (g = Sa()) => {
    i = u(I_([0]), g), r = u(), g.length !== 0 && (i = u(I_([1]), g), r = u());
  }, l = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let g = 0;
    const y = [];
    for (; g < t; ) {
      r = u();
      const B = r.slice();
      y.push(B), g += r.length;
    }
    return Ns(...y);
  };
  return (g, y) => {
    a(), _(g);
    let B;
    for (; !(B = y(l())); )
      _();
    return a(), B;
  };
}
const py = {
  bigint: (n) => typeof n == "bigint",
  function: (n) => typeof n == "function",
  boolean: (n) => typeof n == "boolean",
  string: (n) => typeof n == "string",
  stringOrUint8Array: (n) => typeof n == "string" || n instanceof Uint8Array,
  isSafeInteger: (n) => Number.isSafeInteger(n),
  array: (n) => Array.isArray(n),
  field: (n, t) => t.Fp.isValid(n),
  hash: (n) => typeof n == "function" && Number.isSafeInteger(n.outputLen)
};
function Ws(n, t, e = {}) {
  const r = (i, o, a) => {
    const u = py[o];
    if (typeof u != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const _ = n[i];
    if (!(a && _ === void 0) && !u(_, n))
      throw new Error(`Invalid param ${String(i)}=${_} (${typeof _}), expected ${o}`);
  };
  for (const [i, o] of Object.entries(t))
    r(i, o, !1);
  for (const [i, o] of Object.entries(e))
    r(i, o, !0);
  return n;
}
const wy = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: ly,
  bitLen: fy,
  bitMask: Wu,
  bitSet: hy,
  bytesToHex: ss,
  bytesToNumberBE: Pi,
  bytesToNumberLE: Qu,
  concatBytes: Ns,
  createHmacDrbg: Hw,
  ensureBytes: qe,
  equalBytes: uy,
  hexToBytes: os,
  hexToNumber: qu,
  numberToBytesBE: as,
  numberToBytesLE: Ku,
  numberToHexUnpadded: Gw,
  numberToVarBytesBE: cy,
  utf8ToBytes: _y,
  validateObject: Ws
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const be = BigInt(0), ue = BigInt(1), Ai = BigInt(2), dy = BigInt(3), wu = BigInt(4), O_ = BigInt(5), T_ = BigInt(8);
BigInt(9);
BigInt(16);
function Fe(n, t) {
  const e = n % t;
  return e >= be ? e : t + e;
}
function gy(n, t, e) {
  if (e <= be || t < be)
    throw new Error("Expected power/modulo > 0");
  if (e === ue)
    return be;
  let r = ue;
  for (; t > be; )
    t & ue && (r = r * n % e), n = n * n % e, t >>= ue;
  return r;
}
function De(n, t, e) {
  let r = n;
  for (; t-- > be; )
    r *= r, r %= e;
  return r;
}
function du(n, t) {
  if (n === be || t <= be)
    throw new Error(`invert: expected positive integers, got n=${n} mod=${t}`);
  let e = Fe(n, t), r = t, i = be, o = ue;
  for (; e !== be; ) {
    const u = r / e, _ = r % e, l = i - o * u;
    r = e, e = _, i = o, o = l;
  }
  if (r !== ue)
    throw new Error("invert: does not exist");
  return Fe(i, t);
}
function yy(n) {
  const t = (n - ue) / Ai;
  let e, r, i;
  for (e = n - ue, r = 0; e % Ai === be; e /= Ai, r++)
    ;
  for (i = Ai; i < n && gy(i, t, n) !== n - ue; i++)
    ;
  if (r === 1) {
    const a = (n + ue) / wu;
    return function(_, l) {
      const f = _.pow(l, a);
      if (!_.eql(_.sqr(f), l))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const o = (e + ue) / Ai;
  return function(u, _) {
    if (u.pow(_, t) === u.neg(u.ONE))
      throw new Error("Cannot find square root");
    let l = r, f = u.pow(u.mul(u.ONE, i), e), g = u.pow(_, o), y = u.pow(_, e);
    for (; !u.eql(y, u.ONE); ) {
      if (u.eql(y, u.ZERO))
        return u.ZERO;
      let B = 1;
      for (let S = u.sqr(y); B < l && !u.eql(S, u.ONE); B++)
        S = u.sqr(S);
      const I = u.pow(f, ue << BigInt(l - B - 1));
      f = u.sqr(I), g = u.mul(g, I), y = u.mul(y, f), l = B;
    }
    return g;
  };
}
function by(n) {
  if (n % wu === dy) {
    const t = (n + ue) / wu;
    return function(r, i) {
      const o = r.pow(i, t);
      if (!r.eql(r.sqr(o), i))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (n % T_ === O_) {
    const t = (n - O_) / T_;
    return function(r, i) {
      const o = r.mul(i, Ai), a = r.pow(o, t), u = r.mul(i, a), _ = r.mul(r.mul(u, Ai), a), l = r.mul(u, r.sub(_, r.ONE));
      if (!r.eql(r.sqr(l), i))
        throw new Error("Cannot find square root");
      return l;
    };
  }
  return yy(n);
}
const my = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function Ay(n) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, e = my.reduce((r, i) => (r[i] = "function", r), t);
  return Ws(n, e);
}
function Ey(n, t, e) {
  if (e < be)
    throw new Error("Expected power > 0");
  if (e === be)
    return n.ONE;
  if (e === ue)
    return t;
  let r = n.ONE, i = t;
  for (; e > be; )
    e & ue && (r = n.mul(r, i)), i = n.sqr(i), e >>= ue;
  return r;
}
function vy(n, t) {
  const e = new Array(t.length), r = t.reduce((o, a, u) => n.is0(a) ? o : (e[u] = o, n.mul(o, a)), n.ONE), i = n.inv(r);
  return t.reduceRight((o, a, u) => n.is0(a) ? o : (e[u] = n.mul(o, e[u]), n.mul(o, a)), i), e;
}
function Vw(n, t) {
  const e = t !== void 0 ? t : n.toString(2).length, r = Math.ceil(e / 8);
  return { nBitLength: e, nByteLength: r };
}
function xy(n, t, e = !1, r = {}) {
  if (n <= be)
    throw new Error(`Expected Field ORDER > 0, got ${n}`);
  const { nBitLength: i, nByteLength: o } = Vw(n, t);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = by(n), u = Object.freeze({
    ORDER: n,
    BITS: i,
    BYTES: o,
    MASK: Wu(i),
    ZERO: be,
    ONE: ue,
    create: (_) => Fe(_, n),
    isValid: (_) => {
      if (typeof _ != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof _}`);
      return be <= _ && _ < n;
    },
    is0: (_) => _ === be,
    isOdd: (_) => (_ & ue) === ue,
    neg: (_) => Fe(-_, n),
    eql: (_, l) => _ === l,
    sqr: (_) => Fe(_ * _, n),
    add: (_, l) => Fe(_ + l, n),
    sub: (_, l) => Fe(_ - l, n),
    mul: (_, l) => Fe(_ * l, n),
    pow: (_, l) => Ey(u, _, l),
    div: (_, l) => Fe(_ * du(l, n), n),
    // Same as above, but doesn't normalize
    sqrN: (_) => _ * _,
    addN: (_, l) => _ + l,
    subN: (_, l) => _ - l,
    mulN: (_, l) => _ * l,
    inv: (_) => du(_, n),
    sqrt: r.sqrt || ((_) => a(u, _)),
    invertBatch: (_) => vy(u, _),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (_, l, f) => f ? l : _,
    toBytes: (_) => e ? Ku(_, o) : as(_, o),
    fromBytes: (_) => {
      if (_.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${_.length}`);
      return e ? Qu(_) : Pi(_);
    }
  });
  return Object.freeze(u);
}
function qw(n) {
  if (typeof n != "bigint")
    throw new Error("field order must be bigint");
  const t = n.toString(2).length;
  return Math.ceil(t / 8);
}
function Qw(n) {
  const t = qw(n);
  return t + Math.ceil(t / 2);
}
function Ry(n, t, e = !1) {
  const r = n.length, i = qw(t), o = Qw(t);
  if (r < 16 || r < o || r > 1024)
    throw new Error(`expected ${o}-1024 bytes of input, got ${r}`);
  const a = e ? Pi(n) : Qu(n), u = Fe(a, t - ue) + ue;
  return e ? Ku(u, i) : as(u, i);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const zy = BigInt(0), Pa = BigInt(1);
function By(n, t) {
  const e = (i, o) => {
    const a = o.negate();
    return i ? a : o;
  }, r = (i) => {
    const o = Math.ceil(t / i) + 1, a = 2 ** (i - 1);
    return { windows: o, windowSize: a };
  };
  return {
    constTimeNegate: e,
    // non-const time multiplication ladder
    unsafeLadder(i, o) {
      let a = n.ZERO, u = i;
      for (; o > zy; )
        o & Pa && (a = a.add(u)), u = u.double(), o >>= Pa;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(i, o) {
      const { windows: a, windowSize: u } = r(o), _ = [];
      let l = i, f = l;
      for (let g = 0; g < a; g++) {
        f = l, _.push(f);
        for (let y = 1; y < u; y++)
          f = f.add(l), _.push(f);
        l = f.double();
      }
      return _;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(i, o, a) {
      const { windows: u, windowSize: _ } = r(i);
      let l = n.ZERO, f = n.BASE;
      const g = BigInt(2 ** i - 1), y = 2 ** i, B = BigInt(i);
      for (let I = 0; I < u; I++) {
        const S = I * _;
        let T = Number(a & g);
        a >>= B, T > _ && (T -= y, a += Pa);
        const A = S, R = S + Math.abs(T) - 1, P = I % 2 !== 0, z = T < 0;
        T === 0 ? f = f.add(e(P, o[A])) : l = l.add(e(z, o[R]));
      }
      return { p: l, f };
    },
    wNAFCached(i, o, a, u) {
      const _ = i._WINDOW_SIZE || 1;
      let l = o.get(i);
      return l || (l = this.precomputeWindow(i, _), _ !== 1 && o.set(i, u(l))), this.wNAF(_, l, a);
    }
  };
}
function Kw(n) {
  return Ay(n.Fp), Ws(n, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...Vw(n.n, n.nBitLength),
    ...n,
    p: n.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Sy(n) {
  const t = Kw(n);
  Ws(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: e, Fp: r, a: i } = t;
  if (e) {
    if (!r.eql(i, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof e != "object" || typeof e.beta != "bigint" || typeof e.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: Py, hexToBytes: ky } = wy, xi = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(n) {
    const { Err: t } = xi;
    if (n.length < 2 || n[0] !== 2)
      throw new t("Invalid signature integer tag");
    const e = n[1], r = n.subarray(2, e + 2);
    if (!e || r.length !== e)
      throw new t("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new t("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new t("Invalid signature integer: unnecessary leading zero");
    return { d: Py(r), l: n.subarray(e + 2) };
  },
  toSig(n) {
    const { Err: t } = xi, e = typeof n == "string" ? ky(n) : n;
    if (!(e instanceof Uint8Array))
      throw new Error("ui8a expected");
    let r = e.length;
    if (r < 2 || e[0] != 48)
      throw new t("Invalid signature tag");
    if (e[1] !== r - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: i, l: o } = xi._parseInt(e.subarray(2)), { d: a, l: u } = xi._parseInt(o);
    if (u.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: i, s: a };
  },
  hexFromSig(n) {
    const t = (l) => Number.parseInt(l[0], 16) & 8 ? "00" + l : l, e = (l) => {
      const f = l.toString(16);
      return f.length & 1 ? `0${f}` : f;
    }, r = t(e(n.s)), i = t(e(n.r)), o = r.length / 2, a = i.length / 2, u = e(o), _ = e(a);
    return `30${e(a + o + 4)}02${_}${i}02${u}${r}`;
  }
}, Vn = BigInt(0), je = BigInt(1);
BigInt(2);
const C_ = BigInt(3);
BigInt(4);
function Fy(n) {
  const t = Sy(n), { Fp: e } = t, r = t.toBytes || ((I, S, T) => {
    const A = S.toAffine();
    return Ns(Uint8Array.from([4]), e.toBytes(A.x), e.toBytes(A.y));
  }), i = t.fromBytes || ((I) => {
    const S = I.subarray(1), T = e.fromBytes(S.subarray(0, e.BYTES)), A = e.fromBytes(S.subarray(e.BYTES, 2 * e.BYTES));
    return { x: T, y: A };
  });
  function o(I) {
    const { a: S, b: T } = t, A = e.sqr(I), R = e.mul(A, I);
    return e.add(e.add(R, e.mul(I, S)), T);
  }
  if (!e.eql(e.sqr(t.Gy), o(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(I) {
    return typeof I == "bigint" && Vn < I && I < t.n;
  }
  function u(I) {
    if (!a(I))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function _(I) {
    const { allowedPrivateKeyLengths: S, nByteLength: T, wrapPrivateKey: A, n: R } = t;
    if (S && typeof I != "bigint") {
      if (I instanceof Uint8Array && (I = ss(I)), typeof I != "string" || !S.includes(I.length))
        throw new Error("Invalid key");
      I = I.padStart(T * 2, "0");
    }
    let P;
    try {
      P = typeof I == "bigint" ? I : Pi(qe("private key", I, T));
    } catch {
      throw new Error(`private key must be ${T} bytes, hex or bigint, not ${typeof I}`);
    }
    return A && (P = Fe(P, R)), u(P), P;
  }
  const l = /* @__PURE__ */ new Map();
  function f(I) {
    if (!(I instanceof g))
      throw new Error("ProjectivePoint expected");
  }
  class g {
    constructor(S, T, A) {
      if (this.px = S, this.py = T, this.pz = A, S == null || !e.isValid(S))
        throw new Error("x required");
      if (T == null || !e.isValid(T))
        throw new Error("y required");
      if (A == null || !e.isValid(A))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(S) {
      const { x: T, y: A } = S || {};
      if (!S || !e.isValid(T) || !e.isValid(A))
        throw new Error("invalid affine point");
      if (S instanceof g)
        throw new Error("projective point not allowed");
      const R = (P) => e.eql(P, e.ZERO);
      return R(T) && R(A) ? g.ZERO : new g(T, A, e.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(S) {
      const T = e.invertBatch(S.map((A) => A.pz));
      return S.map((A, R) => A.toAffine(T[R])).map(g.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(S) {
      const T = g.fromAffine(i(qe("pointHex", S)));
      return T.assertValidity(), T;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(S) {
      return g.BASE.multiply(_(S));
    }
    // "Private method", don't use it directly
    _setWindowSize(S) {
      this._WINDOW_SIZE = S, l.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint && !e.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: S, y: T } = this.toAffine();
      if (!e.isValid(S) || !e.isValid(T))
        throw new Error("bad point: x or y not FE");
      const A = e.sqr(T), R = o(S);
      if (!e.eql(A, R))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: S } = this.toAffine();
      if (e.isOdd)
        return !e.isOdd(S);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(S) {
      f(S);
      const { px: T, py: A, pz: R } = this, { px: P, py: z, pz: k } = S, C = e.eql(e.mul(T, k), e.mul(P, R)), N = e.eql(e.mul(A, k), e.mul(z, R));
      return C && N;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new g(this.px, e.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: S, b: T } = t, A = e.mul(T, C_), { px: R, py: P, pz: z } = this;
      let k = e.ZERO, C = e.ZERO, N = e.ZERO, D = e.mul(R, R), Y = e.mul(P, P), Z = e.mul(z, z), ft = e.mul(R, P);
      return ft = e.add(ft, ft), N = e.mul(R, z), N = e.add(N, N), k = e.mul(S, N), C = e.mul(A, Z), C = e.add(k, C), k = e.sub(Y, C), C = e.add(Y, C), C = e.mul(k, C), k = e.mul(ft, k), N = e.mul(A, N), Z = e.mul(S, Z), ft = e.sub(D, Z), ft = e.mul(S, ft), ft = e.add(ft, N), N = e.add(D, D), D = e.add(N, D), D = e.add(D, Z), D = e.mul(D, ft), C = e.add(C, D), Z = e.mul(P, z), Z = e.add(Z, Z), D = e.mul(Z, ft), k = e.sub(k, D), N = e.mul(Z, Y), N = e.add(N, N), N = e.add(N, N), new g(k, C, N);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(S) {
      f(S);
      const { px: T, py: A, pz: R } = this, { px: P, py: z, pz: k } = S;
      let C = e.ZERO, N = e.ZERO, D = e.ZERO;
      const Y = t.a, Z = e.mul(t.b, C_);
      let ft = e.mul(T, P), L = e.mul(A, z), At = e.mul(R, k), Rt = e.add(T, A), at = e.add(P, z);
      Rt = e.mul(Rt, at), at = e.add(ft, L), Rt = e.sub(Rt, at), at = e.add(T, R);
      let wt = e.add(P, k);
      return at = e.mul(at, wt), wt = e.add(ft, At), at = e.sub(at, wt), wt = e.add(A, R), C = e.add(z, k), wt = e.mul(wt, C), C = e.add(L, At), wt = e.sub(wt, C), D = e.mul(Y, at), C = e.mul(Z, At), D = e.add(C, D), C = e.sub(L, D), D = e.add(L, D), N = e.mul(C, D), L = e.add(ft, ft), L = e.add(L, ft), At = e.mul(Y, At), at = e.mul(Z, at), L = e.add(L, At), At = e.sub(ft, At), At = e.mul(Y, At), at = e.add(at, At), ft = e.mul(L, at), N = e.add(N, ft), ft = e.mul(wt, at), C = e.mul(Rt, C), C = e.sub(C, ft), ft = e.mul(Rt, L), D = e.mul(wt, D), D = e.add(D, ft), new g(C, N, D);
    }
    subtract(S) {
      return this.add(S.negate());
    }
    is0() {
      return this.equals(g.ZERO);
    }
    wNAF(S) {
      return B.wNAFCached(this, l, S, (T) => {
        const A = e.invertBatch(T.map((R) => R.pz));
        return T.map((R, P) => R.toAffine(A[P])).map(g.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(S) {
      const T = g.ZERO;
      if (S === Vn)
        return T;
      if (u(S), S === je)
        return this;
      const { endo: A } = t;
      if (!A)
        return B.unsafeLadder(this, S);
      let { k1neg: R, k1: P, k2neg: z, k2: k } = A.splitScalar(S), C = T, N = T, D = this;
      for (; P > Vn || k > Vn; )
        P & je && (C = C.add(D)), k & je && (N = N.add(D)), D = D.double(), P >>= je, k >>= je;
      return R && (C = C.negate()), z && (N = N.negate()), N = new g(e.mul(N.px, A.beta), N.py, N.pz), C.add(N);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(S) {
      u(S);
      let T = S, A, R;
      const { endo: P } = t;
      if (P) {
        const { k1neg: z, k1: k, k2neg: C, k2: N } = P.splitScalar(T);
        let { p: D, f: Y } = this.wNAF(k), { p: Z, f: ft } = this.wNAF(N);
        D = B.constTimeNegate(z, D), Z = B.constTimeNegate(C, Z), Z = new g(e.mul(Z.px, P.beta), Z.py, Z.pz), A = D.add(Z), R = Y.add(ft);
      } else {
        const { p: z, f: k } = this.wNAF(T);
        A = z, R = k;
      }
      return g.normalizeZ([A, R])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(S, T, A) {
      const R = g.BASE, P = (k, C) => C === Vn || C === je || !k.equals(R) ? k.multiplyUnsafe(C) : k.multiply(C), z = P(this, T).add(P(S, A));
      return z.is0() ? void 0 : z;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(S) {
      const { px: T, py: A, pz: R } = this, P = this.is0();
      S == null && (S = P ? e.ONE : e.inv(R));
      const z = e.mul(T, S), k = e.mul(A, S), C = e.mul(R, S);
      if (P)
        return { x: e.ZERO, y: e.ZERO };
      if (!e.eql(C, e.ONE))
        throw new Error("invZ was invalid");
      return { x: z, y: k };
    }
    isTorsionFree() {
      const { h: S, isTorsionFree: T } = t;
      if (S === je)
        return !0;
      if (T)
        return T(g, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: S, clearCofactor: T } = t;
      return S === je ? this : T ? T(g, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(S = !0) {
      return this.assertValidity(), r(g, this, S);
    }
    toHex(S = !0) {
      return ss(this.toRawBytes(S));
    }
  }
  g.BASE = new g(t.Gx, t.Gy, e.ONE), g.ZERO = new g(e.ZERO, e.ONE, e.ZERO);
  const y = t.nBitLength, B = By(g, t.endo ? Math.ceil(y / 2) : y);
  return {
    CURVE: t,
    ProjectivePoint: g,
    normPrivateKeyToScalar: _,
    weierstrassEquation: o,
    isWithinCurveOrder: a
  };
}
function Iy(n) {
  const t = Kw(n);
  return Ws(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function Oy(n) {
  const t = Iy(n), { Fp: e, n: r } = t, i = e.BYTES + 1, o = 2 * e.BYTES + 1;
  function a(at) {
    return Vn < at && at < e.ORDER;
  }
  function u(at) {
    return Fe(at, r);
  }
  function _(at) {
    return du(at, r);
  }
  const { ProjectivePoint: l, normPrivateKeyToScalar: f, weierstrassEquation: g, isWithinCurveOrder: y } = Fy({
    ...t,
    toBytes(at, wt, Et) {
      const xt = wt.toAffine(), vt = e.toBytes(xt.x), Bt = Ns;
      return Et ? Bt(Uint8Array.from([wt.hasEvenY() ? 2 : 3]), vt) : Bt(Uint8Array.from([4]), vt, e.toBytes(xt.y));
    },
    fromBytes(at) {
      const wt = at.length, Et = at[0], xt = at.subarray(1);
      if (wt === i && (Et === 2 || Et === 3)) {
        const vt = Pi(xt);
        if (!a(vt))
          throw new Error("Point is not on curve");
        const Bt = g(vt);
        let jt = e.sqrt(Bt);
        const W = (jt & je) === je;
        return (Et & 1) === 1 !== W && (jt = e.neg(jt)), { x: vt, y: jt };
      } else if (wt === o && Et === 4) {
        const vt = e.fromBytes(xt.subarray(0, e.BYTES)), Bt = e.fromBytes(xt.subarray(e.BYTES, 2 * e.BYTES));
        return { x: vt, y: Bt };
      } else
        throw new Error(`Point of length ${wt} was invalid. Expected ${i} compressed bytes or ${o} uncompressed bytes`);
    }
  }), B = (at) => ss(as(at, t.nByteLength));
  function I(at) {
    const wt = r >> je;
    return at > wt;
  }
  function S(at) {
    return I(at) ? u(-at) : at;
  }
  const T = (at, wt, Et) => Pi(at.slice(wt, Et));
  class A {
    constructor(wt, Et, xt) {
      this.r = wt, this.s = Et, this.recovery = xt, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(wt) {
      const Et = t.nByteLength;
      return wt = qe("compactSignature", wt, Et * 2), new A(T(wt, 0, Et), T(wt, Et, 2 * Et));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(wt) {
      const { r: Et, s: xt } = xi.toSig(qe("DER", wt));
      return new A(Et, xt);
    }
    assertValidity() {
      if (!y(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!y(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(wt) {
      return new A(this.r, this.s, wt);
    }
    recoverPublicKey(wt) {
      const { r: Et, s: xt, recovery: vt } = this, Bt = N(qe("msgHash", wt));
      if (vt == null || ![0, 1, 2, 3].includes(vt))
        throw new Error("recovery id invalid");
      const jt = vt === 2 || vt === 3 ? Et + t.n : Et;
      if (jt >= e.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const W = (vt & 1) === 0 ? "02" : "03", X = l.fromHex(W + B(jt)), nt = _(jt), dt = u(-Bt * nt), G = u(xt * nt), M = l.BASE.multiplyAndAddUnsafe(X, dt, G);
      if (!M)
        throw new Error("point at infinify");
      return M.assertValidity(), M;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return I(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new A(this.r, u(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return os(this.toDERHex());
    }
    toDERHex() {
      return xi.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return os(this.toCompactHex());
    }
    toCompactHex() {
      return B(this.r) + B(this.s);
    }
  }
  const R = {
    isValidPrivateKey(at) {
      try {
        return f(at), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: f,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const at = Qw(t.n);
      return Ry(t.randomBytes(at), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(at = 8, wt = l.BASE) {
      return wt._setWindowSize(at), wt.multiply(BigInt(3)), wt;
    }
  };
  function P(at, wt = !0) {
    return l.fromPrivateKey(at).toRawBytes(wt);
  }
  function z(at) {
    const wt = at instanceof Uint8Array, Et = typeof at == "string", xt = (wt || Et) && at.length;
    return wt ? xt === i || xt === o : Et ? xt === 2 * i || xt === 2 * o : at instanceof l;
  }
  function k(at, wt, Et = !0) {
    if (z(at))
      throw new Error("first arg must be private key");
    if (!z(wt))
      throw new Error("second arg must be public key");
    return l.fromHex(wt).multiply(f(at)).toRawBytes(Et);
  }
  const C = t.bits2int || function(at) {
    const wt = Pi(at), Et = at.length * 8 - t.nBitLength;
    return Et > 0 ? wt >> BigInt(Et) : wt;
  }, N = t.bits2int_modN || function(at) {
    return u(C(at));
  }, D = Wu(t.nBitLength);
  function Y(at) {
    if (typeof at != "bigint")
      throw new Error("bigint expected");
    if (!(Vn <= at && at < D))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return as(at, t.nByteLength);
  }
  function Z(at, wt, Et = ft) {
    if (["recovered", "canonical"].some((ct) => ct in Et))
      throw new Error("sign() legacy options not supported");
    const { hash: xt, randomBytes: vt } = t;
    let { lowS: Bt, prehash: jt, extraEntropy: W } = Et;
    Bt == null && (Bt = !0), at = qe("msgHash", at), jt && (at = qe("prehashed msgHash", xt(at)));
    const X = N(at), nt = f(wt), dt = [Y(nt), Y(X)];
    if (W != null) {
      const ct = W === !0 ? vt(e.BYTES) : W;
      dt.push(qe("extraEntropy", ct));
    }
    const G = Ns(...dt), M = X;
    function tt(ct) {
      const ut = C(ct);
      if (!y(ut))
        return;
      const v = _(ut), x = l.BASE.multiply(ut).toAffine(), et = u(x.x);
      if (et === Vn)
        return;
      const lt = u(v * u(M + et * nt));
      if (lt === Vn)
        return;
      let St = (x.x === et ? 0 : 2) | Number(x.y & je), yt = lt;
      return Bt && I(lt) && (yt = S(lt), St ^= 1), new A(et, yt, St);
    }
    return { seed: G, k2sig: tt };
  }
  const ft = { lowS: t.lowS, prehash: !1 }, L = { lowS: t.lowS, prehash: !1 };
  function At(at, wt, Et = ft) {
    const { seed: xt, k2sig: vt } = Z(at, wt, Et), Bt = t;
    return Hw(Bt.hash.outputLen, Bt.nByteLength, Bt.hmac)(xt, vt);
  }
  l.BASE._setWindowSize(8);
  function Rt(at, wt, Et, xt = L) {
    const vt = at;
    if (wt = qe("msgHash", wt), Et = qe("publicKey", Et), "strict" in xt)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: Bt, prehash: jt } = xt;
    let W, X;
    try {
      if (typeof vt == "string" || vt instanceof Uint8Array)
        try {
          W = A.fromDER(vt);
        } catch (x) {
          if (!(x instanceof xi.Err))
            throw x;
          W = A.fromCompact(vt);
        }
      else if (typeof vt == "object" && typeof vt.r == "bigint" && typeof vt.s == "bigint") {
        const { r: x, s: et } = vt;
        W = new A(x, et);
      } else
        throw new Error("PARSE");
      X = l.fromHex(Et);
    } catch (x) {
      if (x.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (Bt && W.hasHighS())
      return !1;
    jt && (wt = t.hash(wt));
    const { r: nt, s: dt } = W, G = N(wt), M = _(dt), tt = u(G * M), ct = u(nt * M), ut = l.BASE.multiplyAndAddUnsafe(X, tt, ct)?.toAffine();
    return ut ? u(ut.x) === nt : !1;
  }
  return {
    CURVE: t,
    getPublicKey: P,
    getSharedSecret: k,
    sign: At,
    verify: Rt,
    ProjectivePoint: l,
    Signature: A,
    utils: R
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Ty(n) {
  return {
    hash: n,
    hmac: (t, ...e) => vw(n, t, A0(...e)),
    randomBytes: E0
  };
}
function Cy(n, t) {
  const e = (r) => Oy({ ...n, ...Ty(r) });
  return Object.freeze({ ...e(t), create: e });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ww = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), N_ = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Ny = BigInt(1), gu = BigInt(2), L_ = (n, t) => (n + t / gu) / t;
function Ly(n) {
  const t = Ww, e = BigInt(3), r = BigInt(6), i = BigInt(11), o = BigInt(22), a = BigInt(23), u = BigInt(44), _ = BigInt(88), l = n * n * n % t, f = l * l * n % t, g = De(f, e, t) * f % t, y = De(g, e, t) * f % t, B = De(y, gu, t) * l % t, I = De(B, i, t) * B % t, S = De(I, o, t) * I % t, T = De(S, u, t) * S % t, A = De(T, _, t) * T % t, R = De(A, u, t) * S % t, P = De(R, e, t) * f % t, z = De(P, a, t) * I % t, k = De(z, r, t) * l % t, C = De(k, gu, t);
  if (!yu.eql(yu.sqr(C), n))
    throw new Error("Cannot find square root");
  return C;
}
const yu = xy(Ww, void 0, void 0, { sqrt: Ly }), oi = Cy({
  a: BigInt(0),
  b: BigInt(7),
  Fp: yu,
  n: N_,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (n) => {
      const t = N_, e = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -Ny * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), i = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = e, a = BigInt("0x100000000000000000000000000000000"), u = L_(o * n, t), _ = L_(-r * n, t);
      let l = Fe(n - u * e - _ * i, t), f = Fe(-u * r - _ * o, t);
      const g = l > a, y = f > a;
      if (g && (l = t - l), y && (f = t - f), l > a || f > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + n);
      return { k1neg: g, k1: l, k2neg: y, k2: f };
    }
  }
}, Rw);
BigInt(0);
oi.ProjectivePoint;
const Ls = "0x0000000000000000000000000000000000000000", D_ = "0x0000000000000000000000000000000000000000000000000000000000000000", U_ = BigInt(0), M_ = BigInt(1), j_ = BigInt(2), G_ = BigInt(27), H_ = BigInt(28), ao = BigInt(35), Gi = {};
function V_(n) {
  return Yn(ge(n), 32);
}
class ie {
  #t;
  #e;
  #r;
  #n;
  /**
   *  The ``r`` value for a signature.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return this.#t;
  }
  set r(t) {
    V(Ji(t) === 32, "invalid r", "value", t), this.#t = gt(t);
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return V(parseInt(this.#e.substring(0, 3)) < 8, "non-canonical s; use ._s", "s", this.#e), this.#e;
  }
  set s(t) {
    V(Ji(t) === 32, "invalid s", "value", t), this.#e = gt(t);
  }
  /**
   *  Return the s value, unchecked for EIP-2 compliance.
   *
   *  This should generally not be used and is for situations where
   *  a non-canonical S value might be relevant, such as Frontier blocks
   *  that were mined prior to EIP-2 or invalid Authorization List
   *  signatures.
   */
  get _s() {
    return this.#e;
  }
  /**
   *  Returns true if the Signature is valid for [[link-eip-2]] signatures.
   */
  isValid() {
    return parseInt(this.#e.substring(0, 3)) < 8;
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return this.#r;
  }
  set v(t) {
    const e = Tt(t, "value");
    V(e === 27 || e === 28, "invalid v", "v", t), this.#r = e;
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return this.#n;
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const t = this.networkV;
    return t == null ? null : ie.getChainId(t);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const t = Ot(this.s);
    return this.yParity && (t[0] |= 128), gt(t);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return oe([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return oe([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  /**
   *  @private
   */
  constructor(t, e, r, i) {
    Do(t, Gi, "Signature"), this.#t = e, this.#e = r, this.#r = i, this.#n = null;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this._s}"${this.isValid() ? "" : ', valid: "false"'}, yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const t = new ie(Gi, this.r, this._s, this.v);
    return this.networkV && (t.#n = this.networkV), t;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const t = this.networkV;
    return {
      _type: "signature",
      networkV: t != null ? t.toString() : null,
      r: this.r,
      s: this._s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(t) {
    const e = mt(t, "v");
    return e == G_ || e == H_ ? U_ : (V(e >= ao, "invalid EIP-155 v", "v", t), (e - ao) / j_);
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(t, e) {
    return mt(t) * j_ + BigInt(35 + e - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(t) {
    const e = mt(t);
    return e === U_ || e === G_ ? 27 : e === M_ || e === H_ ? 28 : (V(e >= ao, "invalid v", "v", t), e & M_ ? 27 : 28);
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(t) {
    function e(l, f) {
      V(l, f, "signature", t);
    }
    if (t == null)
      return new ie(Gi, D_, D_, 27);
    if (typeof t == "string") {
      const l = Ot(t, "signature");
      if (l.length === 64) {
        const f = gt(l.slice(0, 32)), g = l.slice(32, 64), y = g[0] & 128 ? 28 : 27;
        return g[0] &= 127, new ie(Gi, f, gt(g), y);
      }
      if (l.length === 65) {
        const f = gt(l.slice(0, 32)), g = gt(l.slice(32, 64)), y = ie.getNormalizedV(l[64]);
        return new ie(Gi, f, g, y);
      }
      e(!1, "invalid raw signature length");
    }
    if (t instanceof ie)
      return t.clone();
    const r = t.r;
    e(r != null, "missing r");
    const i = V_(r), o = function(l, f) {
      if (l != null)
        return V_(l);
      if (f != null) {
        e(Xt(f, 32), "invalid yParityAndS");
        const g = Ot(f);
        return g[0] &= 127, gt(g);
      }
      e(!1, "missing s");
    }(t.s, t.yParityAndS), { networkV: a, v: u } = function(l, f, g) {
      if (l != null) {
        const y = mt(l);
        return {
          networkV: y >= ao ? y : void 0,
          v: ie.getNormalizedV(y)
        };
      }
      if (f != null)
        return e(Xt(f, 32), "invalid yParityAndS"), { v: Ot(f)[0] & 128 ? 28 : 27 };
      if (g != null) {
        switch (Tt(g, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        e(!1, "invalid yParity");
      }
      e(!1, "missing v");
    }(t.v, t.yParityAndS, t.yParity), _ = new ie(Gi, i, o, u);
    return a && (_.#n = a), e(t.yParity == null || Tt(t.yParity, "sig.yParity") === _.yParity, "yParity mismatch"), e(t.yParityAndS == null || t.yParityAndS === _.yParityAndS, "yParityAndS mismatch"), _;
  }
}
class qn {
  #t;
  /**
   *  Creates a new **SigningKey** for %%privateKey%%.
   */
  constructor(t) {
    V(Ji(t) === 32, "invalid private key", "privateKey", "[REDACTED]"), this.#t = gt(t);
  }
  /**
   *  The private key.
   */
  get privateKey() {
    return this.#t;
  }
  /**
   *  The uncompressed public key.
   *
   * This will always begin with the prefix ``0x04`` and be 132
   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
   */
  get publicKey() {
    return qn.computePublicKey(this.#t);
  }
  /**
   *  The compressed public key.
   *
   *  This will always begin with either the prefix ``0x02`` or ``0x03``
   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
   *  nibbles)
   */
  get compressedPublicKey() {
    return qn.computePublicKey(this.#t, !0);
  }
  /**
   *  Return the signature of the signed %%digest%%.
   */
  sign(t) {
    V(Ji(t) === 32, "invalid digest length", "digest", t);
    const e = oi.sign(xe(t), xe(this.#t), {
      lowS: !0
    });
    return ie.from({
      r: _i(e.r, 32),
      s: _i(e.s, 32),
      v: e.recovery ? 28 : 27
    });
  }
  /**
   *  Returns the [[link-wiki-ecdh]] shared secret between this
   *  private key and the %%other%% key.
   *
   *  The %%other%% key may be any type of key, a raw public key,
   *  a compressed/uncompressed pubic key or aprivate key.
   *
   *  Best practice is usually to use a cryptographic hash on the
   *  returned value before using it as a symetric secret.
   *
   *  @example:
   *    sign1 = new SigningKey(id("some-secret-1"))
   *    sign2 = new SigningKey(id("some-secret-2"))
   *
   *    // Notice that privA.computeSharedSecret(pubB)...
   *    sign1.computeSharedSecret(sign2.publicKey)
   *    //_result:
   *
   *    // ...is equal to privB.computeSharedSecret(pubA).
   *    sign2.computeSharedSecret(sign1.publicKey)
   *    //_result:
   */
  computeSharedSecret(t) {
    const e = qn.computePublicKey(t);
    return gt(oi.getSharedSecret(xe(this.#t), Ot(e), !1));
  }
  /**
   *  Compute the public key for %%key%%, optionally %%compressed%%.
   *
   *  The %%key%% may be any type of key, a raw public key, a
   *  compressed/uncompressed public key or private key.
   *
   *  @example:
   *    sign = new SigningKey(id("some-secret"));
   *
   *    // Compute the uncompressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey)
   *    //_result:
   *
   *    // Compute the compressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey, true)
   *    //_result:
   *
   *    // Compute the uncompressed public key
   *    SigningKey.computePublicKey(sign.publicKey, false);
   *    //_result:
   *
   *    // Compute the Compressed a public key
   *    SigningKey.computePublicKey(sign.publicKey, true);
   *    //_result:
   */
  static computePublicKey(t, e) {
    let r = Ot(t, "key");
    if (r.length === 32) {
      const o = oi.getPublicKey(r, !!e);
      return gt(o);
    }
    if (r.length === 64) {
      const o = new Uint8Array(65);
      o[0] = 4, o.set(r, 1), r = o;
    }
    const i = oi.ProjectivePoint.fromHex(r);
    return gt(i.toRawBytes(e));
  }
  /**
   *  Returns the public key for the private key which produced the
   *  %%signature%% for the given %%digest%%.
   *
   *  @example:
   *    key = new SigningKey(id("some-secret"))
   *    digest = id("hello world")
   *    sig = key.sign(digest)
   *
   *    // Notice the signer public key...
   *    key.publicKey
   *    //_result:
   *
   *    // ...is equal to the recovered public key
   *    SigningKey.recoverPublicKey(digest, sig)
   *    //_result:
   *
   */
  static recoverPublicKey(t, e) {
    V(Ji(t) === 32, "invalid digest length", "digest", t);
    const r = ie.from(e);
    let i = oi.Signature.fromCompact(xe(oe([r.r, r.s])));
    i = i.addRecoveryBit(r.yParity);
    const o = i.recoverPublicKey(xe(t));
    return V(o != null, "invalid signature for digest", "signature", e), "0x" + o.toHex(!1);
  }
  /**
   *  Returns the point resulting from adding the ellipic curve points
   *  %%p0%% and %%p1%%.
   *
   *  This is not a common function most developers should require, but
   *  can be useful for certain privacy-specific techniques.
   *
   *  For example, it is used by [[HDNodeWallet]] to compute child
   *  addresses from parent public keys and chain codes.
   */
  static addPoints(t, e, r) {
    const i = oi.ProjectivePoint.fromHex(qn.computePublicKey(t).substring(2)), o = oi.ProjectivePoint.fromHex(qn.computePublicKey(e).substring(2));
    return "0x" + i.add(o).toHex(!!r);
  }
}
const Dy = BigInt(0), Uy = BigInt(36);
function q_(n) {
  n = n.toLowerCase();
  const t = n.substring(2).split(""), e = new Uint8Array(40);
  for (let i = 0; i < 40; i++)
    e[i] = t[i].charCodeAt(0);
  const r = Ot(le(e));
  for (let i = 0; i < 40; i += 2)
    r[i >> 1] >> 4 >= 8 && (t[i] = t[i].toUpperCase()), (r[i >> 1] & 15) >= 8 && (t[i + 1] = t[i + 1].toUpperCase());
  return "0x" + t.join("");
}
const Ju = {};
for (let n = 0; n < 10; n++)
  Ju[String(n)] = String(n);
for (let n = 0; n < 26; n++)
  Ju[String.fromCharCode(65 + n)] = String(10 + n);
const Q_ = 15;
function My(n) {
  n = n.toUpperCase(), n = n.substring(4) + n.substring(0, 2) + "00";
  let t = n.split("").map((r) => Ju[r]).join("");
  for (; t.length >= Q_; ) {
    let r = t.substring(0, Q_);
    t = parseInt(r, 10) % 97 + t.substring(r.length);
  }
  let e = String(98 - parseInt(t, 10) % 97);
  for (; e.length < 2; )
    e = "0" + e;
  return e;
}
const jy = function() {
  const n = {};
  for (let t = 0; t < 36; t++) {
    const e = "0123456789abcdefghijklmnopqrstuvwxyz"[t];
    n[e] = BigInt(t);
  }
  return n;
}();
function Gy(n) {
  n = n.toLowerCase();
  let t = Dy;
  for (let e = 0; e < n.length; e++)
    t = t * Uy + jy[n[e]];
  return t;
}
function Ut(n) {
  if (V(typeof n == "string", "invalid address", "address", n), n.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    n.startsWith("0x") || (n = "0x" + n);
    const t = q_(n);
    return V(!n.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || t === n, "bad address checksum", "address", n), t;
  }
  if (n.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    V(n.substring(2, 4) === My(n), "bad icap checksum", "address", n);
    let t = Gy(n.substring(4)).toString(16);
    for (; t.length < 40; )
      t = "0" + t;
    return q_("0x" + t);
  }
  V(!1, "invalid address", "address", n);
}
function Hy(n) {
  const t = Ut(n.from);
  let r = mt(n.nonce, "tx.nonce").toString(16);
  return r === "0" ? r = "0x" : r.length % 2 ? r = "0x0" + r : r = "0x" + r, Ut(ne(le(fi([t, r])), 12));
}
function Jw(n) {
  return n && typeof n.getAddress == "function";
}
function Ge(n) {
  try {
    return Ut(n), !0;
  } catch {
  }
  return !1;
}
async function ka(n, t) {
  const e = await t;
  return (e == null || e === "0x0000000000000000000000000000000000000000") && (_t(typeof n != "string", "unconfigured name", "UNCONFIGURED_NAME", { value: n }), V(!1, "invalid AddressLike value; did not resolve to a value address", "target", n)), Ut(e);
}
function ze(n, t) {
  if (typeof n == "string")
    return n.match(/^0x[0-9a-f]{40}$/i) ? Ut(n) : (_t(t != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" }), ka(n, t.resolveName(n)));
  if (Jw(n))
    return ka(n, n.getAddress());
  if (n && typeof n.then == "function")
    return ka(n, n);
  V(!1, "unsupported addressable value", "target", n);
}
const lr = {};
function bt(n, t) {
  let e = !1;
  return t < 0 && (e = !0, t *= -1), new se(lr, `${e ? "" : "u"}int${t}`, n, { signed: e, width: t });
}
function Mt(n, t) {
  return new se(lr, `bytes${t || ""}`, n, { size: t });
}
const K_ = Symbol.for("_ethers_typed");
class se {
  /**
   *  The type, as a Solidity-compatible type.
   */
  type;
  /**
   *  The actual value.
   */
  value;
  #t;
  /**
   *  @_ignore:
   */
  _typedSymbol;
  /**
   *  @_ignore:
   */
  constructor(t, e, r, i) {
    i == null && (i = null), Do(lr, t, "Typed"), zt(this, { _typedSymbol: K_, type: e, value: r }), this.#t = i, this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array")
      throw new Error("");
    if (this.type === "dynamicArray")
      throw new Error("");
    return this.type === "tuple" ? `tuple(${this.value.map((t) => t.format()).join(",")})` : this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple")
      throw TypeError("not a tuple");
    return this.#t;
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array")
      throw TypeError("not an array");
    return this.#t === !0 ? -1 : this.#t === !1 ? this.value.length : null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(t, e) {
    return new se(lr, t, e);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(t) {
    return bt(t, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(t) {
    return bt(t, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(t) {
    return bt(t, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(t) {
    return bt(t, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(t) {
    return bt(t, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(t) {
    return bt(t, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(t) {
    return bt(t, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(t) {
    return bt(t, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(t) {
    return bt(t, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(t) {
    return bt(t, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(t) {
    return bt(t, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(t) {
    return bt(t, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(t) {
    return bt(t, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(t) {
    return bt(t, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(t) {
    return bt(t, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(t) {
    return bt(t, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(t) {
    return bt(t, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(t) {
    return bt(t, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(t) {
    return bt(t, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(t) {
    return bt(t, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(t) {
    return bt(t, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(t) {
    return bt(t, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(t) {
    return bt(t, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(t) {
    return bt(t, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(t) {
    return bt(t, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(t) {
    return bt(t, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(t) {
    return bt(t, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(t) {
    return bt(t, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(t) {
    return bt(t, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(t) {
    return bt(t, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(t) {
    return bt(t, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(t) {
    return bt(t, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(t) {
    return bt(t, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(t) {
    return bt(t, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(t) {
    return bt(t, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(t) {
    return bt(t, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(t) {
    return bt(t, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(t) {
    return bt(t, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(t) {
    return bt(t, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(t) {
    return bt(t, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(t) {
    return bt(t, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(t) {
    return bt(t, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(t) {
    return bt(t, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(t) {
    return bt(t, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(t) {
    return bt(t, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(t) {
    return bt(t, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(t) {
    return bt(t, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(t) {
    return bt(t, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(t) {
    return bt(t, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(t) {
    return bt(t, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(t) {
    return bt(t, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(t) {
    return bt(t, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(t) {
    return bt(t, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(t) {
    return bt(t, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(t) {
    return bt(t, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(t) {
    return bt(t, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(t) {
    return bt(t, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(t) {
    return bt(t, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(t) {
    return bt(t, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(t) {
    return bt(t, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(t) {
    return bt(t, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(t) {
    return bt(t, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(t) {
    return bt(t, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(t) {
    return bt(t, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(t) {
    return bt(t, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(t) {
    return bt(t, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(t) {
    return Mt(t, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(t) {
    return Mt(t, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(t) {
    return Mt(t, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(t) {
    return Mt(t, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(t) {
    return Mt(t, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(t) {
    return Mt(t, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(t) {
    return Mt(t, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(t) {
    return Mt(t, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(t) {
    return Mt(t, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(t) {
    return Mt(t, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(t) {
    return Mt(t, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(t) {
    return Mt(t, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(t) {
    return Mt(t, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(t) {
    return Mt(t, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(t) {
    return Mt(t, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(t) {
    return Mt(t, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(t) {
    return Mt(t, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(t) {
    return Mt(t, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(t) {
    return Mt(t, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(t) {
    return Mt(t, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(t) {
    return Mt(t, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(t) {
    return Mt(t, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(t) {
    return Mt(t, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(t) {
    return Mt(t, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(t) {
    return Mt(t, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(t) {
    return Mt(t, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(t) {
    return Mt(t, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(t) {
    return Mt(t, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(t) {
    return Mt(t, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(t) {
    return Mt(t, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(t) {
    return Mt(t, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(t) {
    return Mt(t, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(t) {
    return new se(lr, "address", t);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(t) {
    return new se(lr, "bool", !!t);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(t) {
    return new se(lr, "bytes", t);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(t) {
    return new se(lr, "string", t);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(t, e) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(t, e) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(t) {
    return new se(lr, "overrides", Object.assign({}, t));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(t) {
    return t && typeof t == "object" && "_typedSymbol" in t && t._typedSymbol === K_;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(t, e) {
    if (se.isTyped(t)) {
      if (t.type !== e)
        throw new Error(`invalid type: expecetd ${e}, got ${t.type}`);
      return t.value;
    }
    return t;
  }
}
class Vy extends Xn {
  constructor(t) {
    super("address", "address", t, !1);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(t, e) {
    let r = se.dereference(e, "string");
    try {
      r = Ut(r);
    } catch (i) {
      return this._throwError(i.message, e);
    }
    return t.writeValue(r);
  }
  decode(t) {
    return Ut(_i(t.readValue(), 20));
  }
}
class qy extends Xn {
  coder;
  constructor(t) {
    super(t.name, t.type, "_", t.dynamic), this.coder = t;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(t, e) {
    return this.coder.encode(t, e);
  }
  decode(t) {
    return this.coder.decode(t);
  }
}
function $w(n, t, e) {
  let r = [];
  if (Array.isArray(e))
    r = e;
  else if (e && typeof e == "object") {
    let _ = {};
    r = t.map((l) => {
      const f = l.localName;
      return _t(f, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder: l }, value: e }), _t(!_[f], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder: l }, value: e }), _[f] = !0, e[f];
    });
  } else
    V(!1, "invalid tuple value", "tuple", e);
  V(t.length === r.length, "types/value length mismatch", "tuple", e);
  let i = new hu(), o = new hu(), a = [];
  t.forEach((_, l) => {
    let f = r[l];
    if (_.dynamic) {
      let g = o.length;
      _.encode(o, f);
      let y = i.writeUpdatableValue();
      a.push((B) => {
        y(B + g);
      });
    } else
      _.encode(i, f);
  }), a.forEach((_) => {
    _(i.length);
  });
  let u = n.appendWriter(i);
  return u += n.appendWriter(o), u;
}
function Yw(n, t) {
  let e = [], r = [], i = n.subReader(0);
  return t.forEach((o) => {
    let a = null;
    if (o.dynamic) {
      let u = n.readIndex(), _ = i.subReader(u);
      try {
        a = o.decode(_);
      } catch (l) {
        if (Ae(l, "BUFFER_OVERRUN"))
          throw l;
        a = l, a.baseType = o.name, a.name = o.localName, a.type = o.type;
      }
    } else
      try {
        a = o.decode(n);
      } catch (u) {
        if (Ae(u, "BUFFER_OVERRUN"))
          throw u;
        a = u, a.baseType = o.name, a.name = o.localName, a.type = o.type;
      }
    if (a == null)
      throw new Error("investigate");
    e.push(a), r.push(o.localName || null);
  }), Qn.fromItems(e, r);
}
class Qy extends Xn {
  coder;
  length;
  constructor(t, e, r) {
    const i = t.type + "[" + (e >= 0 ? e : "") + "]", o = e === -1 || t.dynamic;
    super("array", i, r, o), zt(this, { coder: t, length: e });
  }
  defaultValue() {
    const t = this.coder.defaultValue(), e = [];
    for (let r = 0; r < this.length; r++)
      e.push(t);
    return e;
  }
  encode(t, e) {
    const r = se.dereference(e, "array");
    Array.isArray(r) || this._throwError("expected array value", r);
    let i = this.length;
    i === -1 && (i = r.length, t.writeValue(r.length)), aw(r.length, i, "coder array" + (this.localName ? " " + this.localName : ""));
    let o = [];
    for (let a = 0; a < r.length; a++)
      o.push(this.coder);
    return $w(t, o, r);
  }
  decode(t) {
    let e = this.length;
    e === -1 && (e = t.readIndex(), _t(e * Re <= t.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: t.bytes, offset: e * Re, length: t.dataLength }));
    let r = [];
    for (let i = 0; i < e; i++)
      r.push(new qy(this.coder));
    return Yw(t, r);
  }
}
class Ky extends Xn {
  constructor(t) {
    super("bool", "bool", t, !1);
  }
  defaultValue() {
    return !1;
  }
  encode(t, e) {
    const r = se.dereference(e, "bool");
    return t.writeValue(r ? 1 : 0);
  }
  decode(t) {
    return !!t.readValue();
  }
}
class Zw extends Xn {
  constructor(t, e) {
    super(t, t, e, !0);
  }
  defaultValue() {
    return "0x";
  }
  encode(t, e) {
    e = xe(e);
    let r = t.writeValue(e.length);
    return r += t.writeBytes(e), r;
  }
  decode(t) {
    return t.readBytes(t.readIndex(), !0);
  }
}
class Wy extends Zw {
  constructor(t) {
    super("bytes", t);
  }
  decode(t) {
    return gt(super.decode(t));
  }
}
class Jy extends Xn {
  size;
  constructor(t, e) {
    let r = "bytes" + String(t);
    super(r, r, e, !1), zt(this, { size: t }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(t, e) {
    let r = xe(se.dereference(e, this.type));
    return r.length !== this.size && this._throwError("incorrect data length", e), t.writeBytes(r);
  }
  decode(t) {
    return gt(t.readBytes(this.size));
  }
}
const $y = new Uint8Array([]);
class Yy extends Xn {
  constructor(t) {
    super("null", "", t, !1);
  }
  defaultValue() {
    return null;
  }
  encode(t, e) {
    return e != null && this._throwError("not null", e), t.writeBytes($y);
  }
  decode(t) {
    return t.readBytes(0), null;
  }
}
const Zy = BigInt(0), Xy = BigInt(1), tb = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
class eb extends Xn {
  size;
  signed;
  constructor(t, e, r) {
    const i = (e ? "int" : "uint") + t * 8;
    super(i, i, r, !1), zt(this, { size: t, signed: e }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(t, e) {
    let r = mt(se.dereference(e, this.type)), i = zs(tb, Re * 8);
    if (this.signed) {
      let o = zs(i, this.size * 8 - 1);
      (r > o || r < -(o + Xy)) && this._throwError("value out-of-bounds", e), r = _w(r, 8 * Re);
    } else (r < Zy || r > zs(i, this.size * 8)) && this._throwError("value out-of-bounds", e);
    return t.writeValue(r);
  }
  decode(t) {
    let e = zs(t.readValue(), this.size * 8);
    return this.signed && (e = Zg(e, this.size * 8)), e;
  }
}
class rb extends Zw {
  constructor(t) {
    super("string", t);
  }
  defaultValue() {
    return "";
  }
  encode(t, e) {
    return super.encode(t, Jn(se.dereference(e, "string")));
  }
  decode(t) {
    return zo(super.decode(t));
  }
}
class co extends Xn {
  coders;
  constructor(t, e) {
    let r = !1;
    const i = [];
    t.forEach((a) => {
      a.dynamic && (r = !0), i.push(a.type);
    });
    const o = "tuple(" + i.join(",") + ")";
    super("tuple", o, e, r), zt(this, { coders: Object.freeze(t.slice()) });
  }
  defaultValue() {
    const t = [];
    this.coders.forEach((r) => {
      t.push(r.defaultValue());
    });
    const e = this.coders.reduce((r, i) => {
      const o = i.localName;
      return o && (r[o] || (r[o] = 0), r[o]++), r;
    }, {});
    return this.coders.forEach((r, i) => {
      let o = r.localName;
      !o || e[o] !== 1 || (o === "length" && (o = "_length"), t[o] == null && (t[o] = t[i]));
    }), Object.freeze(t);
  }
  encode(t, e) {
    const r = se.dereference(e, "tuple");
    return $w(t, this.coders, r);
  }
  decode(t) {
    return Yw(t, this.coders);
  }
}
function Fa(n, t) {
  return {
    address: Ut(n),
    storageKeys: t.map((e, r) => (V(Xt(e, 32), "invalid slot", `storageKeys[${r}]`, e), e.toLowerCase()))
  };
}
function Li(n) {
  if (Array.isArray(n))
    return n.map((e, r) => Array.isArray(e) ? (V(e.length === 2, "invalid slot set", `value[${r}]`, e), Fa(e[0], e[1])) : (V(e != null && typeof e == "object", "invalid address-slot set", "value", n), Fa(e.address, e.storageKeys)));
  V(n != null && typeof n == "object", "invalid access list", "value", n);
  const t = Object.keys(n).map((e) => {
    const r = n[e].reduce((i, o) => (i[o] = !0, i), {});
    return Fa(e, Object.keys(r).sort());
  });
  return t.sort((e, r) => e.address.localeCompare(r.address)), t;
}
function Xw(n) {
  return {
    address: Ut(n.address),
    nonce: mt(n.nonce != null ? n.nonce : 0),
    chainId: mt(n.chainId != null ? n.chainId : 0),
    signature: ie.from(n.signature)
  };
}
function nb(n) {
  let t;
  return typeof n == "string" ? t = qn.computePublicKey(n, !1) : t = n.publicKey, Ut(le("0x" + t.substring(4)).substring(26));
}
function td(n, t) {
  return nb(qn.recoverPublicKey(n, t));
}
const ye = BigInt(0), ib = BigInt(2), sb = BigInt(27), ob = BigInt(28), ab = BigInt(35), cb = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Ia = 4096 * 32;
function ub(n) {
  return { blobToKzgCommitment: (r) => {
    if ("computeBlobProof" in n) {
      if ("blobToKzgCommitment" in n && typeof n.blobToKzgCommitment == "function")
        return Ot(n.blobToKzgCommitment(gt(r)));
    } else if ("blobToKzgCommitment" in n && typeof n.blobToKzgCommitment == "function")
      return Ot(n.blobToKzgCommitment(r));
    if ("blobToKZGCommitment" in n && typeof n.blobToKZGCommitment == "function")
      return Ot(n.blobToKZGCommitment(gt(r)));
    V(!1, "unsupported KZG library", "kzg", n);
  }, computeBlobKzgProof: (r, i) => {
    if ("computeBlobProof" in n && typeof n.computeBlobProof == "function")
      return Ot(n.computeBlobProof(gt(r), gt(i)));
    if ("computeBlobKzgProof" in n && typeof n.computeBlobKzgProof == "function")
      return n.computeBlobKzgProof(r, i);
    if ("computeBlobKZGProof" in n && typeof n.computeBlobKZGProof == "function")
      return Ot(n.computeBlobKZGProof(gt(r), gt(i)));
    V(!1, "unsupported KZG library", "kzg", n);
  } };
}
function W_(n, t) {
  let e = n.toString(16);
  for (; e.length < 2; )
    e = "0" + e;
  return e += ws(t).substring(4), "0x" + e;
}
function ds(n) {
  return n === "0x" ? null : Ut(n);
}
function Vo(n, t) {
  try {
    return Li(n);
  } catch (e) {
    V(!1, e.message, t, n);
  }
}
function _b(n, t) {
  try {
    if (!Array.isArray(n))
      throw new Error("authorizationList: invalid array");
    const e = [];
    for (let r = 0; r < n.length; r++) {
      const i = n[r];
      if (!Array.isArray(i))
        throw new Error(`authorization[${r}]: invalid array`);
      if (i.length !== 6)
        throw new Error(`authorization[${r}]: wrong length`);
      if (!i[1])
        throw new Error(`authorization[${r}]: null address`);
      e.push({
        address: ds(i[1]),
        nonce: Jt(i[2], "nonce"),
        chainId: Jt(i[0], "chainId"),
        signature: ie.from({
          yParity: Di(i[3], "yParity"),
          r: Yn(i[4], 32),
          s: Yn(i[5], 32)
        })
      });
    }
    return e;
  } catch (e) {
    V(!1, e.message, t, n);
  }
}
function Di(n, t) {
  return n === "0x" ? 0 : Tt(n, t);
}
function Jt(n, t) {
  if (n === "0x")
    return ye;
  const e = mt(n, t);
  return V(e <= cb, "value exceeds uint size", t, e), e;
}
function Lt(n, t) {
  const e = mt(n, "value"), r = ge(e);
  return V(r.length <= 32, "value too large", `tx.${t}`, e), r;
}
function qo(n) {
  return Li(n).map((t) => [t.address, t.storageKeys]);
}
function fb(n) {
  return n.map((t) => [
    Lt(t.chainId, "chainId"),
    t.address,
    Lt(t.nonce, "nonce"),
    Lt(t.signature.yParity, "yParity"),
    ge(t.signature.r),
    ge(t.signature.s)
  ]);
}
function lb(n, t) {
  V(Array.isArray(n), `invalid ${t}`, "value", n);
  for (let e = 0; e < n.length; e++)
    V(Xt(n[e], 32), "invalid ${ param } hash", `value[${e}]`, n[e]);
  return n;
}
function hb(n) {
  const t = Ks(n);
  V(Array.isArray(t) && (t.length === 9 || t.length === 6), "invalid field count for legacy transaction", "data", n);
  const e = {
    type: 0,
    nonce: Di(t[0], "nonce"),
    gasPrice: Jt(t[1], "gasPrice"),
    gasLimit: Jt(t[2], "gasLimit"),
    to: ds(t[3]),
    value: Jt(t[4], "value"),
    data: gt(t[5]),
    chainId: ye
  };
  if (t.length === 6)
    return e;
  const r = Jt(t[6], "v"), i = Jt(t[7], "r"), o = Jt(t[8], "s");
  if (i === ye && o === ye)
    e.chainId = r;
  else {
    let a = (r - ab) / ib;
    a < ye && (a = ye), e.chainId = a, V(a !== ye || r === sb || r === ob, "non-canonical legacy v", "v", t[6]), e.signature = ie.from({
      r: Yn(t[7], 32),
      s: Yn(t[8], 32),
      v: r
    });
  }
  return e;
}
function pb(n, t) {
  const e = [
    Lt(n.nonce, "nonce"),
    Lt(n.gasPrice || 0, "gasPrice"),
    Lt(n.gasLimit, "gasLimit"),
    n.to || "0x",
    Lt(n.value, "value"),
    n.data
  ];
  let r = ye;
  if (n.chainId != ye)
    r = mt(n.chainId, "tx.chainId"), V(!t || t.networkV == null || t.legacyChainId === r, "tx.chainId/sig.v mismatch", "sig", t);
  else if (n.signature) {
    const o = n.signature.legacyChainId;
    o != null && (r = o);
  }
  if (!t)
    return r !== ye && (e.push(ge(r)), e.push("0x"), e.push("0x")), fi(e);
  let i = BigInt(27 + t.yParity);
  return r !== ye ? i = ie.getChainIdV(r, t.v) : BigInt(t.v) !== i && V(!1, "tx.chainId/sig.v mismatch", "sig", t), e.push(ge(i)), e.push(ge(t.r)), e.push(ge(t.s)), fi(e);
}
function Qo(n, t) {
  let e;
  try {
    if (e = Di(t[0], "yParity"), e !== 0 && e !== 1)
      throw new Error("bad yParity");
  } catch {
    V(!1, "invalid yParity", "yParity", t[0]);
  }
  const r = Yn(t[1], 32), i = Yn(t[2], 32), o = ie.from({ r, s: i, yParity: e });
  n.signature = o;
}
function wb(n) {
  const t = Ks(Ot(n).slice(1));
  V(Array.isArray(t) && (t.length === 9 || t.length === 12), "invalid field count for transaction type: 2", "data", gt(n));
  const e = {
    type: 2,
    chainId: Jt(t[0], "chainId"),
    nonce: Di(t[1], "nonce"),
    maxPriorityFeePerGas: Jt(t[2], "maxPriorityFeePerGas"),
    maxFeePerGas: Jt(t[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: Jt(t[4], "gasLimit"),
    to: ds(t[5]),
    value: Jt(t[6], "value"),
    data: gt(t[7]),
    accessList: Vo(t[8], "accessList")
  };
  return t.length === 9 || Qo(e, t.slice(9)), e;
}
function db(n, t) {
  const e = [
    Lt(n.chainId, "chainId"),
    Lt(n.nonce, "nonce"),
    Lt(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    Lt(n.maxFeePerGas || 0, "maxFeePerGas"),
    Lt(n.gasLimit, "gasLimit"),
    n.to || "0x",
    Lt(n.value, "value"),
    n.data,
    qo(n.accessList || [])
  ];
  return t && (e.push(Lt(t.yParity, "yParity")), e.push(ge(t.r)), e.push(ge(t.s))), oe(["0x02", fi(e)]);
}
function gb(n) {
  const t = Ks(Ot(n).slice(1));
  V(Array.isArray(t) && (t.length === 8 || t.length === 11), "invalid field count for transaction type: 1", "data", gt(n));
  const e = {
    type: 1,
    chainId: Jt(t[0], "chainId"),
    nonce: Di(t[1], "nonce"),
    gasPrice: Jt(t[2], "gasPrice"),
    gasLimit: Jt(t[3], "gasLimit"),
    to: ds(t[4]),
    value: Jt(t[5], "value"),
    data: gt(t[6]),
    accessList: Vo(t[7], "accessList")
  };
  return t.length === 8 || Qo(e, t.slice(8)), e;
}
function yb(n, t) {
  const e = [
    Lt(n.chainId, "chainId"),
    Lt(n.nonce, "nonce"),
    Lt(n.gasPrice || 0, "gasPrice"),
    Lt(n.gasLimit, "gasLimit"),
    n.to || "0x",
    Lt(n.value, "value"),
    n.data,
    qo(n.accessList || [])
  ];
  return t && (e.push(Lt(t.yParity, "recoveryParam")), e.push(ge(t.r)), e.push(ge(t.s))), oe(["0x01", fi(e)]);
}
function bb(n) {
  let t = Ks(Ot(n).slice(1)), e = "3", r = null;
  if (t.length === 4 && Array.isArray(t[0])) {
    e = "3 (network format)";
    const o = t[1], a = t[2], u = t[3];
    V(Array.isArray(o), "invalid network format: blobs not an array", "fields[1]", o), V(Array.isArray(a), "invalid network format: commitments not an array", "fields[2]", a), V(Array.isArray(u), "invalid network format: proofs not an array", "fields[3]", u), V(o.length === a.length, "invalid network format: blobs/commitments length mismatch", "fields", t), V(o.length === u.length, "invalid network format: blobs/proofs length mismatch", "fields", t), r = [];
    for (let _ = 0; _ < t[1].length; _++)
      r.push({
        data: o[_],
        commitment: a[_],
        proof: u[_]
      });
    t = t[0];
  }
  V(Array.isArray(t) && (t.length === 11 || t.length === 14), `invalid field count for transaction type: ${e}`, "data", gt(n));
  const i = {
    type: 3,
    chainId: Jt(t[0], "chainId"),
    nonce: Di(t[1], "nonce"),
    maxPriorityFeePerGas: Jt(t[2], "maxPriorityFeePerGas"),
    maxFeePerGas: Jt(t[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: Jt(t[4], "gasLimit"),
    to: ds(t[5]),
    value: Jt(t[6], "value"),
    data: gt(t[7]),
    accessList: Vo(t[8], "accessList"),
    maxFeePerBlobGas: Jt(t[9], "maxFeePerBlobGas"),
    blobVersionedHashes: t[10]
  };
  r && (i.blobs = r), V(i.to != null, `invalid address for transaction type: ${e}`, "data", n), V(Array.isArray(i.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", n);
  for (let o = 0; o < i.blobVersionedHashes.length; o++)
    V(Xt(i.blobVersionedHashes[o], 32), `invalid blobVersionedHash at index ${o}: must be length 32`, "data", n);
  return t.length === 11 || Qo(i, t.slice(11)), i;
}
function mb(n, t, e) {
  const r = [
    Lt(n.chainId, "chainId"),
    Lt(n.nonce, "nonce"),
    Lt(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    Lt(n.maxFeePerGas || 0, "maxFeePerGas"),
    Lt(n.gasLimit, "gasLimit"),
    n.to || Ls,
    Lt(n.value, "value"),
    n.data,
    qo(n.accessList || []),
    Lt(n.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
    lb(n.blobVersionedHashes || [], "blobVersionedHashes")
  ];
  return t && (r.push(Lt(t.yParity, "yParity")), r.push(ge(t.r)), r.push(ge(t.s)), e) ? oe([
    "0x03",
    fi([
      r,
      e.map((i) => i.data),
      e.map((i) => i.commitment),
      e.map((i) => i.proof)
    ])
  ]) : oe(["0x03", fi(r)]);
}
function Ab(n) {
  const t = Ks(Ot(n).slice(1));
  V(Array.isArray(t) && (t.length === 10 || t.length === 13), "invalid field count for transaction type: 4", "data", gt(n));
  const e = {
    type: 4,
    chainId: Jt(t[0], "chainId"),
    nonce: Di(t[1], "nonce"),
    maxPriorityFeePerGas: Jt(t[2], "maxPriorityFeePerGas"),
    maxFeePerGas: Jt(t[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: Jt(t[4], "gasLimit"),
    to: ds(t[5]),
    value: Jt(t[6], "value"),
    data: gt(t[7]),
    accessList: Vo(t[8], "accessList"),
    authorizationList: _b(t[9], "authorizationList")
  };
  return t.length === 10 || Qo(e, t.slice(10)), e;
}
function Eb(n, t) {
  const e = [
    Lt(n.chainId, "chainId"),
    Lt(n.nonce, "nonce"),
    Lt(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    Lt(n.maxFeePerGas || 0, "maxFeePerGas"),
    Lt(n.gasLimit, "gasLimit"),
    n.to || "0x",
    Lt(n.value, "value"),
    n.data,
    qo(n.accessList || []),
    fb(n.authorizationList || [])
  ];
  return t && (e.push(Lt(t.yParity, "yParity")), e.push(ge(t.r)), e.push(ge(t.s))), oe(["0x04", fi(e)]);
}
class Qe {
  #t;
  #e;
  #r;
  #n;
  #i;
  #o;
  #s;
  #a;
  #h;
  #u;
  #p;
  #w;
  #c;
  #_;
  #f;
  #l;
  #g;
  /**
   *  The transaction type.
   *
   *  If null, the type will be automatically inferred based on
   *  explicit properties.
   */
  get type() {
    return this.#t;
  }
  set type(t) {
    switch (t) {
      case null:
        this.#t = null;
        break;
      case 0:
      case "legacy":
        this.#t = 0;
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        this.#t = 1;
        break;
      case 2:
      case "london":
      case "eip-1559":
        this.#t = 2;
        break;
      case 3:
      case "cancun":
      case "eip-4844":
        this.#t = 3;
        break;
      case 4:
      case "pectra":
      case "eip-7702":
        this.#t = 4;
        break;
      default:
        V(!1, "unsupported transaction type", "type", t);
    }
  }
  /**
   *  The name of the transaction type.
   */
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
      case 3:
        return "eip-4844";
      case 4:
        return "eip-7702";
    }
    return null;
  }
  /**
   *  The ``to`` address for the transaction or ``null`` if the
   *  transaction is an ``init`` transaction.
   */
  get to() {
    const t = this.#e;
    return t == null && this.type === 3 ? Ls : t;
  }
  set to(t) {
    this.#e = t == null ? null : Ut(t);
  }
  /**
   *  The transaction nonce.
   */
  get nonce() {
    return this.#n;
  }
  set nonce(t) {
    this.#n = Tt(t, "value");
  }
  /**
   *  The gas limit.
   */
  get gasLimit() {
    return this.#i;
  }
  set gasLimit(t) {
    this.#i = mt(t);
  }
  /**
   *  The gas price.
   *
   *  On legacy networks this defines the fee that will be paid. On
   *  EIP-1559 networks, this should be ``null``.
   */
  get gasPrice() {
    const t = this.#o;
    return t == null && (this.type === 0 || this.type === 1) ? ye : t;
  }
  set gasPrice(t) {
    this.#o = t == null ? null : mt(t, "gasPrice");
  }
  /**
   *  The maximum priority fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxPriorityFeePerGas() {
    const t = this.#s;
    return t ?? (this.type === 2 || this.type === 3 ? ye : null);
  }
  set maxPriorityFeePerGas(t) {
    this.#s = t == null ? null : mt(t, "maxPriorityFeePerGas");
  }
  /**
   *  The maximum total fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxFeePerGas() {
    const t = this.#a;
    return t ?? (this.type === 2 || this.type === 3 ? ye : null);
  }
  set maxFeePerGas(t) {
    this.#a = t == null ? null : mt(t, "maxFeePerGas");
  }
  /**
   *  The transaction data. For ``init`` transactions this is the
   *  deployment code.
   */
  get data() {
    return this.#r;
  }
  set data(t) {
    this.#r = gt(t);
  }
  /**
   *  The amount of ether (in wei) to send in this transactions.
   */
  get value() {
    return this.#h;
  }
  set value(t) {
    this.#h = mt(t, "value");
  }
  /**
   *  The chain ID this transaction is valid on.
   */
  get chainId() {
    return this.#u;
  }
  set chainId(t) {
    this.#u = mt(t);
  }
  /**
   *  If signed, the signature for this transaction.
   */
  get signature() {
    return this.#p || null;
  }
  set signature(t) {
    this.#p = t == null ? null : ie.from(t);
  }
  /**
   *  The access list.
   *
   *  An access list permits discounted (but pre-paid) access to
   *  bytecode and state variable access within contract execution.
   */
  get accessList() {
    const t = this.#w || null;
    return t ?? (this.type === 1 || this.type === 2 || this.type === 3 ? [] : null);
  }
  set accessList(t) {
    this.#w = t == null ? null : Li(t);
  }
  get authorizationList() {
    const t = this.#g || null;
    return t == null && this.type === 4 ? [] : t;
  }
  set authorizationList(t) {
    this.#g = t == null ? null : t.map((e) => Xw(e));
  }
  /**
   *  The max fee per blob gas for Cancun transactions.
   */
  get maxFeePerBlobGas() {
    const t = this.#c;
    return t == null && this.type === 3 ? ye : t;
  }
  set maxFeePerBlobGas(t) {
    this.#c = t == null ? null : mt(t, "maxFeePerBlobGas");
  }
  /**
   *  The BLOb versioned hashes for Cancun transactions.
   */
  get blobVersionedHashes() {
    let t = this.#_;
    return t == null && this.type === 3 ? [] : t;
  }
  set blobVersionedHashes(t) {
    if (t != null) {
      V(Array.isArray(t), "blobVersionedHashes must be an Array", "value", t), t = t.slice();
      for (let e = 0; e < t.length; e++)
        V(Xt(t[e], 32), "invalid blobVersionedHash", `value[${e}]`, t[e]);
    }
    this.#_ = t;
  }
  /**
   *  The BLObs for the Transaction, if any.
   *
   *  If ``blobs`` is non-``null``, then the [[seriailized]]
   *  will return the network formatted sidecar, otherwise it
   *  will return the standard [[link-eip-2718]] payload. The
   *  [[unsignedSerialized]] is unaffected regardless.
   *
   *  When setting ``blobs``, either fully valid [[Blob]] objects
   *  may be specified (i.e. correctly padded, with correct
   *  committments and proofs) or a raw [[BytesLike]] may
   *  be provided.
   *
   *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
   *  be already set. The blob will be correctly padded and the
   *  [[KzgLibrary]] will be used to compute the committment and
   *  proof for the blob.
   *
   *  A BLOb is a sequence of field elements, each of which must
   *  be within the BLS field modulo, so some additional processing
   *  may be required to encode arbitrary data to ensure each 32 byte
   *  field is within the valid range.
   *
   *  Setting this automatically populates [[blobVersionedHashes]],
   *  overwriting any existing values. Setting this to ``null``
   *  does **not** remove the [[blobVersionedHashes]], leaving them
   *  present.
   */
  get blobs() {
    return this.#l == null ? null : this.#l.map((t) => Object.assign({}, t));
  }
  set blobs(t) {
    if (t == null) {
      this.#l = null;
      return;
    }
    const e = [], r = [];
    for (let i = 0; i < t.length; i++) {
      const o = t[i];
      if (Du(o)) {
        _t(this.#f, "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
          operation: "set blobs()"
        });
        let a = Ot(o);
        if (V(a.length <= Ia, "blob is too large", `blobs[${i}]`, o), a.length !== Ia) {
          const l = new Uint8Array(Ia);
          l.set(a), a = l;
        }
        const u = this.#f.blobToKzgCommitment(a), _ = gt(this.#f.computeBlobKzgProof(a, u));
        e.push({
          data: gt(a),
          commitment: gt(u),
          proof: _
        }), r.push(W_(1, u));
      } else {
        const a = gt(o.commitment);
        e.push({
          data: gt(o.data),
          commitment: a,
          proof: gt(o.proof)
        }), r.push(W_(1, a));
      }
    }
    this.#l = e, this.#_ = r;
  }
  get kzg() {
    return this.#f;
  }
  set kzg(t) {
    t == null ? this.#f = null : this.#f = ub(t);
  }
  /**
   *  Creates a new Transaction with default values.
   */
  constructor() {
    this.#t = null, this.#e = null, this.#n = 0, this.#i = ye, this.#o = null, this.#s = null, this.#a = null, this.#r = "0x", this.#h = ye, this.#u = ye, this.#p = null, this.#w = null, this.#c = null, this.#_ = null, this.#f = null, this.#l = null, this.#g = null;
  }
  /**
   *  The transaction hash, if signed. Otherwise, ``null``.
   */
  get hash() {
    return this.signature == null ? null : le(this.#d(!0, !1));
  }
  /**
   *  The pre-image hash of this transaction.
   *
   *  This is the digest that a [[Signer]] must sign to authorize
   *  this transaction.
   */
  get unsignedHash() {
    return le(this.unsignedSerialized);
  }
  /**
   *  The sending address, if signed. Otherwise, ``null``.
   */
  get from() {
    return this.signature == null ? null : td(this.unsignedHash, this.signature);
  }
  /**
   *  The public key of the sender, if signed. Otherwise, ``null``.
   */
  get fromPublicKey() {
    return this.signature == null ? null : qn.recoverPublicKey(this.unsignedHash, this.signature);
  }
  /**
   *  Returns true if signed.
   *
   *  This provides a Type Guard that properties requiring a signed
   *  transaction are non-null.
   */
  isSigned() {
    return this.signature != null;
  }
  #d(t, e) {
    _t(!t || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    const r = t ? this.signature : null;
    switch (this.inferType()) {
      case 0:
        return pb(this, r);
      case 1:
        return yb(this, r);
      case 2:
        return db(this, r);
      case 3:
        return mb(this, r, e ? this.blobs : null);
      case 4:
        return Eb(this, r);
    }
    _t(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  }
  /**
   *  The serialized transaction.
   *
   *  This throws if the transaction is unsigned. For the pre-image,
   *  use [[unsignedSerialized]].
   */
  get serialized() {
    return this.#d(!0, !0);
  }
  /**
   *  The transaction pre-image.
   *
   *  The hash of this is the digest which needs to be signed to
   *  authorize this transaction.
   */
  get unsignedSerialized() {
    return this.#d(!1, !1);
  }
  /**
   *  Return the most "likely" type; currently the highest
   *  supported transaction type.
   */
  inferType() {
    const t = this.inferTypes();
    return t.indexOf(2) >= 0 ? 2 : t.pop();
  }
  /**
   *  Validates the explicit properties and returns a list of compatible
   *  transaction types.
   */
  inferTypes() {
    const t = this.gasPrice != null, e = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null, r = this.accessList != null, i = this.#c != null || this.#_;
    this.maxFeePerGas != null && this.maxPriorityFeePerGas != null && _t(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this }), _t(!e || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this }), _t(this.type !== 0 || !r, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const o = [];
    return this.type != null ? o.push(this.type) : this.authorizationList && this.authorizationList.length ? o.push(4) : e ? o.push(2) : t ? (o.push(1), r || o.push(0)) : r ? (o.push(1), o.push(2)) : (i && this.to || (o.push(0), o.push(1), o.push(2)), o.push(3)), o.sort(), o;
  }
  /**
   *  Returns true if this transaction is a legacy transaction (i.e.
   *  ``type === 0``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if this transaction is berlin hardform transaction (i.e.
   *  ``type === 1``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if this transaction is london hardform transaction (i.e.
   *  ``type === 2``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if this transaction is an [[link-eip-4844]] BLOB
   *  transaction.
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Create a copy of this transaciton.
   */
  clone() {
    return Qe.from(this);
  }
  /**
   *  Return a JSON-friendly object.
   */
  toJSON() {
    const t = (e) => e == null ? null : e.toString();
    return {
      type: this.type,
      to: this.to,
      //            from: this.from,
      data: this.data,
      nonce: this.nonce,
      gasLimit: t(this.gasLimit),
      gasPrice: t(this.gasPrice),
      maxPriorityFeePerGas: t(this.maxPriorityFeePerGas),
      maxFeePerGas: t(this.maxFeePerGas),
      value: t(this.value),
      chainId: t(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  /**
   *  Create a **Transaction** from a serialized transaction or a
   *  Transaction-like object.
   */
  static from(t) {
    if (t == null)
      return new Qe();
    if (typeof t == "string") {
      const r = Ot(t);
      if (r[0] >= 127)
        return Qe.from(hb(r));
      switch (r[0]) {
        case 1:
          return Qe.from(gb(r));
        case 2:
          return Qe.from(wb(r));
        case 3:
          return Qe.from(bb(r));
        case 4:
          return Qe.from(Ab(r));
      }
      _t(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const e = new Qe();
    return t.type != null && (e.type = t.type), t.to != null && (e.to = t.to), t.nonce != null && (e.nonce = t.nonce), t.gasLimit != null && (e.gasLimit = t.gasLimit), t.gasPrice != null && (e.gasPrice = t.gasPrice), t.maxPriorityFeePerGas != null && (e.maxPriorityFeePerGas = t.maxPriorityFeePerGas), t.maxFeePerGas != null && (e.maxFeePerGas = t.maxFeePerGas), t.maxFeePerBlobGas != null && (e.maxFeePerBlobGas = t.maxFeePerBlobGas), t.data != null && (e.data = t.data), t.value != null && (e.value = t.value), t.chainId != null && (e.chainId = t.chainId), t.signature != null && (e.signature = ie.from(t.signature)), t.accessList != null && (e.accessList = t.accessList), t.authorizationList != null && (e.authorizationList = t.authorizationList), t.blobVersionedHashes != null && (e.blobVersionedHashes = t.blobVersionedHashes), t.kzg != null && (e.kzg = t.kzg), t.blobs != null && (e.blobs = t.blobs), t.hash != null && (V(e.isSigned(), "unsigned transaction cannot define '.hash'", "tx", t), V(e.hash === t.hash, "hash mismatch", "tx", t)), t.from != null && (V(e.isSigned(), "unsigned transaction cannot define '.from'", "tx", t), V(e.from.toLowerCase() === (t.from || "").toLowerCase(), "from mismatch", "tx", t)), e;
  }
}
function Ii(n) {
  return le(Jn(n));
}
var vb = "";
const J_ = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]), $_ = 4;
function xb(n) {
  let t = 0;
  function e() {
    return n[t++] << 8 | n[t++];
  }
  let r = e(), i = 1, o = [0, 1];
  for (let k = 1; k < r; k++)
    o.push(i += e());
  let a = e(), u = t;
  t += a;
  let _ = 0, l = 0;
  function f() {
    return _ == 0 && (l = l << 8 | n[t++], _ = 8), l >> --_ & 1;
  }
  const g = 31, y = 2 ** g, B = y >>> 1, I = B >> 1, S = y - 1;
  let T = 0;
  for (let k = 0; k < g; k++) T = T << 1 | f();
  let A = [], R = 0, P = y;
  for (; ; ) {
    let k = Math.floor(((T - R + 1) * i - 1) / P), C = 0, N = r;
    for (; N - C > 1; ) {
      let Z = C + N >>> 1;
      k < o[Z] ? N = Z : C = Z;
    }
    if (C == 0) break;
    A.push(C);
    let D = R + Math.floor(P * o[C] / i), Y = R + Math.floor(P * o[C + 1] / i) - 1;
    for (; ((D ^ Y) & B) == 0; )
      T = T << 1 & S | f(), D = D << 1 & S, Y = Y << 1 & S | 1;
    for (; D & ~Y & I; )
      T = T & B | T << 1 & S >>> 1 | f(), D = D << 1 ^ B, Y = (Y ^ B) << 1 | B | 1;
    R = D, P = 1 + Y - D;
  }
  let z = r - 4;
  return A.map((k) => {
    switch (k - z) {
      case 3:
        return z + 65792 + (n[u++] << 16 | n[u++] << 8 | n[u++]);
      case 2:
        return z + 256 + (n[u++] << 8 | n[u++]);
      case 1:
        return z + n[u++];
      default:
        return k - 1;
    }
  });
}
function Rb(n) {
  let t = 0;
  return () => n[t++];
}
function ed(n) {
  return Rb(xb(zb(n)));
}
function zb(n) {
  let t = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((i, o) => t[i.charCodeAt(0)] = o);
  let e = n.length, r = new Uint8Array(6 * e >> 3);
  for (let i = 0, o = 0, a = 0, u = 0; i < e; i++)
    u = u << 6 | t[n.charCodeAt(i)], a += 6, a >= 8 && (r[o++] = u >> (a -= 8));
  return r;
}
function Bb(n) {
  return n & 1 ? ~n >> 1 : n >> 1;
}
function Sb(n, t) {
  let e = Array(n);
  for (let r = 0, i = 0; r < n; r++) e[r] = i += Bb(t());
  return e;
}
function Ds(n, t = 0) {
  let e = [];
  for (; ; ) {
    let r = n(), i = n();
    if (!i) break;
    t += r;
    for (let o = 0; o < i; o++)
      e.push(t + o);
    t += i + 1;
  }
  return e;
}
function rd(n) {
  return Us(() => {
    let t = Ds(n);
    if (t.length) return t;
  });
}
function nd(n) {
  let t = [];
  for (; ; ) {
    let e = n();
    if (e == 0) break;
    t.push(Pb(e, n));
  }
  for (; ; ) {
    let e = n() - 1;
    if (e < 0) break;
    t.push(kb(e, n));
  }
  return t.flat();
}
function Us(n) {
  let t = [];
  for (; ; ) {
    let e = n(t.length);
    if (!e) break;
    t.push(e);
  }
  return t;
}
function id(n, t, e) {
  let r = Array(n).fill().map(() => []);
  for (let i = 0; i < t; i++)
    Sb(n, e).forEach((o, a) => r[a].push(o));
  return r;
}
function Pb(n, t) {
  let e = 1 + t(), r = t(), i = Us(t);
  return id(i.length, 1 + n, t).flatMap((a, u) => {
    let [_, ...l] = a;
    return Array(i[u]).fill().map((f, g) => {
      let y = g * r;
      return [_ + g * e, l.map((B) => B + y)];
    });
  });
}
function kb(n, t) {
  let e = 1 + t();
  return id(e, 1 + n, t).map((i) => [i[0], i.slice(1)]);
}
function Fb(n) {
  let t = [], e = Ds(n);
  return i(r([]), []), t;
  function r(o) {
    let a = n(), u = Us(() => {
      let _ = Ds(n).map((l) => e[l]);
      if (_.length) return r(_);
    });
    return { S: a, B: u, Q: o };
  }
  function i({ S: o, B: a }, u, _) {
    if (!(o & 4 && _ === u[u.length - 1])) {
      o & 2 && (_ = u[u.length - 1]), o & 1 && t.push(u);
      for (let l of a)
        for (let f of l.Q)
          i(l, [...u, f], _);
    }
  }
}
function Ib(n) {
  return n.toString(16).toUpperCase().padStart(2, "0");
}
function sd(n) {
  return `{${Ib(n)}}`;
}
function Ob(n) {
  let t = [];
  for (let e = 0, r = n.length; e < r; ) {
    let i = n.codePointAt(e);
    e += i < 65536 ? 1 : 2, t.push(i);
  }
  return t;
}
function cs(n) {
  let e = n.length;
  if (e < 4096) return String.fromCodePoint(...n);
  let r = [];
  for (let i = 0; i < e; )
    r.push(String.fromCodePoint(...n.slice(i, i += 4096)));
  return r.join("");
}
function Tb(n, t) {
  let e = n.length, r = e - t.length;
  for (let i = 0; r == 0 && i < e; i++) r = n[i] - t[i];
  return r;
}
var Cb = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
const Ms = 44032, So = 4352, Po = 4449, ko = 4519, od = 19, ad = 21, us = 28, Fo = ad * us, Nb = od * Fo, Lb = Ms + Nb, Db = So + od, Ub = Po + ad, Mb = ko + us;
function Bs(n) {
  return n >> 24 & 255;
}
function cd(n) {
  return n & 16777215;
}
let bu, Y_, mu, yo;
function jb() {
  let n = ed(Cb);
  bu = new Map(rd(n).flatMap((t, e) => t.map((r) => [r, e + 1 << 24]))), Y_ = new Set(Ds(n)), mu = /* @__PURE__ */ new Map(), yo = /* @__PURE__ */ new Map();
  for (let [t, e] of nd(n)) {
    if (!Y_.has(t) && e.length == 2) {
      let [r, i] = e, o = yo.get(r);
      o || (o = /* @__PURE__ */ new Map(), yo.set(r, o)), o.set(i, t);
    }
    mu.set(t, e.reverse());
  }
}
function ud(n) {
  return n >= Ms && n < Lb;
}
function Gb(n, t) {
  if (n >= So && n < Db && t >= Po && t < Ub)
    return Ms + (n - So) * Fo + (t - Po) * us;
  if (ud(n) && t > ko && t < Mb && (n - Ms) % us == 0)
    return n + (t - ko);
  {
    let e = yo.get(n);
    return e && (e = e.get(t), e) ? e : -1;
  }
}
function _d(n) {
  bu || jb();
  let t = [], e = [], r = !1;
  function i(o) {
    let a = bu.get(o);
    a && (r = !0, o |= a), t.push(o);
  }
  for (let o of n)
    for (; ; ) {
      if (o < 128)
        t.push(o);
      else if (ud(o)) {
        let a = o - Ms, u = a / Fo | 0, _ = a % Fo / us | 0, l = a % us;
        i(So + u), i(Po + _), l > 0 && i(ko + l);
      } else {
        let a = mu.get(o);
        a ? e.push(...a) : i(o);
      }
      if (!e.length) break;
      o = e.pop();
    }
  if (r && t.length > 1) {
    let o = Bs(t[0]);
    for (let a = 1; a < t.length; a++) {
      let u = Bs(t[a]);
      if (u == 0 || o <= u) {
        o = u;
        continue;
      }
      let _ = a - 1;
      for (; ; ) {
        let l = t[_ + 1];
        if (t[_ + 1] = t[_], t[_] = l, !_ || (o = Bs(t[--_]), o <= u)) break;
      }
      o = Bs(t[a]);
    }
  }
  return t;
}
function Hb(n) {
  let t = [], e = [], r = -1, i = 0;
  for (let o of n) {
    let a = Bs(o), u = cd(o);
    if (r == -1)
      a == 0 ? r = u : t.push(u);
    else if (i > 0 && i >= a)
      a == 0 ? (t.push(r, ...e), e.length = 0, r = u) : e.push(u), i = a;
    else {
      let _ = Gb(r, u);
      _ >= 0 ? r = _ : i == 0 && a == 0 ? (t.push(r), r = u) : (e.push(u), i = a);
    }
  }
  return r >= 0 && t.push(r, ...e), t;
}
function fd(n) {
  return _d(n).map(cd);
}
function Vb(n) {
  return Hb(_d(n));
}
const Z_ = 45, ld = ".", hd = 65039, pd = 1, Io = (n) => Array.from(n);
function js(n, t) {
  return n.P.has(t) || n.Q.has(t);
}
class qb extends Array {
  get is_emoji() {
    return !0;
  }
  // free tagging system
}
let Au, wd, Ri, Eu, dd, $i, Oa, qi, yi, X_, vu;
function $u() {
  if (Au) return;
  let n = ed(vb);
  const t = () => Ds(n), e = () => new Set(t()), r = (f, g) => g.forEach((y) => f.add(y));
  Au = new Map(nd(n)), wd = e(), Ri = t(), Eu = new Set(t().map((f) => Ri[f])), Ri = new Set(Ri), dd = e(), e();
  let i = rd(n), o = n();
  const a = () => {
    let f = /* @__PURE__ */ new Set();
    return t().forEach((g) => r(f, i[g])), r(f, t()), f;
  };
  $i = Us((f) => {
    let g = Us(n).map((y) => y + 96);
    if (g.length) {
      let y = f >= o;
      g[0] -= 32, g = cs(g), y && (g = `Restricted[${g}]`);
      let B = a(), I = a(), S = !n();
      return { N: g, P: B, Q: I, M: S, R: y };
    }
  }), Oa = e(), qi = /* @__PURE__ */ new Map();
  let u = t().concat(Io(Oa)).sort((f, g) => f - g);
  u.forEach((f, g) => {
    let y = n(), B = u[g] = y ? u[g - y] : { V: [], M: /* @__PURE__ */ new Map() };
    B.V.push(f), Oa.has(f) || qi.set(f, B);
  });
  for (let { V: f, M: g } of new Set(qi.values())) {
    let y = [];
    for (let I of f) {
      let S = $i.filter((A) => js(A, I)), T = y.find(({ G: A }) => S.some((R) => A.has(R)));
      T || (T = { G: /* @__PURE__ */ new Set(), V: [] }, y.push(T)), T.V.push(I), r(T.G, S);
    }
    let B = y.flatMap((I) => Io(I.G));
    for (let { G: I, V: S } of y) {
      let T = new Set(B.filter((A) => !I.has(A)));
      for (let A of S)
        g.set(A, T);
    }
  }
  yi = /* @__PURE__ */ new Set();
  let _ = /* @__PURE__ */ new Set();
  const l = (f) => yi.has(f) ? _.add(f) : yi.add(f);
  for (let f of $i) {
    for (let g of f.P) l(g);
    for (let g of f.Q) l(g);
  }
  for (let f of yi)
    !qi.has(f) && !_.has(f) && qi.set(f, pd);
  r(yi, fd(yi)), X_ = Fb(n).map((f) => qb.from(f)).sort(Tb), vu = /* @__PURE__ */ new Map();
  for (let f of X_) {
    let g = [vu];
    for (let y of f) {
      let B = g.map((I) => {
        let S = I.get(y);
        return S || (S = /* @__PURE__ */ new Map(), I.set(y, S)), S;
      });
      y === hd ? g.push(...B) : g = B;
    }
    for (let y of g)
      y.V = f;
  }
}
function Yu(n) {
  return (gd(n) ? "" : `${Zu(Ko([n]))} `) + sd(n);
}
function Zu(n) {
  return `"${n}"‎`;
}
function Qb(n) {
  if (n.length >= 4 && n[2] == Z_ && n[3] == Z_)
    throw new Error(`invalid label extension: "${cs(n.slice(0, 4))}"`);
}
function Kb(n) {
  for (let e = n.lastIndexOf(95); e > 0; )
    if (n[--e] !== 95)
      throw new Error("underscore allowed only at start");
}
function Wb(n) {
  let t = n[0], e = J_.get(t);
  if (e) throw Os(`leading ${e}`);
  let r = n.length, i = -1;
  for (let o = 1; o < r; o++) {
    t = n[o];
    let a = J_.get(t);
    if (a) {
      if (i == o) throw Os(`${e} + ${a}`);
      i = o + 1, e = a;
    }
  }
  if (i == r) throw Os(`trailing ${e}`);
}
function Ko(n, t = 1 / 0, e = sd) {
  let r = [];
  Jb(n[0]) && r.push("◌"), n.length > t && (t >>= 1, n = [...n.slice(0, t), 8230, ...n.slice(-t)]);
  let i = 0, o = n.length;
  for (let a = 0; a < o; a++) {
    let u = n[a];
    gd(u) && (r.push(cs(n.slice(i, a))), r.push(e(u)), i = a + 1);
  }
  return r.push(cs(n.slice(i, o))), r.join("");
}
function Jb(n) {
  return $u(), Ri.has(n);
}
function gd(n) {
  return $u(), dd.has(n);
}
function $b(n) {
  return t1(Yb(n, Vb, n1));
}
function Yb(n, t, e) {
  if (!n) return [];
  $u();
  let r = 0;
  return n.split(ld).map((i) => {
    let o = Ob(i), a = {
      input: o,
      offset: r
      // codepoint, not substring!
    };
    r += o.length + 1;
    try {
      let u = a.tokens = r1(o, t, e), _ = u.length, l;
      if (!_)
        throw new Error("empty label");
      let f = a.output = u.flat();
      if (Kb(f), !(a.emoji = _ > 1 || u[0].is_emoji) && f.every((y) => y < 128))
        Qb(f), l = "ASCII";
      else {
        let y = u.flatMap((B) => B.is_emoji ? [] : B);
        if (!y.length)
          l = "Emoji";
        else {
          if (Ri.has(f[0])) throw Os("leading combining mark");
          for (let S = 1; S < _; S++) {
            let T = u[S];
            if (!T.is_emoji && Ri.has(T[0]))
              throw Os(`emoji + combining mark: "${cs(u[S - 1])} + ${Ko([T[0]])}"`);
          }
          Wb(f);
          let B = Io(new Set(y)), [I] = Xb(B);
          e1(I, y), Zb(I, B), l = I.N;
        }
      }
      a.type = l;
    } catch (u) {
      a.error = u;
    }
    return a;
  });
}
function Zb(n, t) {
  let e, r = [];
  for (let i of t) {
    let o = qi.get(i);
    if (o === pd) return;
    if (o) {
      let a = o.M.get(i);
      if (e = e ? e.filter((u) => a.has(u)) : Io(a), !e.length) return;
    } else
      r.push(i);
  }
  if (e) {
    for (let i of e)
      if (r.every((o) => js(i, o)))
        throw new Error(`whole-script confusable: ${n.N}/${i.N}`);
  }
}
function Xb(n) {
  let t = $i;
  for (let e of n) {
    let r = t.filter((i) => js(i, e));
    if (!r.length)
      throw $i.some((i) => js(i, e)) ? bd(t[0], e) : yd(e);
    if (t = r, r.length == 1) break;
  }
  return t;
}
function t1(n) {
  return n.map(({ input: t, error: e, output: r }) => {
    if (e) {
      let i = e.message;
      throw new Error(n.length == 1 ? i : `Invalid label ${Zu(Ko(t, 63))}: ${i}`);
    }
    return cs(r);
  }).join(ld);
}
function yd(n) {
  return new Error(`disallowed character: ${Yu(n)}`);
}
function bd(n, t) {
  let e = Yu(t), r = $i.find((i) => i.P.has(t));
  return r && (e = `${r.N} ${e}`), new Error(`illegal mixture: ${n.N} + ${e}`);
}
function Os(n) {
  return new Error(`illegal placement: ${n}`);
}
function e1(n, t) {
  for (let e of t)
    if (!js(n, e))
      throw bd(n, e);
  if (n.M) {
    let e = fd(t);
    for (let r = 1, i = e.length; r < i; r++)
      if (Eu.has(e[r])) {
        let o = r + 1;
        for (let a; o < i && Eu.has(a = e[o]); o++)
          for (let u = r; u < o; u++)
            if (e[u] == a)
              throw new Error(`duplicate non-spacing marks: ${Yu(a)}`);
        if (o - r > $_)
          throw new Error(`excessive non-spacing marks: ${Zu(Ko(e.slice(r - 1, o)))} (${o - r}/${$_})`);
        r = o;
      }
  }
}
function r1(n, t, e) {
  let r = [], i = [];
  for (n = n.slice().reverse(); n.length; ) {
    let o = i1(n);
    if (o)
      i.length && (r.push(t(i)), i = []), r.push(e(o));
    else {
      let a = n.pop();
      if (yi.has(a))
        i.push(a);
      else {
        let u = Au.get(a);
        if (u)
          i.push(...u);
        else if (!wd.has(a))
          throw yd(a);
      }
    }
  }
  return i.length && r.push(t(i)), r;
}
function n1(n) {
  return n.filter((t) => t != hd);
}
function i1(n, t) {
  let e = vu, r, i = n.length;
  for (; i && (e = e.get(n[--i]), !!e); ) {
    let { V: o } = e;
    o && (r = o, n.length = i);
  }
  return r;
}
const md = new Uint8Array(32);
md.fill(0);
function tf(n) {
  return V(n.length !== 0, "invalid ENS name; empty component", "comp", n), n;
}
function Ad(n) {
  const t = Jn(s1(n)), e = [];
  if (n.length === 0)
    return e;
  let r = 0;
  for (let i = 0; i < t.length; i++)
    t[i] === 46 && (e.push(tf(t.slice(r, i))), r = i + 1);
  return V(r < t.length, "invalid ENS name; empty component", "name", n), e.push(tf(t.slice(r))), e;
}
function s1(n) {
  try {
    if (n.length === 0)
      throw new Error("empty label");
    return $b(n);
  } catch (t) {
    V(!1, `invalid ENS name (${t.message})`, "name", n);
  }
}
function xu(n) {
  V(typeof n == "string", "invalid ENS name; not a string", "name", n), V(n.length, "invalid ENS name (empty label)", "name", n);
  let t = md;
  const e = Ad(n);
  for (; e.length; )
    t = le(oe([t, le(e.pop())]));
  return gt(t);
}
function o1(n, t) {
  const e = t;
  return V(e <= 255, "DNS encoded label cannot exceed 255", "length", e), gt(oe(Ad(n).map((r) => {
    V(r.length <= e, `label ${JSON.stringify(n)} exceeds ${e} bytes`, "name", n);
    const i = new Uint8Array(r.length + 1);
    return i.set(r, 1), i[0] = i.length - 1, i;
  }))) + "00";
}
const Ed = new Uint8Array(32);
Ed.fill(0);
const a1 = BigInt(-1), vd = BigInt(0), xd = BigInt(1), c1 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function u1(n) {
  const t = Ot(n), e = t.length % 32;
  return e ? oe([t, Ed.slice(e)]) : gt(t);
}
const _1 = _i(xd, 32), f1 = _i(vd, 32), ef = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
}, Ta = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function rf(n) {
  return function(t) {
    return V(typeof t == "string", `invalid domain value for ${JSON.stringify(n)}`, `domain.${n}`, t), t;
  };
}
const l1 = {
  name: rf("name"),
  version: rf("version"),
  chainId: function(n) {
    const t = mt(n, "domain.chainId");
    return V(t >= 0, "invalid chain ID", "domain.chainId", n), Number.isSafeInteger(t) ? Number(t) : Ke(t);
  },
  verifyingContract: function(n) {
    try {
      return Ut(n).toLowerCase();
    } catch {
    }
    V(!1, 'invalid domain value "verifyingContract"', "domain.verifyingContract", n);
  },
  salt: function(n) {
    const t = Ot(n, "domain.salt");
    return V(t.length === 32, 'invalid domain value "salt"', "domain.salt", n), gt(t);
  }
};
function Ca(n) {
  {
    const t = n.match(/^(u?)int(\d+)$/);
    if (t) {
      const e = t[1] === "", r = parseInt(t[2]);
      V(r % 8 === 0 && r !== 0 && r <= 256 && t[2] === String(r), "invalid numeric width", "type", n);
      const i = zs(c1, e ? r - 1 : r), o = e ? (i + xd) * a1 : vd;
      return function(a) {
        const u = mt(a, "value");
        return V(u >= o && u <= i, `value out-of-bounds for ${n}`, "value", u), _i(e ? _w(u, 256) : u, 32);
      };
    }
  }
  {
    const t = n.match(/^bytes(\d+)$/);
    if (t) {
      const e = parseInt(t[1]);
      return V(e !== 0 && e <= 32 && t[1] === String(e), "invalid bytes width", "type", n), function(r) {
        const i = Ot(r);
        return V(i.length === e, `invalid length for ${n}`, "value", r), u1(r);
      };
    }
  }
  switch (n) {
    case "address":
      return function(t) {
        return Yn(Ut(t), 32);
      };
    case "bool":
      return function(t) {
        return t ? _1 : f1;
      };
    case "bytes":
      return function(t) {
        return le(t);
      };
    case "string":
      return function(t) {
        return Ii(t);
      };
  }
  return null;
}
function nf(n, t) {
  return `${n}(${t.map(({ name: e, type: r }) => r + " " + e).join(",")})`;
}
function uo(n) {
  const t = n.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
  return t ? {
    base: t[1],
    index: t[2] + t[4],
    array: {
      base: t[1],
      prefix: t[1] + t[2],
      count: t[5] ? parseInt(t[5]) : -1
    }
  } : { base: n };
}
class ke {
  /**
   *  The primary type for the structured [[types]].
   *
   *  This is derived automatically from the [[types]], since no
   *  recursion is possible, once the DAG for the types is consturcted
   *  internally, the primary type must be the only remaining type with
   *  no parent nodes.
   */
  primaryType;
  #t;
  /**
   *  The types.
   */
  get types() {
    return JSON.parse(this.#t);
  }
  #e;
  #r;
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   *
   *  This performs all necessary checking that types are valid and
   *  do not violate the [[link-eip-712]] structural constraints as
   *  well as computes the [[primaryType]].
   */
  constructor(t) {
    this.#e = /* @__PURE__ */ new Map(), this.#r = /* @__PURE__ */ new Map();
    const e = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map(), o = {};
    Object.keys(t).forEach((_) => {
      o[_] = t[_].map(({ name: l, type: f }) => {
        let { base: g, index: y } = uo(f);
        return g === "int" && !t.int && (g = "int256"), g === "uint" && !t.uint && (g = "uint256"), { name: l, type: g + (y || "") };
      }), e.set(_, /* @__PURE__ */ new Set()), r.set(_, []), i.set(_, /* @__PURE__ */ new Set());
    }), this.#t = JSON.stringify(o);
    for (const _ in o) {
      const l = /* @__PURE__ */ new Set();
      for (const f of o[_]) {
        V(!l.has(f.name), `duplicate variable name ${JSON.stringify(f.name)} in ${JSON.stringify(_)}`, "types", t), l.add(f.name);
        const g = uo(f.type).base;
        V(g !== _, `circular type reference to ${JSON.stringify(g)}`, "types", t), !Ca(g) && (V(r.has(g), `unknown type ${JSON.stringify(g)}`, "types", t), r.get(g).push(_), e.get(_).add(g));
      }
    }
    const a = Array.from(r.keys()).filter((_) => r.get(_).length === 0);
    V(a.length !== 0, "missing primary type", "types", t), V(a.length === 1, `ambiguous primary types or unused types: ${a.map((_) => JSON.stringify(_)).join(", ")}`, "types", t), zt(this, { primaryType: a[0] });
    function u(_, l) {
      V(!l.has(_), `circular type reference to ${JSON.stringify(_)}`, "types", t), l.add(_);
      for (const f of e.get(_))
        if (r.has(f)) {
          u(f, l);
          for (const g of l)
            i.get(g).add(f);
        }
      l.delete(_);
    }
    u(this.primaryType, /* @__PURE__ */ new Set());
    for (const [_, l] of i) {
      const f = Array.from(l);
      f.sort(), this.#e.set(_, nf(_, o[_]) + f.map((g) => nf(g, o[g])).join(""));
    }
  }
  /**
   *  Returnthe encoder for the specific %%type%%.
   */
  getEncoder(t) {
    let e = this.#r.get(t);
    return e || (e = this.#n(t), this.#r.set(t, e)), e;
  }
  #n(t) {
    {
      const i = Ca(t);
      if (i)
        return i;
    }
    const e = uo(t).array;
    if (e) {
      const i = e.prefix, o = this.getEncoder(i);
      return (a) => {
        V(e.count === -1 || e.count === a.length, `array length mismatch; expected length ${e.count}`, "value", a);
        let u = a.map(o);
        return this.#e.has(i) && (u = u.map(le)), le(oe(u));
      };
    }
    const r = this.types[t];
    if (r) {
      const i = Ii(this.#e.get(t));
      return (o) => {
        const a = r.map(({ name: u, type: _ }) => {
          const l = this.getEncoder(_)(o[u]);
          return this.#e.has(_) ? le(l) : l;
        });
        return a.unshift(i), oe(a);
      };
    }
    V(!1, `unknown type: ${t}`, "type", t);
  }
  /**
   *  Return the full type for %%name%%.
   */
  encodeType(t) {
    const e = this.#e.get(t);
    return V(e, `unknown type: ${JSON.stringify(t)}`, "name", t), e;
  }
  /**
   *  Return the encoded %%value%% for the %%type%%.
   */
  encodeData(t, e) {
    return this.getEncoder(t)(e);
  }
  /**
   *  Returns the hash of %%value%% for the type of %%name%%.
   */
  hashStruct(t, e) {
    return le(this.encodeData(t, e));
  }
  /**
   *  Return the fulled encoded %%value%% for the [[types]].
   */
  encode(t) {
    return this.encodeData(this.primaryType, t);
  }
  /**
   *  Return the hash of the fully encoded %%value%% for the [[types]].
   */
  hash(t) {
    return this.hashStruct(this.primaryType, t);
  }
  /**
   *  @_ignore:
   */
  _visit(t, e, r) {
    if (Ca(t))
      return r(t, e);
    const i = uo(t).array;
    if (i)
      return V(i.count === -1 || i.count === e.length, `array length mismatch; expected length ${i.count}`, "value", e), e.map((a) => this._visit(i.prefix, a, r));
    const o = this.types[t];
    if (o)
      return o.reduce((a, { name: u, type: _ }) => (a[u] = this._visit(_, e[u], r), a), {});
    V(!1, `unknown type: ${t}`, "type", t);
  }
  /**
   *  Call %%calback%% for each value in %%value%%, passing the type and
   *  component within %%value%%.
   *
   *  This is useful for replacing addresses or other transformation that
   *  may be desired on each component, based on its type.
   */
  visit(t, e) {
    return this._visit(this.primaryType, t, e);
  }
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   */
  static from(t) {
    return new ke(t);
  }
  /**
   *  Return the primary type for %%types%%.
   */
  static getPrimaryType(t) {
    return ke.from(t).primaryType;
  }
  /**
   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
   */
  static hashStruct(t, e, r) {
    return ke.from(e).hashStruct(t, r);
  }
  /**
   *  Return the domain hash for %%domain%%.
   */
  static hashDomain(t) {
    const e = [];
    for (const r in t) {
      if (t[r] == null)
        continue;
      const i = ef[r];
      V(i, `invalid typed-data domain key: ${JSON.stringify(r)}`, "domain", t), e.push({ name: r, type: i });
    }
    return e.sort((r, i) => Ta.indexOf(r.name) - Ta.indexOf(i.name)), ke.hashStruct("EIP712Domain", { EIP712Domain: e }, t);
  }
  /**
   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static encode(t, e, r) {
    return oe([
      "0x1901",
      ke.hashDomain(t),
      ke.from(e).hash(r)
    ]);
  }
  /**
   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static hash(t, e, r) {
    return le(ke.encode(t, e, r));
  }
  // Replaces all address types with ENS names with their looked up address
  /**
   * Resolves to the value from resolving all addresses in %%value%% for
   * %%types%% and the %%domain%%.
   */
  static async resolveNames(t, e, r, i) {
    t = Object.assign({}, t);
    for (const u in t)
      t[u] == null && delete t[u];
    const o = {};
    t.verifyingContract && !Xt(t.verifyingContract, 20) && (o[t.verifyingContract] = "0x");
    const a = ke.from(e);
    a.visit(r, (u, _) => (u === "address" && !Xt(_, 20) && (o[_] = "0x"), _));
    for (const u in o)
      o[u] = await i(u);
    return t.verifyingContract && o[t.verifyingContract] && (t.verifyingContract = o[t.verifyingContract]), r = a.visit(r, (u, _) => u === "address" && o[_] ? o[_] : _), { domain: t, value: r };
  }
  /**
   *  Returns the JSON-encoded payload expected by nodes which implement
   *  the JSON-RPC [[link-eip-712]] method.
   */
  static getPayload(t, e, r) {
    ke.hashDomain(t);
    const i = {}, o = [];
    Ta.forEach((_) => {
      const l = t[_];
      l != null && (i[_] = l1[_](l), o.push({ name: _, type: ef[_] }));
    });
    const a = ke.from(e);
    e = a.types;
    const u = Object.assign({}, e);
    return V(u.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", e), u.EIP712Domain = o, a.encode(r), {
      types: u,
      domain: i,
      primaryType: a.primaryType,
      message: a.visit(r, (_, l) => {
        if (_.match(/^bytes(\d*)/))
          return gt(Ot(l));
        if (_.match(/^u?int/))
          return mt(l).toString();
        switch (_) {
          case "address":
            return l.toLowerCase();
          case "bool":
            return !!l;
          case "string":
            return V(typeof l == "string", "invalid string", "value", l), l;
        }
        V(!1, "unsupported type", "type", _);
      })
    };
  }
}
function Rd(n, t, e, r) {
  return td(ke.hash(n, t, e), r);
}
function Be(n) {
  const t = /* @__PURE__ */ new Set();
  return n.forEach((e) => t.add(e)), Object.freeze(t);
}
const h1 = "external public payable override", p1 = Be(h1.split(" ")), zd = "constant external internal payable private public pure view override", w1 = Be(zd.split(" ")), Bd = "constructor error event fallback function receive struct", Sd = Be(Bd.split(" ")), Pd = "calldata memory storage payable indexed", d1 = Be(Pd.split(" ")), g1 = "tuple returns", y1 = [Bd, Pd, g1, zd].join(" "), b1 = Be(y1.split(" ")), m1 = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
}, A1 = new RegExp("^(\\s*)"), E1 = new RegExp("^([0-9]+)"), v1 = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), kd = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), Fd = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
class Ve {
  #t;
  #e;
  get offset() {
    return this.#t;
  }
  get length() {
    return this.#e.length - this.#t;
  }
  constructor(t) {
    this.#t = 0, this.#e = t.slice();
  }
  clone() {
    return new Ve(this.#e);
  }
  reset() {
    this.#t = 0;
  }
  #r(t = 0, e = 0) {
    return new Ve(this.#e.slice(t, e).map((r) => Object.freeze(Object.assign({}, r, {
      match: r.match - t,
      linkBack: r.linkBack - t,
      linkNext: r.linkNext - t
    }))));
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(t) {
    const e = this.peek();
    if (e.type !== "KEYWORD" || !t.has(e.text))
      throw new Error(`expected keyword ${e.text}`);
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(t) {
    if (this.peek().type !== t) {
      const e = this.peek();
      throw new Error(`expected ${t}; got ${e.type} ${JSON.stringify(e.text)}`);
    }
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const t = this.peek();
    if (t.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const e = this.#r(this.#t + 1, t.match + 1);
    return this.#t = t.match + 1, e;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const t = this.peek();
    if (t.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const e = [];
    for (; this.#t < t.match - 1; ) {
      const r = this.peek().linkNext;
      e.push(this.#r(this.#t + 1, r)), this.#t = r;
    }
    return this.#t = t.match + 1, e;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (this.#t >= this.#e.length)
      throw new Error("out-of-bounds");
    return this.#e[this.#t];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(t) {
    const e = this.peekType("KEYWORD");
    return e != null && t.has(e) ? e : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(t) {
    if (this.length === 0)
      return null;
    const e = this.peek();
    return e.type === t ? e.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const t = this.peek();
    return this.#t++, t;
  }
  toString() {
    const t = [];
    for (let e = this.#t; e < this.#e.length; e++) {
      const r = this.#e[e];
      t.push(`${r.type}:${r.text}`);
    }
    return `<TokenString ${t.join(" ")}>`;
  }
}
function hi(n) {
  const t = [], e = (a) => {
    const u = o < n.length ? JSON.stringify(n[o]) : "$EOI";
    throw new Error(`invalid token ${u} at ${o}: ${a}`);
  };
  let r = [], i = [], o = 0;
  for (; o < n.length; ) {
    let a = n.substring(o), u = a.match(A1);
    u && (o += u[1].length, a = n.substring(o));
    const _ = { depth: r.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: o, value: -1 };
    t.push(_);
    let l = m1[a[0]] || "";
    if (l) {
      if (_.type = l, _.text = a[0], o++, l === "OPEN_PAREN")
        r.push(t.length - 1), i.push(t.length - 1);
      else if (l == "CLOSE_PAREN")
        r.length === 0 && e("no matching open bracket"), _.match = r.pop(), t[_.match].match = t.length - 1, _.depth--, _.linkBack = i.pop(), t[_.linkBack].linkNext = t.length - 1;
      else if (l === "COMMA")
        _.linkBack = i.pop(), t[_.linkBack].linkNext = t.length - 1, i.push(t.length - 1);
      else if (l === "OPEN_BRACKET")
        _.type = "BRACKET";
      else if (l === "CLOSE_BRACKET") {
        let f = t.pop().text;
        if (t.length > 0 && t[t.length - 1].type === "NUMBER") {
          const g = t.pop().text;
          f = g + f, t[t.length - 1].value = Tt(g);
        }
        if (t.length === 0 || t[t.length - 1].type !== "BRACKET")
          throw new Error("missing opening bracket");
        t[t.length - 1].text += f;
      }
      continue;
    }
    if (u = a.match(v1), u) {
      if (_.text = u[1], o += _.text.length, b1.has(_.text)) {
        _.type = "KEYWORD";
        continue;
      }
      if (_.text.match(Fd)) {
        _.type = "TYPE";
        continue;
      }
      _.type = "ID";
      continue;
    }
    if (u = a.match(E1), u) {
      _.text = u[1], _.type = "NUMBER", o += _.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(a[0])} at position ${o}`);
  }
  return new Ve(t.map((a) => Object.freeze(a)));
}
function sf(n, t) {
  let e = [];
  for (const r in t.keys())
    n.has(r) && e.push(r);
  if (e.length > 1)
    throw new Error(`conflicting types: ${e.join(", ")}`);
}
function Wo(n, t) {
  if (t.peekKeyword(Sd)) {
    const e = t.pop().text;
    if (e !== n)
      throw new Error(`expected ${n}, got ${e}`);
  }
  return t.popType("ID");
}
function Zn(n, t) {
  const e = /* @__PURE__ */ new Set();
  for (; ; ) {
    const r = n.peekType("KEYWORD");
    if (r == null || t && !t.has(r))
      break;
    if (n.pop(), e.has(r))
      throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);
    e.add(r);
  }
  return Object.freeze(e);
}
function Id(n) {
  let t = Zn(n, w1);
  return sf(t, Be("constant payable nonpayable".split(" "))), sf(t, Be("pure view payable nonpayable".split(" "))), t.has("view") ? "view" : t.has("pure") ? "pure" : t.has("payable") ? "payable" : t.has("nonpayable") ? "nonpayable" : t.has("constant") ? "view" : "nonpayable";
}
function $n(n, t) {
  return n.popParams().map((e) => Zt.from(e, t));
}
function Od(n) {
  if (n.peekType("AT")) {
    if (n.pop(), n.peekType("NUMBER"))
      return mt(n.pop().text);
    throw new Error("invalid gas");
  }
  return null;
}
function Oi(n) {
  if (n.length)
    throw new Error(`unexpected tokens at offset ${n.offset}: ${n.toString()}`);
}
const x1 = new RegExp(/^(.*)\[([0-9]*)\]$/);
function of(n) {
  const t = n.match(Fd);
  if (V(t, "invalid type", "type", n), n === "uint")
    return "uint256";
  if (n === "int")
    return "int256";
  if (t[2]) {
    const e = parseInt(t[2]);
    V(e !== 0 && e <= 32, "invalid bytes length", "type", n);
  } else if (t[3]) {
    const e = parseInt(t[3]);
    V(e !== 0 && e <= 256 && e % 8 === 0, "invalid numeric width", "type", n);
  }
  return n;
}
const re = {}, Oe = Symbol.for("_ethers_internal"), af = "_ParamTypeInternal", cf = "_ErrorInternal", uf = "_EventInternal", _f = "_ConstructorInternal", ff = "_FallbackInternal", lf = "_FunctionInternal", hf = "_StructInternal";
class Zt {
  /**
   *  The local name of the parameter (or ``""`` if unbound)
   */
  name;
  /**
   *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
   *  ``"uint256[3][]"``)
   */
  type;
  /**
   *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
   */
  baseType;
  /**
   *  True if the parameters is indexed.
   *
   *  For non-indexable types this is ``null``.
   */
  indexed;
  /**
   *  The components for the tuple.
   *
   *  For non-tuple types this is ``null``.
   */
  components;
  /**
   *  The array length, or ``-1`` for dynamic-lengthed arrays.
   *
   *  For non-array types this is ``null``.
   */
  arrayLength;
  /**
   *  The type of each child in the array.
   *
   *  For non-array types this is ``null``.
   */
  arrayChildren;
  /**
   *  @private
   */
  constructor(t, e, r, i, o, a, u, _) {
    if (Do(t, re, "ParamType"), Object.defineProperty(this, Oe, { value: af }), a && (a = Object.freeze(a.slice())), i === "array") {
      if (u == null || _ == null)
        throw new Error("");
    } else if (u != null || _ != null)
      throw new Error("");
    if (i === "tuple") {
      if (a == null)
        throw new Error("");
    } else if (a != null)
      throw new Error("");
    zt(this, {
      name: e,
      type: r,
      baseType: i,
      indexed: o,
      components: a,
      arrayLength: u,
      arrayChildren: _
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json") {
      const r = this.name || "";
      if (this.isArray()) {
        const o = JSON.parse(this.arrayChildren.format("json"));
        return o.name = r, o.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`, JSON.stringify(o);
      }
      const i = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: r
      };
      return typeof this.indexed == "boolean" && (i.indexed = this.indexed), this.isTuple() && (i.components = this.components.map((o) => JSON.parse(o.format(t)))), JSON.stringify(i);
    }
    let e = "";
    return this.isArray() ? (e += this.arrayChildren.format(t), e += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`) : this.isTuple() ? e += "(" + this.components.map((r) => r.format(t)).join(t === "full" ? ", " : ",") + ")" : e += this.type, t !== "sighash" && (this.indexed === !0 && (e += " indexed"), t === "full" && this.name && (e += " " + this.name)), e;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(t, e) {
    if (this.isArray()) {
      if (!Array.isArray(t))
        throw new Error("invalid array value");
      if (this.arrayLength !== -1 && t.length !== this.arrayLength)
        throw new Error("array is wrong length");
      const r = this;
      return t.map((i) => r.arrayChildren.walk(i, e));
    }
    if (this.isTuple()) {
      if (!Array.isArray(t))
        throw new Error("invalid tuple value");
      if (t.length !== this.components.length)
        throw new Error("array is wrong length");
      const r = this;
      return t.map((i, o) => r.components[o].walk(i, e));
    }
    return e(this.type, t);
  }
  #t(t, e, r, i) {
    if (this.isArray()) {
      if (!Array.isArray(e))
        throw new Error("invalid array value");
      if (this.arrayLength !== -1 && e.length !== this.arrayLength)
        throw new Error("array is wrong length");
      const a = this.arrayChildren, u = e.slice();
      u.forEach((_, l) => {
        a.#t(t, _, r, (f) => {
          u[l] = f;
        });
      }), i(u);
      return;
    }
    if (this.isTuple()) {
      const a = this.components;
      let u;
      if (Array.isArray(e))
        u = e.slice();
      else {
        if (e == null || typeof e != "object")
          throw new Error("invalid tuple value");
        u = a.map((_) => {
          if (!_.name)
            throw new Error("cannot use object value with unnamed components");
          if (!(_.name in e))
            throw new Error(`missing value for component ${_.name}`);
          return e[_.name];
        });
      }
      if (u.length !== this.components.length)
        throw new Error("array is wrong length");
      u.forEach((_, l) => {
        a[l].#t(t, _, r, (f) => {
          u[l] = f;
        });
      }), i(u);
      return;
    }
    const o = r(this.type, e);
    o.then ? t.push(async function() {
      i(await o);
    }()) : i(o);
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS names by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(t, e) {
    const r = [], i = [t];
    return this.#t(r, t, e, (o) => {
      i[0] = o;
    }), r.length && await Promise.all(r), i[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(t, e) {
    if (Zt.isParamType(t))
      return t;
    if (typeof t == "string")
      try {
        return Zt.from(hi(t), e);
      } catch {
        V(!1, "invalid param type", "obj", t);
      }
    else if (t instanceof Ve) {
      let u = "", _ = "", l = null;
      Zn(t, Be(["tuple"])).has("tuple") || t.peekType("OPEN_PAREN") ? (_ = "tuple", l = t.popParams().map((S) => Zt.from(S)), u = `tuple(${l.map((S) => S.format()).join(",")})`) : (u = of(t.popType("TYPE")), _ = u);
      let f = null, g = null;
      for (; t.length && t.peekType("BRACKET"); ) {
        const S = t.pop();
        f = new Zt(re, "", u, _, null, l, g, f), g = S.value, u += S.text, _ = "array", l = null;
      }
      let y = null;
      if (Zn(t, d1).has("indexed")) {
        if (!e)
          throw new Error("");
        y = !0;
      }
      const I = t.peekType("ID") ? t.pop().text : "";
      if (t.length)
        throw new Error("leftover tokens");
      return new Zt(re, I, u, _, y, l, g, f);
    }
    const r = t.name;
    V(!r || typeof r == "string" && r.match(kd), "invalid name", "obj.name", r);
    let i = t.indexed;
    i != null && (V(e, "parameter cannot be indexed", "obj.indexed", t.indexed), i = !!i);
    let o = t.type, a = o.match(x1);
    if (a) {
      const u = parseInt(a[2] || "-1"), _ = Zt.from({
        type: a[1],
        components: t.components
      });
      return new Zt(re, r || "", o, "array", i, null, u, _);
    }
    if (o === "tuple" || o.startsWith(
      "tuple("
      /* fix: ) */
    ) || o.startsWith(
      "("
      /* fix: ) */
    )) {
      const u = t.components != null ? t.components.map((l) => Zt.from(l)) : null;
      return new Zt(re, r || "", o, "tuple", i, u, null, null);
    }
    return o = of(t.type), new Zt(re, r || "", o, o, i, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(t) {
    return t && t[Oe] === af;
  }
}
class Ti {
  /**
   *  The type of the fragment.
   */
  type;
  /**
   *  The inputs for the fragment.
   */
  inputs;
  /**
   *  @private
   */
  constructor(t, e, r) {
    Do(t, re, "Fragment"), r = Object.freeze(r.slice()), zt(this, { type: e, inputs: r });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(t) {
    if (typeof t == "string") {
      try {
        Ti.from(JSON.parse(t));
      } catch {
      }
      return Ti.from(hi(t));
    }
    if (t instanceof Ve)
      switch (t.peekKeyword(Sd)) {
        case "constructor":
          return Kn.from(t);
        case "error":
          return Ie.from(t);
        case "event":
          return cr.from(t);
        case "fallback":
        case "receive":
          return hr.from(t);
        case "function":
          return ur.from(t);
        case "struct":
          return ki.from(t);
      }
    else if (typeof t == "object") {
      switch (t.type) {
        case "constructor":
          return Kn.from(t);
        case "error":
          return Ie.from(t);
        case "event":
          return cr.from(t);
        case "fallback":
        case "receive":
          return hr.from(t);
        case "function":
          return ur.from(t);
        case "struct":
          return ki.from(t);
      }
      _t(!1, `unsupported type: ${t.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    V(!1, "unsupported frgament object", "obj", t);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(t) {
    return Kn.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(t) {
    return Ie.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(t) {
    return cr.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(t) {
    return ur.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(t) {
    return ki.isFragment(t);
  }
}
class Jo extends Ti {
  /**
   *  The name of the fragment.
   */
  name;
  /**
   *  @private
   */
  constructor(t, e, r, i) {
    super(t, e, i), V(typeof r == "string" && r.match(kd), "invalid identifier", "name", r), i = Object.freeze(i.slice()), zt(this, { name: r });
  }
}
function Gs(n, t) {
  return "(" + t.map((e) => e.format(n)).join(n === "full" ? ", " : ",") + ")";
}
class Ie extends Jo {
  /**
   *  @private
   */
  constructor(t, e, r) {
    super(t, "error", e, r), Object.defineProperty(this, Oe, { value: cf });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return Ii(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((r) => JSON.parse(r.format(t)))
      });
    const e = [];
    return t !== "sighash" && e.push("error"), e.push(this.name + Gs(t, this.inputs)), e.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(t) {
    if (Ie.isFragment(t))
      return t;
    if (typeof t == "string")
      return Ie.from(hi(t));
    if (t instanceof Ve) {
      const e = Wo("error", t), r = $n(t);
      return Oi(t), new Ie(re, e, r);
    }
    return new Ie(re, t.name, t.inputs ? t.inputs.map(Zt.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(t) {
    return t && t[Oe] === cf;
  }
}
class cr extends Jo {
  /**
   *  Whether this event is anonymous.
   */
  anonymous;
  /**
   *  @private
   */
  constructor(t, e, r, i) {
    super(t, "event", e, r), Object.defineProperty(this, Oe, { value: uf }), zt(this, { anonymous: i });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return Ii(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((r) => JSON.parse(r.format(t)))
      });
    const e = [];
    return t !== "sighash" && e.push("event"), e.push(this.name + Gs(t, this.inputs)), t !== "sighash" && this.anonymous && e.push("anonymous"), e.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(t, e) {
    return e = (e || []).map((i) => Zt.from(i)), new cr(re, t, e, !1).topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(t) {
    if (cr.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return cr.from(hi(t));
      } catch {
        V(!1, "invalid event fragment", "obj", t);
      }
    else if (t instanceof Ve) {
      const e = Wo("event", t), r = $n(t, !0), i = !!Zn(t, Be(["anonymous"])).has("anonymous");
      return Oi(t), new cr(re, e, r, i);
    }
    return new cr(re, t.name, t.inputs ? t.inputs.map((e) => Zt.from(e, !0)) : [], !!t.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(t) {
    return t && t[Oe] === uf;
  }
}
class Kn extends Ti {
  /**
   *  Whether the constructor can receive an endowment.
   */
  payable;
  /**
   *  The recommended gas limit for deployment or ``null``.
   */
  gas;
  /**
   *  @private
   */
  constructor(t, e, r, i, o) {
    super(t, e, r), Object.defineProperty(this, Oe, { value: _f }), zt(this, { payable: i, gas: o });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(t) {
    if (_t(t != null && t !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" }), t === "json")
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((r) => JSON.parse(r.format(t)))
      });
    const e = [`constructor${Gs(t, this.inputs)}`];
    return this.payable && e.push("payable"), this.gas != null && e.push(`@${this.gas.toString()}`), e.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(t) {
    if (Kn.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return Kn.from(hi(t));
      } catch {
        V(!1, "invalid constuctor fragment", "obj", t);
      }
    else if (t instanceof Ve) {
      Zn(t, Be(["constructor"]));
      const e = $n(t), r = !!Zn(t, p1).has("payable"), i = Od(t);
      return Oi(t), new Kn(re, "constructor", e, r, i);
    }
    return new Kn(re, "constructor", t.inputs ? t.inputs.map(Zt.from) : [], !!t.payable, t.gas != null ? t.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(t) {
    return t && t[Oe] === _f;
  }
}
class hr extends Ti {
  /**
   *  If the function can be sent value during invocation.
   */
  payable;
  constructor(t, e, r) {
    super(t, "fallback", e), Object.defineProperty(this, Oe, { value: ff }), zt(this, { payable: r });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(t) {
    const e = this.inputs.length === 0 ? "receive" : "fallback";
    if (t === "json") {
      const r = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type: e, stateMutability: r });
    }
    return `${e}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(t) {
    if (hr.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return hr.from(hi(t));
      } catch {
        V(!1, "invalid fallback fragment", "obj", t);
      }
    else if (t instanceof Ve) {
      const e = t.toString(), r = t.peekKeyword(Be(["fallback", "receive"]));
      if (V(r, "type must be fallback or receive", "obj", e), t.popKeyword(Be(["fallback", "receive"])) === "receive") {
        const u = $n(t);
        return V(u.length === 0, "receive cannot have arguments", "obj.inputs", u), Zn(t, Be(["payable"])), Oi(t), new hr(re, [], !0);
      }
      let o = $n(t);
      o.length ? V(o.length === 1 && o[0].type === "bytes", "invalid fallback inputs", "obj.inputs", o.map((u) => u.format("minimal")).join(", ")) : o = [Zt.from("bytes")];
      const a = Id(t);
      if (V(a === "nonpayable" || a === "payable", "fallback cannot be constants", "obj.stateMutability", a), Zn(t, Be(["returns"])).has("returns")) {
        const u = $n(t);
        V(u.length === 1 && u[0].type === "bytes", "invalid fallback outputs", "obj.outputs", u.map((_) => _.format("minimal")).join(", "));
      }
      return Oi(t), new hr(re, o, a === "payable");
    }
    if (t.type === "receive")
      return new hr(re, [], !0);
    if (t.type === "fallback") {
      const e = [Zt.from("bytes")], r = t.stateMutability === "payable";
      return new hr(re, e, r);
    }
    V(!1, "invalid fallback description", "obj", t);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(t) {
    return t && t[Oe] === ff;
  }
}
class ur extends Jo {
  /**
   *  If the function is constant (e.g. ``pure`` or ``view`` functions).
   */
  constant;
  /**
   *  The returned types for the result of calling this function.
   */
  outputs;
  /**
   *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
   *  or ``pure``)
   */
  stateMutability;
  /**
   *  If the function can be sent value during invocation.
   */
  payable;
  /**
   *  The recommended gas limit to send when calling this function.
   */
  gas;
  /**
   *  @private
   */
  constructor(t, e, r, i, o, a) {
    super(t, "function", e, i), Object.defineProperty(this, Oe, { value: lf }), o = Object.freeze(o.slice()), zt(this, { constant: r === "view" || r === "pure", gas: a, outputs: o, payable: r === "payable", stateMutability: r });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return Ii(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((r) => JSON.parse(r.format(t))),
        outputs: this.outputs.map((r) => JSON.parse(r.format(t)))
      });
    const e = [];
    return t !== "sighash" && e.push("function"), e.push(this.name + Gs(t, this.inputs)), t !== "sighash" && (this.stateMutability !== "nonpayable" && e.push(this.stateMutability), this.outputs && this.outputs.length && (e.push("returns"), e.push(Gs(t, this.outputs))), this.gas != null && e.push(`@${this.gas.toString()}`)), e.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(t, e) {
    return e = (e || []).map((i) => Zt.from(i)), new ur(re, t, "view", e, [], null).selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(t) {
    if (ur.isFragment(t))
      return t;
    if (typeof t == "string")
      try {
        return ur.from(hi(t));
      } catch {
        V(!1, "invalid function fragment", "obj", t);
      }
    else if (t instanceof Ve) {
      const r = Wo("function", t), i = $n(t), o = Id(t);
      let a = [];
      Zn(t, Be(["returns"])).has("returns") && (a = $n(t));
      const u = Od(t);
      return Oi(t), new ur(re, r, o, i, a, u);
    }
    let e = t.stateMutability;
    return e == null && (e = "payable", typeof t.constant == "boolean" ? (e = "view", t.constant || (e = "payable", typeof t.payable == "boolean" && !t.payable && (e = "nonpayable"))) : typeof t.payable == "boolean" && !t.payable && (e = "nonpayable")), new ur(re, t.name, e, t.inputs ? t.inputs.map(Zt.from) : [], t.outputs ? t.outputs.map(Zt.from) : [], t.gas != null ? t.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(t) {
    return t && t[Oe] === lf;
  }
}
class ki extends Jo {
  /**
   *  @private
   */
  constructor(t, e, r) {
    super(t, "struct", e, r), Object.defineProperty(this, Oe, { value: hf });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(t) {
    if (typeof t == "string")
      try {
        return ki.from(hi(t));
      } catch {
        V(!1, "invalid struct fragment", "obj", t);
      }
    else if (t instanceof Ve) {
      const e = Wo("struct", t), r = $n(t);
      return Oi(t), new ki(re, e, r);
    }
    return new ki(re, t.name, t.inputs ? t.inputs.map(Zt.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(t) {
    return t && t[Oe] === hf;
  }
}
const er = /* @__PURE__ */ new Map();
er.set(0, "GENERIC_PANIC");
er.set(1, "ASSERT_FALSE");
er.set(17, "OVERFLOW");
er.set(18, "DIVIDE_BY_ZERO");
er.set(33, "ENUM_RANGE_ERROR");
er.set(34, "BAD_STORAGE_DATA");
er.set(49, "STACK_UNDERFLOW");
er.set(50, "ARRAY_RANGE_ERROR");
er.set(65, "OUT_OF_MEMORY");
er.set(81, "UNINITIALIZED_FUNCTION_CALL");
const R1 = new RegExp(/^bytes([0-9]*)$/), z1 = new RegExp(/^(u?int)([0-9]*)$/);
let Na = null, pf = 1024;
function B1(n, t, e, r) {
  let i = "missing revert data", o = null;
  const a = null;
  let u = null;
  if (e) {
    i = "execution reverted";
    const l = Ot(e);
    if (e = gt(e), l.length === 0)
      i += " (no data present; likely require(false) occurred", o = "require(false)";
    else if (l.length % 32 !== 4)
      i += " (could not decode reason; invalid data length)";
    else if (gt(l.slice(0, 4)) === "0x08c379a0")
      try {
        o = r.decode(["string"], l.slice(4))[0], u = {
          signature: "Error(string)",
          name: "Error",
          args: [o]
        }, i += `: ${JSON.stringify(o)}`;
      } catch {
        i += " (could not decode reason; invalid string data)";
      }
    else if (gt(l.slice(0, 4)) === "0x4e487b71")
      try {
        const f = Number(r.decode(["uint256"], l.slice(4))[0]);
        u = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [f]
        }, o = `Panic due to ${er.get(f) || "UNKNOWN"}(${f})`, i += `: ${o}`;
      } catch {
        i += " (could not decode panic code)";
      }
    else
      i += " (unknown custom error)";
  }
  const _ = {
    to: t.to ? Ut(t.to) : null,
    data: t.data || "0x"
  };
  return t.from && (_.from = Ut(t.from)), te(i, "CALL_EXCEPTION", {
    action: n,
    data: e,
    reason: o,
    transaction: _,
    invocation: a,
    revert: u
  });
}
class Ci {
  #t(t) {
    if (t.isArray())
      return new Qy(this.#t(t.arrayChildren), t.arrayLength, t.name);
    if (t.isTuple())
      return new co(t.components.map((r) => this.#t(r)), t.name);
    switch (t.baseType) {
      case "address":
        return new Vy(t.name);
      case "bool":
        return new Ky(t.name);
      case "string":
        return new rb(t.name);
      case "bytes":
        return new Wy(t.name);
      case "":
        return new Yy(t.name);
    }
    let e = t.type.match(z1);
    if (e) {
      let r = parseInt(e[2] || "256");
      return V(r !== 0 && r <= 256 && r % 8 === 0, "invalid " + e[1] + " bit length", "param", t), new eb(r / 8, e[1] === "int", t.name);
    }
    if (e = t.type.match(R1), e) {
      let r = parseInt(e[1]);
      return V(r !== 0 && r <= 32, "invalid bytes length", "param", t), new Jy(r, t.name);
    }
    V(!1, "invalid type", "type", t.type);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(t) {
    const e = t.map((i) => this.#t(Zt.from(i)));
    return new co(e, "_").defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(t, e) {
    aw(e.length, t.length, "types/values length mismatch");
    const r = t.map((a) => this.#t(Zt.from(a))), i = new co(r, "_"), o = new hu();
    return i.encode(o, e), o.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(t, e, r) {
    const i = t.map((a) => this.#t(Zt.from(a)));
    return new co(i, "_").decode(new Mu(e, r, pf));
  }
  static _setDefaultMaxInflation(t) {
    V(typeof t == "number" && Number.isInteger(t), "invalid defaultMaxInflation factor", "value", t), pf = t;
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    return Na == null && (Na = new Ci()), Na;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(t, e, r) {
    return B1(t, e, r, Ci.defaultAbiCoder());
  }
}
class S1 {
  /**
   *  The matching fragment for the ``topic0``.
   */
  fragment;
  /**
   *  The name of the Event.
   */
  name;
  /**
   *  The full Event signature.
   */
  signature;
  /**
   *  The topic hash for the Event.
   */
  topic;
  /**
   *  The arguments passed into the Event with ``emit``.
   */
  args;
  /**
   *  @_ignore:
   */
  constructor(t, e, r) {
    const i = t.name, o = t.format();
    zt(this, {
      fragment: t,
      name: i,
      signature: o,
      topic: e,
      args: r
    });
  }
}
class P1 {
  /**
   *  The matching fragment from the transaction ``data``.
   */
  fragment;
  /**
   *  The name of the Function from the transaction ``data``.
   */
  name;
  /**
   *  The arguments passed to the Function from the transaction ``data``.
   */
  args;
  /**
   *  The full Function signature from the transaction ``data``.
   */
  signature;
  /**
   *  The selector for the Function from the transaction ``data``.
   */
  selector;
  /**
   *  The ``value`` (in wei) from the transaction.
   */
  value;
  /**
   *  @_ignore:
   */
  constructor(t, e, r, i) {
    const o = t.name, a = t.format();
    zt(this, {
      fragment: t,
      name: o,
      args: r,
      signature: a,
      selector: e,
      value: i
    });
  }
}
class k1 {
  /**
   *  The matching fragment.
   */
  fragment;
  /**
   *  The name of the Error.
   */
  name;
  /**
   *  The arguments passed to the Error with ``revert``.
   */
  args;
  /**
   *  The full Error signature.
   */
  signature;
  /**
   *  The selector for the Error.
   */
  selector;
  /**
   *  @_ignore:
   */
  constructor(t, e, r) {
    const i = t.name, o = t.format();
    zt(this, {
      fragment: t,
      name: i,
      args: r,
      signature: o,
      selector: e
    });
  }
}
class wf {
  /**
   *  The ``keccak256`` of the value logged.
   */
  hash;
  /**
   *  @_ignore:
   */
  _isIndexed;
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(t) {
    return !!(t && t._isIndexed);
  }
  /**
   *  @_ignore:
   */
  constructor(t) {
    zt(this, { hash: t, _isIndexed: !0 });
  }
}
const df = {
  0: "generic panic",
  1: "assert(false)",
  17: "arithmetic overflow",
  18: "division or modulo by zero",
  33: "enum overflow",
  34: "invalid encoded storage byte array accessed",
  49: "out-of-bounds array access; popping on an empty array",
  50: "out-of-bounds access of an array or bytesN",
  65: "out of memory",
  81: "uninitialized function"
}, gf = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (n) => `reverted with reason string ${JSON.stringify(n)}`
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (n) => {
      let t = "unknown panic code";
      return n >= 0 && n <= 255 && df[n.toString()] && (t = df[n.toString()]), `reverted with panic code 0x${n.toString(16)} (${t})`;
    }
  }
};
class Ei {
  /**
   *  All the Contract ABI members (i.e. methods, events, errors, etc).
   */
  fragments;
  /**
   *  The Contract constructor.
   */
  deploy;
  /**
   *  The Fallback method, if any.
   */
  fallback;
  /**
   *  If receiving ether is supported.
   */
  receive;
  #t;
  #e;
  #r;
  //    #structs: Map<string, StructFragment>;
  #n;
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(t) {
    let e = [];
    typeof t == "string" ? e = JSON.parse(t) : e = t, this.#r = /* @__PURE__ */ new Map(), this.#t = /* @__PURE__ */ new Map(), this.#e = /* @__PURE__ */ new Map();
    const r = [];
    for (const a of e)
      try {
        r.push(Ti.from(a));
      } catch (u) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, u.message);
      }
    zt(this, {
      fragments: Object.freeze(r)
    });
    let i = null, o = !1;
    this.#n = this.getAbiCoder(), this.fragments.forEach((a, u) => {
      let _;
      switch (a.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          zt(this, { deploy: a });
          return;
        case "fallback":
          a.inputs.length === 0 ? o = !0 : (V(!i || a.payable !== i.payable, "conflicting fallback fragments", `fragments[${u}]`, a), i = a, o = i.payable);
          return;
        case "function":
          _ = this.#r;
          break;
        case "event":
          _ = this.#e;
          break;
        case "error":
          _ = this.#t;
          break;
        default:
          return;
      }
      const l = a.format();
      _.has(l) || _.set(l, a);
    }), this.deploy || zt(this, {
      deploy: Kn.from("constructor()")
    }), zt(this, { fallback: i, receive: o });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(t) {
    const e = t ? "minimal" : "full";
    return this.fragments.map((i) => i.format(e));
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const t = this.fragments.map((e) => e.format("json"));
    return JSON.stringify(t.map((e) => JSON.parse(e)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return Ci.defaultAbiCoder();
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  #i(t, e, r) {
    if (Xt(t)) {
      const o = t.toLowerCase();
      for (const a of this.#r.values())
        if (o === a.selector)
          return a;
      return null;
    }
    if (t.indexOf("(") === -1) {
      const o = [];
      for (const [a, u] of this.#r)
        a.split(
          "("
          /* fix:) */
        )[0] === t && o.push(u);
      if (e) {
        const a = e.length > 0 ? e[e.length - 1] : null;
        let u = e.length, _ = !0;
        se.isTyped(a) && a.type === "overrides" && (_ = !1, u--);
        for (let l = o.length - 1; l >= 0; l--) {
          const f = o[l].inputs.length;
          f !== u && (!_ || f !== u - 1) && o.splice(l, 1);
        }
        for (let l = o.length - 1; l >= 0; l--) {
          const f = o[l].inputs;
          for (let g = 0; g < e.length; g++)
            if (se.isTyped(e[g])) {
              if (g >= f.length) {
                if (e[g].type === "overrides")
                  continue;
                o.splice(l, 1);
                break;
              }
              if (e[g].type !== f[g].baseType) {
                o.splice(l, 1);
                break;
              }
            }
        }
      }
      if (o.length === 1 && e && e.length !== o[0].inputs.length) {
        const a = e[e.length - 1];
        (a == null || Array.isArray(a) || typeof a != "object") && o.splice(0, 1);
      }
      if (o.length === 0)
        return null;
      if (o.length > 1 && r) {
        const a = o.map((u) => JSON.stringify(u.format())).join(", ");
        V(!1, `ambiguous function description (i.e. matches ${a})`, "key", t);
      }
      return o[0];
    }
    const i = this.#r.get(ur.from(t).format());
    return i || null;
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(t) {
    const e = this.#i(t, null, !1);
    return V(e, "no matching function", "key", t), e.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(t) {
    return !!this.#i(t, null, !1);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(t, e) {
    return this.#i(t, e || null, !0);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(t) {
    const e = Array.from(this.#r.keys());
    e.sort((r, i) => r.localeCompare(i));
    for (let r = 0; r < e.length; r++) {
      const i = e[r];
      t(this.#r.get(i), r);
    }
  }
  // Find an event definition by any means necessary (unless it is ambiguous)
  #o(t, e, r) {
    if (Xt(t)) {
      const o = t.toLowerCase();
      for (const a of this.#e.values())
        if (o === a.topicHash)
          return a;
      return null;
    }
    if (t.indexOf("(") === -1) {
      const o = [];
      for (const [a, u] of this.#e)
        a.split(
          "("
          /* fix:) */
        )[0] === t && o.push(u);
      if (e) {
        for (let a = o.length - 1; a >= 0; a--)
          o[a].inputs.length < e.length && o.splice(a, 1);
        for (let a = o.length - 1; a >= 0; a--) {
          const u = o[a].inputs;
          for (let _ = 0; _ < e.length; _++)
            if (se.isTyped(e[_]) && e[_].type !== u[_].baseType) {
              o.splice(a, 1);
              break;
            }
        }
      }
      if (o.length === 0)
        return null;
      if (o.length > 1 && r) {
        const a = o.map((u) => JSON.stringify(u.format())).join(", ");
        V(!1, `ambiguous event description (i.e. matches ${a})`, "key", t);
      }
      return o[0];
    }
    const i = this.#e.get(cr.from(t).format());
    return i || null;
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(t) {
    const e = this.#o(t, null, !1);
    return V(e, "no matching event", "key", t), e.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(t) {
    return !!this.#o(t, null, !1);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(t, e) {
    return this.#o(t, e || null, !0);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(t) {
    const e = Array.from(this.#e.keys());
    e.sort((r, i) => r.localeCompare(i));
    for (let r = 0; r < e.length; r++) {
      const i = e[r];
      t(this.#e.get(i), r);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(t, e) {
    if (Xt(t)) {
      const i = t.toLowerCase();
      if (gf[i])
        return Ie.from(gf[i].signature);
      for (const o of this.#t.values())
        if (i === o.selector)
          return o;
      return null;
    }
    if (t.indexOf("(") === -1) {
      const i = [];
      for (const [o, a] of this.#t)
        o.split(
          "("
          /* fix:) */
        )[0] === t && i.push(a);
      if (i.length === 0)
        return t === "Error" ? Ie.from("error Error(string)") : t === "Panic" ? Ie.from("error Panic(uint256)") : null;
      if (i.length > 1) {
        const o = i.map((a) => JSON.stringify(a.format())).join(", ");
        V(!1, `ambiguous error description (i.e. ${o})`, "name", t);
      }
      return i[0];
    }
    if (t = Ie.from(t).format(), t === "Error(string)")
      return Ie.from("error Error(string)");
    if (t === "Panic(uint256)")
      return Ie.from("error Panic(uint256)");
    const r = this.#t.get(t);
    return r || null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(t) {
    const e = Array.from(this.#t.keys());
    e.sort((r, i) => r.localeCompare(i));
    for (let r = 0; r < e.length; r++) {
      const i = e[r];
      t(this.#t.get(i), r);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(t, e) {
    return this.#n.decode(t, e);
  }
  _encodeParams(t, e) {
    return this.#n.encode(t, e);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(t) {
    return this._encodeParams(this.deploy.inputs, t || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(t, e) {
    if (typeof t == "string") {
      const r = this.getError(t);
      V(r, "unknown error", "fragment", t), t = r;
    }
    return V(ne(e, 0, 4) === t.selector, `data signature does not match error ${t.name}.`, "data", e), this._decodeParams(t.inputs, ne(e, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(t, e) {
    if (typeof t == "string") {
      const r = this.getError(t);
      V(r, "unknown error", "fragment", t), t = r;
    }
    return oe([
      t.selector,
      this._encodeParams(t.inputs, e || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(t, e) {
    if (typeof t == "string") {
      const r = this.getFunction(t);
      V(r, "unknown function", "fragment", t), t = r;
    }
    return V(ne(e, 0, 4) === t.selector, `data signature does not match function ${t.name}.`, "data", e), this._decodeParams(t.inputs, ne(e, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(t, e) {
    if (typeof t == "string") {
      const r = this.getFunction(t);
      V(r, "unknown function", "fragment", t), t = r;
    }
    return oe([
      t.selector,
      this._encodeParams(t.inputs, e || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(t, e) {
    if (typeof t == "string") {
      const o = this.getFunction(t);
      V(o, "unknown function", "fragment", t), t = o;
    }
    let r = "invalid length for result data";
    const i = xe(e);
    if (i.length % 32 === 0)
      try {
        return this.#n.decode(t.outputs, i);
      } catch {
        r = "could not decode result data";
      }
    _t(!1, r, "BAD_DATA", {
      value: gt(i),
      info: { method: t.name, signature: t.format() }
    });
  }
  makeError(t, e) {
    const r = Ot(t, "data"), i = Ci.getBuiltinCallException("call", e, r);
    if (i.message.startsWith("execution reverted (unknown custom error)")) {
      const u = gt(r.slice(0, 4)), _ = this.getError(u);
      if (_)
        try {
          const l = this.#n.decode(_.inputs, r.slice(4));
          i.revert = {
            name: _.name,
            signature: _.format(),
            args: l
          }, i.reason = i.revert.signature, i.message = `execution reverted: ${i.reason}`;
        } catch {
          i.message = "execution reverted (coult not decode custom error)";
        }
    }
    const a = this.parseTransaction(e);
    return a && (i.invocation = {
      method: a.name,
      signature: a.signature,
      args: a.args
    }), i;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(t, e) {
    if (typeof t == "string") {
      const r = this.getFunction(t);
      V(r, "unknown function", "fragment", t), t = r;
    }
    return gt(this.#n.encode(t.outputs, e || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(t, e) {
    if (typeof t == "string") {
      const o = this.getEvent(t);
      V(o, "unknown event", "eventFragment", t), t = o;
    }
    _t(e.length <= t.inputs.length, `too many arguments for ${t.format()}`, "UNEXPECTED_ARGUMENT", { count: e.length, expectedCount: t.inputs.length });
    const r = [];
    t.anonymous || r.push(t.topicHash);
    const i = (o, a) => o.type === "string" ? Ii(a) : o.type === "bytes" ? le(gt(a)) : (o.type === "bool" && typeof a == "boolean" ? a = a ? "0x01" : "0x00" : o.type.match(/^u?int/) ? a = _i(a) : o.type.match(/^bytes/) ? a = Yg(a, 32) : o.type === "address" && this.#n.encode(["address"], [a]), Yn(gt(a), 32));
    for (e.forEach((o, a) => {
      const u = t.inputs[a];
      if (!u.indexed) {
        V(o == null, "cannot filter non-indexed parameters; must be null", "contract." + u.name, o);
        return;
      }
      o == null ? r.push(null) : u.baseType === "array" || u.baseType === "tuple" ? V(!1, "filtering with tuples or arrays not supported", "contract." + u.name, o) : Array.isArray(o) ? r.push(o.map((_) => i(u, _))) : r.push(i(u, o));
    }); r.length && r[r.length - 1] === null; )
      r.pop();
    return r;
  }
  encodeEventLog(t, e) {
    if (typeof t == "string") {
      const a = this.getEvent(t);
      V(a, "unknown event", "eventFragment", t), t = a;
    }
    const r = [], i = [], o = [];
    return t.anonymous || r.push(t.topicHash), V(e.length === t.inputs.length, "event arguments/values mismatch", "values", e), t.inputs.forEach((a, u) => {
      const _ = e[u];
      if (a.indexed)
        if (a.type === "string")
          r.push(Ii(_));
        else if (a.type === "bytes")
          r.push(le(_));
        else {
          if (a.baseType === "tuple" || a.baseType === "array")
            throw new Error("not implemented");
          r.push(this.#n.encode([a.type], [_]));
        }
      else
        i.push(a), o.push(_);
    }), {
      data: this.#n.encode(i, o),
      topics: r
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(t, e, r) {
    if (typeof t == "string") {
      const B = this.getEvent(t);
      V(B, "unknown event", "eventFragment", t), t = B;
    }
    if (r != null && !t.anonymous) {
      const B = t.topicHash;
      V(Xt(r[0], 32) && r[0].toLowerCase() === B, "fragment/topic mismatch", "topics[0]", r[0]), r = r.slice(1);
    }
    const i = [], o = [], a = [];
    t.inputs.forEach((B, I) => {
      B.indexed ? B.type === "string" || B.type === "bytes" || B.baseType === "tuple" || B.baseType === "array" ? (i.push(Zt.from({ type: "bytes32", name: B.name })), a.push(!0)) : (i.push(B), a.push(!1)) : (o.push(B), a.push(!1));
    });
    const u = r != null ? this.#n.decode(i, oe(r)) : null, _ = this.#n.decode(o, e, !0), l = [], f = [];
    let g = 0, y = 0;
    return t.inputs.forEach((B, I) => {
      let S = null;
      if (B.indexed)
        if (u == null)
          S = new wf(null);
        else if (a[I])
          S = new wf(u[y++]);
        else
          try {
            S = u[y++];
          } catch (T) {
            S = T;
          }
      else
        try {
          S = _[g++];
        } catch (T) {
          S = T;
        }
      l.push(S), f.push(B.name || null);
    }), Qn.fromItems(l, f);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(t) {
    const e = Ot(t.data, "tx.data"), r = mt(t.value != null ? t.value : 0, "tx.value"), i = this.getFunction(gt(e.slice(0, 4)));
    if (!i)
      return null;
    const o = this.#n.decode(i.inputs, e.slice(4));
    return new P1(i, i.selector, o, r);
  }
  parseCallResult(t) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(t) {
    const e = this.getEvent(t.topics[0]);
    return !e || e.anonymous ? null : new S1(e, e.topicHash, this.decodeEventLog(e, t.data, t.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(t) {
    const e = gt(t), r = this.getError(ne(e, 0, 4));
    if (!r)
      return null;
    const i = this.#n.decode(r.inputs, ne(e, 4));
    return new k1(r, r.selector, i);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(t) {
    return t instanceof Ei ? t : typeof t == "string" ? new Ei(JSON.parse(t)) : typeof t.formatJson == "function" ? new Ei(t.formatJson()) : typeof t.format == "function" ? new Ei(t.format("json")) : new Ei(t);
  }
}
const Td = BigInt(0);
function Yi(n) {
  return n ?? null;
}
function ce(n) {
  return n == null ? null : n.toString();
}
class yf {
  /**
   *  The gas price for legacy networks.
   */
  gasPrice;
  /**
   *  The maximum fee to pay per gas.
   *
   *  The base fee per gas is defined by the network and based on
   *  congestion, increasing the cost during times of heavy load
   *  and lowering when less busy.
   *
   *  The actual fee per gas will be the base fee for the block
   *  and the priority fee, up to the max fee per gas.
   *
   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
   */
  maxFeePerGas;
  /**
   *  The additional amout to pay per gas to encourage a validator
   *  to include the transaction.
   *
   *  The purpose of this is to compensate the validator for the
   *  adjusted risk for including a given transaction.
   *
   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
   */
  maxPriorityFeePerGas;
  /**
   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
   *  %%maxPriorityFeePerGas%%.
   */
  constructor(t, e, r) {
    zt(this, {
      gasPrice: Yi(t),
      maxFeePerGas: Yi(e),
      maxPriorityFeePerGas: Yi(r)
    });
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { gasPrice: t, maxFeePerGas: e, maxPriorityFeePerGas: r } = this;
    return {
      _type: "FeeData",
      gasPrice: ce(t),
      maxFeePerGas: ce(e),
      maxPriorityFeePerGas: ce(r)
    };
  }
}
function Oo(n) {
  const t = {};
  n.to && (t.to = n.to), n.from && (t.from = n.from), n.data && (t.data = gt(n.data));
  const e = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const i of e)
    !(i in n) || n[i] == null || (t[i] = mt(n[i], `request.${i}`));
  const r = "type,nonce".split(/,/);
  for (const i of r)
    !(i in n) || n[i] == null || (t[i] = Tt(n[i], `request.${i}`));
  return n.accessList && (t.accessList = Li(n.accessList)), n.authorizationList && (t.authorizationList = n.authorizationList.slice()), "blockTag" in n && (t.blockTag = n.blockTag), "enableCcipRead" in n && (t.enableCcipRead = !!n.enableCcipRead), "customData" in n && (t.customData = n.customData), "blobVersionedHashes" in n && n.blobVersionedHashes && (t.blobVersionedHashes = n.blobVersionedHashes.slice()), "kzg" in n && (t.kzg = n.kzg), "blobs" in n && n.blobs && (t.blobs = n.blobs.map((i) => Du(i) ? gt(i) : Object.assign({}, i))), t;
}
class F1 {
  /**
   *  The provider connected to the block used to fetch additional details
   *  if necessary.
   */
  provider;
  /**
   *  The block number, sometimes called the block height. This is a
   *  sequential number that is one higher than the parent block.
   */
  number;
  /**
   *  The block hash.
   *
   *  This hash includes all properties, so can be safely used to identify
   *  an exact set of block properties.
   */
  hash;
  /**
   *  The timestamp for this block, which is the number of seconds since
   *  epoch that this block was included.
   */
  timestamp;
  /**
   *  The block hash of the parent block.
   */
  parentHash;
  /**
   *  The hash tree root of the parent beacon block for the given
   *  execution block. See [[link-eip-4788]].
   */
  parentBeaconBlockRoot;
  /**
   *  The nonce.
   *
   *  On legacy networks, this is the random number inserted which
   *  permitted the difficulty target to be reached.
   */
  nonce;
  /**
   *  The difficulty target.
   *
   *  On legacy networks, this is the proof-of-work target required
   *  for a block to meet the protocol rules to be included.
   *
   *  On modern networks, this is a random number arrived at using
   *  randao.  @TODO: Find links?
   */
  difficulty;
  /**
   *  The total gas limit for this block.
   */
  gasLimit;
  /**
   *  The total gas used in this block.
   */
  gasUsed;
  /**
   *  The root hash for the global state after applying changes
   *  in this block.
   */
  stateRoot;
  /**
   *  The hash of the transaction receipts trie.
   */
  receiptsRoot;
  /**
   *  The total amount of blob gas consumed by the transactions
   *  within the block. See [[link-eip-4844]].
   */
  blobGasUsed;
  /**
   *  The running total of blob gas consumed in excess of the
   *  target, prior to the block. See [[link-eip-4844]].
   */
  excessBlobGas;
  /**
   *  The miner coinbase address, wihch receives any subsidies for
   *  including this block.
   */
  miner;
  /**
   *  The latest RANDAO mix of the post beacon state of
   *  the previous block.
   */
  prevRandao;
  /**
   *  Any extra data the validator wished to include.
   */
  extraData;
  /**
   *  The base fee per gas that all transactions in this block were
   *  charged.
   *
   *  This adjusts after each block, depending on how congested the network
   *  is.
   */
  baseFeePerGas;
  #t;
  /**
   *  Create a new **Block** object.
   *
   *  This should generally not be necessary as the unless implementing a
   *  low-level library.
   */
  constructor(t, e) {
    this.#t = t.transactions.map((r) => typeof r != "string" ? new $s(r, e) : r), zt(this, {
      provider: e,
      hash: Yi(t.hash),
      number: t.number,
      timestamp: t.timestamp,
      parentHash: t.parentHash,
      parentBeaconBlockRoot: t.parentBeaconBlockRoot,
      nonce: t.nonce,
      difficulty: t.difficulty,
      gasLimit: t.gasLimit,
      gasUsed: t.gasUsed,
      blobGasUsed: t.blobGasUsed,
      excessBlobGas: t.excessBlobGas,
      miner: t.miner,
      prevRandao: Yi(t.prevRandao),
      extraData: t.extraData,
      baseFeePerGas: Yi(t.baseFeePerGas),
      stateRoot: t.stateRoot,
      receiptsRoot: t.receiptsRoot
    });
  }
  /**
   *  Returns the list of transaction hashes, in the order
   *  they were executed within the block.
   */
  get transactions() {
    return this.#t.map((t) => typeof t == "string" ? t : t.hash);
  }
  /**
   *  Returns the complete transactions, in the order they
   *  were executed within the block.
   *
   *  This is only available for blocks which prefetched
   *  transactions, by passing ``true`` to %%prefetchTxs%%
   *  into [[Provider-getBlock]].
   */
  get prefetchedTransactions() {
    const t = this.#t.slice();
    return t.length === 0 ? [] : (_t(typeof t[0] == "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
      operation: "transactionResponses()"
    }), t);
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { baseFeePerGas: t, difficulty: e, extraData: r, gasLimit: i, gasUsed: o, hash: a, miner: u, prevRandao: _, nonce: l, number: f, parentHash: g, parentBeaconBlockRoot: y, stateRoot: B, receiptsRoot: I, timestamp: S, transactions: T } = this;
    return {
      _type: "Block",
      baseFeePerGas: ce(t),
      difficulty: ce(e),
      extraData: r,
      gasLimit: ce(i),
      gasUsed: ce(o),
      blobGasUsed: ce(this.blobGasUsed),
      excessBlobGas: ce(this.excessBlobGas),
      hash: a,
      miner: u,
      prevRandao: _,
      nonce: l,
      number: f,
      parentHash: g,
      timestamp: S,
      parentBeaconBlockRoot: y,
      stateRoot: B,
      receiptsRoot: I,
      transactions: T
    };
  }
  [Symbol.iterator]() {
    let t = 0;
    const e = this.transactions;
    return {
      next: () => t < this.length ? {
        value: e[t++],
        done: !1
      } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The number of transactions in this block.
   */
  get length() {
    return this.#t.length;
  }
  /**
   *  The [[link-js-date]] this block was included at.
   */
  get date() {
    return this.timestamp == null ? null : new Date(this.timestamp * 1e3);
  }
  /**
   *  Get the transaction at %%indexe%% within this block.
   */
  async getTransaction(t) {
    let e;
    if (typeof t == "number")
      e = this.#t[t];
    else {
      const r = t.toLowerCase();
      for (const i of this.#t)
        if (typeof i == "string") {
          if (i !== r)
            continue;
          e = i;
          break;
        } else {
          if (i.hash !== r)
            continue;
          e = i;
          break;
        }
    }
    if (e == null)
      throw new Error("no such tx");
    return typeof e == "string" ? await this.provider.getTransaction(e) : e;
  }
  /**
   *  If a **Block** was fetched with a request to include the transactions
   *  this will allow synchronous access to those transactions.
   *
   *  If the transactions were not prefetched, this will throw.
   */
  getPrefetchedTransaction(t) {
    const e = this.prefetchedTransactions;
    if (typeof t == "number")
      return e[t];
    t = t.toLowerCase();
    for (const r of e)
      if (r.hash === t)
        return r;
    V(!1, "no matching transaction", "indexOrHash", t);
  }
  /**
   *  Returns true if this block been mined. This provides a type guard
   *  for all properties on a [[MinedBlock]].
   */
  isMined() {
    return !!this.hash;
  }
  /**
   *  Returns true if this block is an [[link-eip-2930]] block.
   */
  isLondon() {
    return !!this.baseFeePerGas;
  }
  /**
   *  @_ignore:
   */
  orphanedEvent() {
    if (!this.isMined())
      throw new Error("");
    return I1(this);
  }
}
class Js {
  /**
   *  The provider connected to the log used to fetch additional details
   *  if necessary.
   */
  provider;
  /**
   *  The transaction hash of the transaction this log occurred in. Use the
   *  [[Log-getTransaction]] to get the [[TransactionResponse]].
   */
  transactionHash;
  /**
   *  The block hash of the block this log occurred in. Use the
   *  [[Log-getBlock]] to get the [[Block]].
   */
  blockHash;
  /**
   *  The block number of the block this log occurred in. It is preferred
   *  to use the [[Block-hash]] when fetching the related [[Block]],
   *  since in the case of an orphaned block, the block at that height may
   *  have changed.
   */
  blockNumber;
  /**
   *  If the **Log** represents a block that was removed due to an orphaned
   *  block, this will be true.
   *
   *  This can only happen within an orphan event listener.
   */
  removed;
  /**
   *  The address of the contract that emitted this log.
   */
  address;
  /**
   *  The data included in this log when it was emitted.
   */
  data;
  /**
   *  The indexed topics included in this log when it was emitted.
   *
   *  All topics are included in the bloom filters, so they can be
   *  efficiently filtered using the [[Provider-getLogs]] method.
   */
  topics;
  /**
   *  The index within the block this log occurred at. This is generally
   *  not useful to developers, but can be used with the various roots
   *  to proof inclusion within a block.
   */
  index;
  /**
   *  The index within the transaction of this log.
   */
  transactionIndex;
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    this.provider = e;
    const r = Object.freeze(t.topics.slice());
    zt(this, {
      transactionHash: t.transactionHash,
      blockHash: t.blockHash,
      blockNumber: t.blockNumber,
      removed: t.removed,
      address: t.address,
      data: t.data,
      topics: r,
      index: t.index,
      transactionIndex: t.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address: t, blockHash: e, blockNumber: r, data: i, index: o, removed: a, topics: u, transactionHash: _, transactionIndex: l } = this;
    return {
      _type: "log",
      address: t,
      blockHash: e,
      blockNumber: r,
      data: i,
      index: o,
      removed: a,
      topics: u,
      transactionHash: _,
      transactionIndex: l
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const t = await this.provider.getBlock(this.blockHash);
    return _t(!!t, "failed to find transaction", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const t = await this.provider.getTransaction(this.transactionHash);
    return _t(!!t, "failed to find transaction", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const t = await this.provider.getTransactionReceipt(this.transactionHash);
    return _t(!!t, "failed to find transaction receipt", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return O1(this);
  }
}
class Cd {
  /**
   *  The provider connected to the log used to fetch additional details
   *  if necessary.
   */
  provider;
  /**
   *  The address the transaction was sent to.
   */
  to;
  /**
   *  The sender of the transaction.
   */
  from;
  /**
   *  The address of the contract if the transaction was directly
   *  responsible for deploying one.
   *
   *  This is non-null **only** if the ``to`` is empty and the ``data``
   *  was successfully executed as initcode.
   */
  contractAddress;
  /**
   *  The transaction hash.
   */
  hash;
  /**
   *  The index of this transaction within the block transactions.
   */
  index;
  /**
   *  The block hash of the [[Block]] this transaction was included in.
   */
  blockHash;
  /**
   *  The block number of the [[Block]] this transaction was included in.
   */
  blockNumber;
  /**
   *  The bloom filter bytes that represent all logs that occurred within
   *  this transaction. This is generally not useful for most developers,
   *  but can be used to validate the included logs.
   */
  logsBloom;
  /**
   *  The actual amount of gas used by this transaction.
   *
   *  When creating a transaction, the amount of gas that will be used can
   *  only be approximated, but the sender must pay the gas fee for the
   *  entire gas limit. After the transaction, the difference is refunded.
   */
  gasUsed;
  /**
   *  The gas used for BLObs. See [[link-eip-4844]].
   */
  blobGasUsed;
  /**
   *  The amount of gas used by all transactions within the block for this
   *  and all transactions with a lower ``index``.
   *
   *  This is generally not useful for developers but can be used to
   *  validate certain aspects of execution.
   */
  cumulativeGasUsed;
  /**
   *  The actual gas price used during execution.
   *
   *  Due to the complexity of [[link-eip-1559]] this value can only
   *  be caluclated after the transaction has been mined, snce the base
   *  fee is protocol-enforced.
   */
  gasPrice;
  /**
   *  The price paid per BLOB in gas. See [[link-eip-4844]].
   */
  blobGasPrice;
  /**
   *  The [[link-eip-2718]] transaction type.
   */
  type;
  //readonly byzantium!: boolean;
  /**
   *  The status of this transaction, indicating success (i.e. ``1``) or
   *  a revert (i.e. ``0``).
   *
   *  This is available in post-byzantium blocks, but some backends may
   *  backfill this value.
   */
  status;
  /**
   *  The root hash of this transaction.
   *
   *  This is no present and was only included in pre-byzantium blocks, but
   *  could be used to validate certain parts of the receipt.
   */
  root;
  #t;
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    this.#t = Object.freeze(t.logs.map((i) => new Js(i, e)));
    let r = Td;
    t.effectiveGasPrice != null ? r = t.effectiveGasPrice : t.gasPrice != null && (r = t.gasPrice), zt(this, {
      provider: e,
      to: t.to,
      from: t.from,
      contractAddress: t.contractAddress,
      hash: t.hash,
      index: t.index,
      blockHash: t.blockHash,
      blockNumber: t.blockNumber,
      logsBloom: t.logsBloom,
      gasUsed: t.gasUsed,
      cumulativeGasUsed: t.cumulativeGasUsed,
      blobGasUsed: t.blobGasUsed,
      gasPrice: r,
      blobGasPrice: t.blobGasPrice,
      type: t.type,
      //byzantium: tx.byzantium,
      status: t.status,
      root: t.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return this.#t;
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to: t,
      from: e,
      contractAddress: r,
      hash: i,
      index: o,
      blockHash: a,
      blockNumber: u,
      logsBloom: _,
      logs: l,
      //byzantium, 
      status: f,
      root: g
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash: a,
      blockNumber: u,
      //byzantium, 
      contractAddress: r,
      cumulativeGasUsed: ce(this.cumulativeGasUsed),
      from: e,
      gasPrice: ce(this.gasPrice),
      blobGasUsed: ce(this.blobGasUsed),
      blobGasPrice: ce(this.blobGasPrice),
      gasUsed: ce(this.gasUsed),
      hash: i,
      index: o,
      logs: l,
      logsBloom: _,
      root: g,
      status: f,
      to: t
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let t = 0;
    return {
      next: () => t < this.length ? { value: this.logs[t++], done: !1 } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const t = await this.provider.getBlock(this.blockHash);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const t = await this.provider.getTransaction(this.hash);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return Ld(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(t) {
    return _t(!t || t.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" }), Nd(this, t);
  }
}
class $s {
  /**
   *  The provider this is connected to, which will influence how its
   *  methods will resolve its async inspection methods.
   */
  provider;
  /**
   *  The block number of the block that this transaction was included in.
   *
   *  This is ``null`` for pending transactions.
   */
  blockNumber;
  /**
   *  The blockHash of the block that this transaction was included in.
   *
   *  This is ``null`` for pending transactions.
   */
  blockHash;
  /**
   *  The index within the block that this transaction resides at.
   */
  index;
  /**
   *  The transaction hash.
   */
  hash;
  /**
   *  The [[link-eip-2718]] transaction envelope type. This is
   *  ``0`` for legacy transactions types.
   */
  type;
  /**
   *  The receiver of this transaction.
   *
   *  If ``null``, then the transaction is an initcode transaction.
   *  This means the result of executing the [[data]] will be deployed
   *  as a new contract on chain (assuming it does not revert) and the
   *  address may be computed using [[getCreateAddress]].
   */
  to;
  /**
   *  The sender of this transaction. It is implicitly computed
   *  from the transaction pre-image hash (as the digest) and the
   *  [[signature]] using ecrecover.
   */
  from;
  /**
   *  The nonce, which is used to prevent replay attacks and offer
   *  a method to ensure transactions from a given sender are explicitly
   *  ordered.
   *
   *  When sending a transaction, this must be equal to the number of
   *  transactions ever sent by [[from]].
   */
  nonce;
  /**
   *  The maximum units of gas this transaction can consume. If execution
   *  exceeds this, the entries transaction is reverted and the sender
   *  is charged for the full amount, despite not state changes being made.
   */
  gasLimit;
  /**
   *  The gas price can have various values, depending on the network.
   *
   *  In modern networks, for transactions that are included this is
   *  the //effective gas price// (the fee per gas that was actually
   *  charged), while for transactions that have not been included yet
   *  is the [[maxFeePerGas]].
   *
   *  For legacy transactions, or transactions on legacy networks, this
   *  is the fee that will be charged per unit of gas the transaction
   *  consumes.
   */
  gasPrice;
  /**
   *  The maximum priority fee (per unit of gas) to allow a
   *  validator to charge the sender. This is inclusive of the
   *  [[maxFeeFeePerGas]].
   */
  maxPriorityFeePerGas;
  /**
   *  The maximum fee (per unit of gas) to allow this transaction
   *  to charge the sender.
   */
  maxFeePerGas;
  /**
   *  The [[link-eip-4844]] max fee per BLOb gas.
   */
  maxFeePerBlobGas;
  /**
   *  The data.
   */
  data;
  /**
   *  The value, in wei. Use [[formatEther]] to format this value
   *  as ether.
   */
  value;
  /**
   *  The chain ID.
   */
  chainId;
  /**
   *  The signature.
   */
  signature;
  /**
   *  The [[link-eip-2930]] access list for transaction types that
   *  support it, otherwise ``null``.
   */
  accessList;
  /**
   *  The [[link-eip-4844]] BLOb versioned hashes.
   */
  blobVersionedHashes;
  /**
   *  The [[link-eip-7702]] authorizations (if any).
   */
  authorizationList;
  #t;
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    this.provider = e, this.blockNumber = t.blockNumber != null ? t.blockNumber : null, this.blockHash = t.blockHash != null ? t.blockHash : null, this.hash = t.hash, this.index = t.index, this.type = t.type, this.from = t.from, this.to = t.to || null, this.gasLimit = t.gasLimit, this.nonce = t.nonce, this.data = t.data, this.value = t.value, this.gasPrice = t.gasPrice, this.maxPriorityFeePerGas = t.maxPriorityFeePerGas != null ? t.maxPriorityFeePerGas : null, this.maxFeePerGas = t.maxFeePerGas != null ? t.maxFeePerGas : null, this.maxFeePerBlobGas = t.maxFeePerBlobGas != null ? t.maxFeePerBlobGas : null, this.chainId = t.chainId, this.signature = t.signature, this.accessList = t.accessList != null ? t.accessList : null, this.blobVersionedHashes = t.blobVersionedHashes != null ? t.blobVersionedHashes : null, this.authorizationList = t.authorizationList != null ? t.authorizationList : null, this.#t = -1;
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber: t, blockHash: e, index: r, hash: i, type: o, to: a, from: u, nonce: _, data: l, signature: f, accessList: g, blobVersionedHashes: y } = this;
    return {
      _type: "TransactionResponse",
      accessList: g,
      blockNumber: t,
      blockHash: e,
      blobVersionedHashes: y,
      chainId: ce(this.chainId),
      data: l,
      from: u,
      gasLimit: ce(this.gasLimit),
      gasPrice: ce(this.gasPrice),
      hash: i,
      maxFeePerGas: ce(this.maxFeePerGas),
      maxPriorityFeePerGas: ce(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: ce(this.maxFeePerBlobGas),
      nonce: _,
      signature: f,
      to: a,
      index: r,
      type: o,
      value: ce(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let t = this.blockNumber;
    if (t == null) {
      const r = await this.getTransaction();
      r && (t = r.blockNumber);
    }
    if (t == null)
      return null;
    const e = this.provider.getBlock(t);
    if (e == null)
      throw new Error("TODO");
    return e;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx: e, blockNumber: r } = await ve({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      return e == null || e.blockNumber == null ? 0 : r - e.blockNumber + 1;
    }
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(t, e) {
    const r = t ?? 1, i = e ?? 0;
    let o = this.#t, a = -1, u = o === -1;
    const _ = async () => {
      if (u)
        return null;
      const { blockNumber: y, nonce: B } = await ve({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (B < this.nonce) {
        o = y;
        return;
      }
      if (u)
        return null;
      const I = await this.getTransaction();
      if (!(I && I.blockNumber != null))
        for (a === -1 && (a = o - 3, a < this.#t && (a = this.#t)); a <= y; ) {
          if (u)
            return null;
          const S = await this.provider.getBlock(a, !0);
          if (S == null)
            return;
          for (const T of S)
            if (T === this.hash)
              return;
          for (let T = 0; T < S.length; T++) {
            const A = await S.getTransaction(T);
            if (A.from === this.from && A.nonce === this.nonce) {
              if (u)
                return null;
              const R = await this.provider.getTransactionReceipt(A.hash);
              if (R == null || y - R.blockNumber + 1 < r)
                return;
              let P = "replaced";
              A.data === this.data && A.to === this.to && A.value === this.value ? P = "repriced" : A.data === "0x" && A.from === A.to && A.value === Td && (P = "cancelled"), _t(!1, "transaction was replaced", "TRANSACTION_REPLACED", {
                cancelled: P === "replaced" || P === "cancelled",
                reason: P,
                replacement: A.replaceableTransaction(o),
                hash: A.hash,
                receipt: R
              });
            }
          }
          a++;
        }
    }, l = (y) => {
      if (y == null || y.status !== 0)
        return y;
      _t(!1, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: y.to,
          from: y.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: y
      });
    }, f = await this.provider.getTransactionReceipt(this.hash);
    if (r === 0)
      return l(f);
    if (f) {
      if (r === 1 || await f.confirmations() >= r)
        return l(f);
    } else if (await _(), r === 0)
      return null;
    return await new Promise((y, B) => {
      const I = [], S = () => {
        I.forEach((A) => A());
      };
      if (I.push(() => {
        u = !0;
      }), i > 0) {
        const A = setTimeout(() => {
          S(), B(te("wait for transaction timeout", "TIMEOUT"));
        }, i);
        I.push(() => {
          clearTimeout(A);
        });
      }
      const T = async (A) => {
        if (await A.confirmations() >= r) {
          S();
          try {
            y(l(A));
          } catch (R) {
            B(R);
          }
        }
      };
      if (I.push(() => {
        this.provider.off(this.hash, T);
      }), this.provider.on(this.hash, T), o >= 0) {
        const A = async () => {
          try {
            await _();
          } catch (R) {
            if (Ae(R, "TRANSACTION_REPLACED")) {
              S(), B(R);
              return;
            }
          }
          u || this.provider.once("block", A);
        };
        I.push(() => {
          this.provider.off("block", A);
        }), this.provider.once("block", A);
      }
    });
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
   *  transaction. See [[link-eip-4844]].
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    return _t(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Ld(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(t) {
    return _t(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), _t(!t || t.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Nd(this, t);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(t) {
    V(Number.isInteger(t) && t >= 0, "invalid startBlock", "startBlock", t);
    const e = new $s(this, this.provider);
    return e.#t = t, e;
  }
}
function I1(n) {
  return { orphan: "drop-block", hash: n.hash, number: n.number };
}
function Nd(n, t) {
  return { orphan: "reorder-transaction", tx: n, other: t };
}
function Ld(n) {
  return { orphan: "drop-transaction", tx: n };
}
function O1(n) {
  return { orphan: "drop-log", log: {
    transactionHash: n.transactionHash,
    blockHash: n.blockHash,
    blockNumber: n.blockNumber,
    address: n.address,
    data: n.data,
    topics: Object.freeze(n.topics.slice()),
    index: n.index
  } };
}
class Xu extends Js {
  /**
   *  The Contract Interface.
   */
  interface;
  /**
   *  The matching event.
   */
  fragment;
  /**
   *  The parsed arguments passed to the event by ``emit``.
   */
  args;
  /**
   * @_ignore:
   */
  constructor(t, e, r) {
    super(t, t.provider);
    const i = e.decodeEventLog(r, t.data, t.topics);
    zt(this, { args: i, fragment: r, interface: e });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
class Dd extends Js {
  /**
   *  The error encounted when trying to decode the log.
   */
  error;
  /**
   * @_ignore:
   */
  constructor(t, e) {
    super(t, t.provider), zt(this, { error: e });
  }
}
class T1 extends Cd {
  #t;
  /**
   *  @_ignore:
   */
  constructor(t, e, r) {
    super(r, e), this.#t = t;
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((t) => {
      const e = t.topics.length ? this.#t.getEvent(t.topics[0]) : null;
      if (e)
        try {
          return new Xu(t, this.#t, e);
        } catch (r) {
          return new Dd(t, r);
        }
      return t;
    });
  }
}
class t_ extends $s {
  #t;
  /**
   *  @_ignore:
   */
  constructor(t, e, r) {
    super(r, e), this.#t = t;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(t, e) {
    const r = await super.wait(t, e);
    return r == null ? null : new T1(this.#t, this.provider, r);
  }
}
class Ud extends fw {
  /**
   *  The log with no matching events.
   */
  log;
  /**
   *  @_event:
   */
  constructor(t, e, r, i) {
    super(t, e, r), zt(this, { log: i });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
}
class C1 extends Ud {
  /**
   *  @_ignore:
   */
  constructor(t, e, r, i, o) {
    super(t, e, r, new Xu(o, t.interface, i));
    const a = t.interface.decodeEventLog(i, this.log.data, this.log.topics);
    zt(this, { args: a, fragment: i });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
const bf = BigInt(0);
function Md(n) {
  return n && typeof n.call == "function";
}
function jd(n) {
  return n && typeof n.estimateGas == "function";
}
function $o(n) {
  return n && typeof n.resolveName == "function";
}
function Gd(n) {
  return n && typeof n.sendTransaction == "function";
}
function Hd(n) {
  if (n != null) {
    if ($o(n))
      return n;
    if (n.provider)
      return n.provider;
  }
}
class N1 {
  #t;
  fragment;
  constructor(t, e, r) {
    if (zt(this, { fragment: e }), e.inputs.length < r.length)
      throw new Error("too many arguments");
    const i = Ni(t.runner, "resolveName"), o = $o(i) ? i : null;
    this.#t = async function() {
      const a = await Promise.all(e.inputs.map((u, _) => r[_] == null ? null : u.walkAsync(r[_], (f, g) => f === "address" ? Array.isArray(g) ? Promise.all(g.map((y) => ze(y, o))) : ze(g, o) : g)));
      return t.interface.encodeFilterTopics(e, a);
    }();
  }
  getTopicFilter() {
    return this.#t;
  }
}
function Ni(n, t) {
  return n == null ? null : typeof n[t] == "function" ? n : n.provider && typeof n.provider[t] == "function" ? n.provider : null;
}
function zi(n) {
  return n == null ? null : n.provider || null;
}
async function Vd(n, t) {
  const e = se.dereference(n, "overrides");
  V(typeof e == "object", "invalid overrides parameter", "overrides", n);
  const r = Oo(e);
  return V(r.to == null || (t || []).indexOf("to") >= 0, "cannot override to", "overrides.to", r.to), V(r.data == null || (t || []).indexOf("data") >= 0, "cannot override data", "overrides.data", r.data), r.from && (r.from = r.from), r;
}
async function L1(n, t, e) {
  const r = Ni(n, "resolveName"), i = $o(r) ? r : null;
  return await Promise.all(t.map((o, a) => o.walkAsync(e[a], (u, _) => (_ = se.dereference(_, u), u === "address" ? ze(_, i) : _))));
}
function D1(n) {
  const t = async function(a) {
    const u = await Vd(a, ["data"]);
    u.to = await n.getAddress(), u.from && (u.from = await ze(u.from, Hd(n.runner)));
    const _ = n.interface, l = mt(u.value || bf, "overrides.value") === bf, f = (u.data || "0x") === "0x";
    _.fallback && !_.fallback.payable && _.receive && !f && !l && V(!1, "cannot send data to receive or send value to non-payable fallback", "overrides", a), V(_.fallback || f, "cannot send data to receive-only contract", "overrides.data", u.data);
    const g = _.receive || _.fallback && _.fallback.payable;
    return V(g || l, "cannot send value to non-payable fallback", "overrides.value", u.value), V(_.fallback || f, "cannot send data to receive-only contract", "overrides.data", u.data), u;
  }, e = async function(a) {
    const u = Ni(n.runner, "call");
    _t(Md(u), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const _ = await t(a);
    try {
      return await u.call(_);
    } catch (l) {
      throw Lu(l) && l.data ? n.interface.makeError(l.data, _) : l;
    }
  }, r = async function(a) {
    const u = n.runner;
    _t(Gd(u), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const _ = await u.sendTransaction(await t(a)), l = zi(n.runner);
    return new t_(n.interface, l, _);
  }, i = async function(a) {
    const u = Ni(n.runner, "estimateGas");
    return _t(jd(u), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await u.estimateGas(await t(a));
  }, o = async (a) => await r(a);
  return zt(o, {
    _contract: n,
    estimateGas: i,
    populateTransaction: t,
    send: r,
    staticCall: e
  }), o;
}
function U1(n, t) {
  const e = function(...l) {
    const f = n.interface.getFunction(t, l);
    return _t(f, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: t, args: l }
    }), f;
  }, r = async function(...l) {
    const f = e(...l);
    let g = {};
    if (f.inputs.length + 1 === l.length && (g = await Vd(l.pop()), g.from && (g.from = await ze(g.from, Hd(n.runner)))), f.inputs.length !== l.length)
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    const y = await L1(n.runner, f.inputs, l);
    return Object.assign({}, g, await ve({
      to: n.getAddress(),
      data: n.interface.encodeFunctionData(f, y)
    }));
  }, i = async function(...l) {
    const f = await u(...l);
    return f.length === 1 ? f[0] : f;
  }, o = async function(...l) {
    const f = n.runner;
    _t(Gd(f), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const g = await f.sendTransaction(await r(...l)), y = zi(n.runner);
    return new t_(n.interface, y, g);
  }, a = async function(...l) {
    const f = Ni(n.runner, "estimateGas");
    return _t(jd(f), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await f.estimateGas(await r(...l));
  }, u = async function(...l) {
    const f = Ni(n.runner, "call");
    _t(Md(f), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const g = await r(...l);
    let y = "0x";
    try {
      y = await f.call(g);
    } catch (I) {
      throw Lu(I) && I.data ? n.interface.makeError(I.data, g) : I;
    }
    const B = e(...l);
    return n.interface.decodeFunctionResult(B, y);
  }, _ = async (...l) => e(...l).constant ? await i(...l) : await o(...l);
  return zt(_, {
    name: n.interface.getFunctionName(t),
    _contract: n,
    _key: t,
    getFragment: e,
    estimateGas: a,
    populateTransaction: r,
    send: o,
    staticCall: i,
    staticCallResult: u
  }), Object.defineProperty(_, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const l = n.interface.getFunction(t);
      return _t(l, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: t }
      }), l;
    }
  }), _;
}
function M1(n, t) {
  const e = function(...i) {
    const o = n.interface.getEvent(t, i);
    return _t(o, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: t, args: i }
    }), o;
  }, r = function(...i) {
    return new N1(n, e(...i), i);
  };
  return zt(r, {
    name: n.interface.getEventName(t),
    _contract: n,
    _key: t,
    getFragment: e
  }), Object.defineProperty(r, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const i = n.interface.getEvent(t);
      return _t(i, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: t }
      }), i;
    }
  }), r;
}
const To = Symbol.for("_ethersInternal_contract"), qd = /* @__PURE__ */ new WeakMap();
function j1(n, t) {
  qd.set(n[To], t);
}
function Te(n) {
  return qd.get(n[To]);
}
function G1(n) {
  return n && typeof n == "object" && "getTopicFilter" in n && typeof n.getTopicFilter == "function" && n.fragment;
}
async function e_(n, t) {
  let e, r = null;
  if (Array.isArray(t)) {
    const o = function(a) {
      if (Xt(a, 32))
        return a;
      const u = n.interface.getEvent(a);
      return V(u, "unknown fragment", "name", a), u.topicHash;
    };
    e = t.map((a) => a == null ? null : Array.isArray(a) ? a.map(o) : o(a));
  } else t === "*" ? e = [null] : typeof t == "string" ? Xt(t, 32) ? e = [t] : (r = n.interface.getEvent(t), V(r, "unknown fragment", "event", t), e = [r.topicHash]) : G1(t) ? e = await t.getTopicFilter() : "fragment" in t ? (r = t.fragment, e = [r.topicHash]) : V(!1, "unknown event name", "event", t);
  e = e.map((o) => {
    if (o == null)
      return null;
    if (Array.isArray(o)) {
      const a = Array.from(new Set(o.map((u) => u.toLowerCase())).values());
      return a.length === 1 ? a[0] : (a.sort(), a);
    }
    return o.toLowerCase();
  });
  const i = e.map((o) => o == null ? "null" : Array.isArray(o) ? o.join("|") : o).join("&");
  return { fragment: r, tag: i, topics: e };
}
async function Ss(n, t) {
  const { subs: e } = Te(n);
  return e.get((await e_(n, t)).tag) || null;
}
async function mf(n, t, e) {
  const r = zi(n.runner);
  _t(r, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation: t });
  const { fragment: i, tag: o, topics: a } = await e_(n, e), { addr: u, subs: _ } = Te(n);
  let l = _.get(o);
  if (!l) {
    const g = { address: u || n, topics: a }, y = (T) => {
      let A = i;
      if (A == null)
        try {
          A = n.interface.getEvent(T.topics[0]);
        } catch {
        }
      if (A) {
        const R = A, P = i ? n.interface.decodeEventLog(i, T.data, T.topics) : [];
        zu(n, e, P, (z) => new C1(n, z, e, R, T));
      } else
        zu(n, e, [], (R) => new Ud(n, R, e, T));
    };
    let B = [];
    l = { tag: o, listeners: [], start: () => {
      B.length || B.push(r.on(g, y));
    }, stop: async () => {
      if (B.length == 0)
        return;
      let T = B;
      B = [], await Promise.all(T), r.off(g, y);
    } }, _.set(o, l);
  }
  return l;
}
let Ru = Promise.resolve();
async function H1(n, t, e, r) {
  await Ru;
  const i = await Ss(n, t);
  if (!i)
    return !1;
  const o = i.listeners.length;
  return i.listeners = i.listeners.filter(({ listener: a, once: u }) => {
    const _ = Array.from(e);
    r && _.push(r(u ? null : a));
    try {
      a.call(n, ..._);
    } catch {
    }
    return !u;
  }), i.listeners.length === 0 && (i.stop(), Te(n).subs.delete(i.tag)), o > 0;
}
async function zu(n, t, e, r) {
  try {
    await Ru;
  } catch {
  }
  const i = H1(n, t, e, r);
  return Ru = i, await i;
}
const _o = ["then"];
class Ts {
  /**
   *  The target to connect to.
   *
   *  This can be an address, ENS name or any [[Addressable]], such as
   *  another contract. To get the resovled address, use the ``getAddress``
   *  method.
   */
  target;
  /**
   *  The contract Interface.
   */
  interface;
  /**
   *  The connected runner. This is generally a [[Provider]] or a
   *  [[Signer]], which dictates what operations are supported.
   *
   *  For example, a **Contract** connected to a [[Provider]] may
   *  only execute read-only operations.
   */
  runner;
  /**
   *  All the Events available on this contract.
   */
  filters;
  /**
   *  @_ignore:
   */
  [To];
  /**
   *  The fallback or receive function if any.
   */
  fallback;
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(t, e, r, i) {
    V(typeof t == "string" || Jw(t), "invalid value for Contract target", "target", t), r == null && (r = null);
    const o = Ei.from(e);
    zt(this, { target: t, runner: r, interface: o }), Object.defineProperty(this, To, { value: {} });
    let a, u = null, _ = null;
    if (i) {
      const g = zi(r);
      _ = new t_(this.interface, g, i);
    }
    let l = /* @__PURE__ */ new Map();
    if (typeof t == "string")
      if (Xt(t))
        u = t, a = Promise.resolve(t);
      else {
        const g = Ni(r, "resolveName");
        if (!$o(g))
          throw te("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        a = g.resolveName(t).then((y) => {
          if (y == null)
            throw te("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: t
            });
          return Te(this).addr = y, y;
        });
      }
    else
      a = t.getAddress().then((g) => {
        if (g == null)
          throw new Error("TODO");
        return Te(this).addr = g, g;
      });
    j1(this, { addrPromise: a, addr: u, deployTx: _, subs: l });
    const f = new Proxy({}, {
      get: (g, y, B) => {
        if (typeof y == "symbol" || _o.indexOf(y) >= 0)
          return Reflect.get(g, y, B);
        try {
          return this.getEvent(y);
        } catch (I) {
          if (!Ae(I, "INVALID_ARGUMENT") || I.argument !== "key")
            throw I;
        }
      },
      has: (g, y) => _o.indexOf(y) >= 0 ? Reflect.has(g, y) : Reflect.has(g, y) || this.interface.hasEvent(String(y))
    });
    return zt(this, { filters: f }), zt(this, {
      fallback: o.receive || o.fallback ? D1(this) : null
    }), new Proxy(this, {
      get: (g, y, B) => {
        if (typeof y == "symbol" || y in g || _o.indexOf(y) >= 0)
          return Reflect.get(g, y, B);
        try {
          return g.getFunction(y);
        } catch (I) {
          if (!Ae(I, "INVALID_ARGUMENT") || I.argument !== "key")
            throw I;
        }
      },
      has: (g, y) => typeof y == "symbol" || y in g || _o.indexOf(y) >= 0 ? Reflect.has(g, y) : g.interface.hasFunction(y)
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(t) {
    return new Ts(this.target, this.interface, t);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(t) {
    return new Ts(t, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await Te(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const t = zi(this.runner);
    _t(t, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const e = await t.getCode(await this.getAddress());
    return e === "0x" ? null : e;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const t = this.deploymentTransaction();
    if (t)
      return await t.wait(), this;
    if (await this.getDeployedCode() != null)
      return this;
    const r = zi(this.runner);
    return _t(r != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" }), new Promise((i, o) => {
      const a = async () => {
        try {
          if (await this.getDeployedCode() != null)
            return i(this);
          r.once("block", a);
        } catch (u) {
          o(u);
        }
      };
      a();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return Te(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(t) {
    return typeof t != "string" && (t = t.format()), U1(this, t);
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(t) {
    return typeof t != "string" && (t = t.format()), M1(this, t);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(t) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(t, e, r) {
    e == null && (e = 0), r == null && (r = "latest");
    const { addr: i, addrPromise: o } = Te(this), a = i || await o, { fragment: u, topics: _ } = await e_(this, t), l = { address: a, topics: _, fromBlock: e, toBlock: r }, f = zi(this.runner);
    return _t(f, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" }), (await f.getLogs(l)).map((g) => {
      let y = u;
      if (y == null)
        try {
          y = this.interface.getEvent(g.topics[0]);
        } catch {
        }
      if (y)
        try {
          return new Xu(g, this.interface, y);
        } catch (B) {
          return new Dd(g, B);
        }
      return new Js(g, f);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(t, e) {
    const r = await mf(this, "on", t);
    return r.listeners.push({ listener: e, once: !1 }), r.start(), this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(t, e) {
    const r = await mf(this, "once", t);
    return r.listeners.push({ listener: e, once: !0 }), r.start(), this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(t, ...e) {
    return await zu(this, t, e, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(t) {
    if (t) {
      const i = await Ss(this, t);
      return i ? i.listeners.length : 0;
    }
    const { subs: e } = Te(this);
    let r = 0;
    for (const { listeners: i } of e.values())
      r += i.length;
    return r;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(t) {
    if (t) {
      const i = await Ss(this, t);
      return i ? i.listeners.map(({ listener: o }) => o) : [];
    }
    const { subs: e } = Te(this);
    let r = [];
    for (const { listeners: i } of e.values())
      r = r.concat(i.map(({ listener: o }) => o));
    return r;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(t, e) {
    const r = await Ss(this, t);
    if (!r)
      return this;
    if (e) {
      const i = r.listeners.map(({ listener: o }) => o).indexOf(e);
      i >= 0 && r.listeners.splice(i, 1);
    }
    return (e == null || r.listeners.length === 0) && (r.stop(), Te(this).subs.delete(r.tag)), this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(t) {
    if (t) {
      const e = await Ss(this, t);
      if (!e)
        return this;
      e.stop(), Te(this).subs.delete(e.tag);
    } else {
      const { subs: e } = Te(this);
      for (const { tag: r, stop: i } of e.values())
        i(), e.delete(r);
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(t, e) {
    return await this.on(t, e);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(t, e) {
    return await this.off(t, e);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(t) {
    class e extends Ts {
      constructor(i, o = null) {
        super(i, t, o);
      }
    }
    return e;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(t, e, r) {
    return r == null && (r = null), new this(t, e, r);
  }
}
function V1() {
  return Ts;
}
class Ze extends V1() {
}
function La(n) {
  return n.match(/^ipfs:\/\/ipfs\//i) ? n = n.substring(12) : n.match(/^ipfs:\/\//i) ? n = n.substring(7) : V(!1, "unsupported IPFS format", "link", n), `https://gateway.ipfs.io/ipfs/${n}`;
}
class q1 {
  /**
   *  The name.
   */
  name;
  /**
   *  Creates a new **MulticoinProviderPluing** for %%name%%.
   */
  constructor(t) {
    zt(this, { name: t });
  }
  connect(t) {
    return this;
  }
  /**
   *  Returns ``true`` if %%coinType%% is supported by this plugin.
   */
  supportsCoinType(t) {
    return !1;
  }
  /**
   *  Resolves to the encoded %%address%% for %%coinType%%.
   */
  async encodeAddress(t, e) {
    throw new Error("unsupported coin");
  }
  /**
   *  Resolves to the decoded %%data%% for %%coinType%%.
   */
  async decodeAddress(t, e) {
    throw new Error("unsupported coin");
  }
}
const Qd = new RegExp("^(ipfs)://(.*)$", "i"), Af = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  Qd,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
class Zi {
  /**
   *  The connected provider.
   */
  provider;
  /**
   *  The address of the resolver.
   */
  address;
  /**
   *  The name this resolver was resolved against.
   */
  name;
  // For EIP-2544 names, the ancestor that provided the resolver
  #t;
  #e;
  constructor(t, e, r) {
    zt(this, { provider: t, address: e, name: r }), this.#t = null, this.#e = new Ze(e, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], t);
  }
  /**
   *  Resolves to true if the resolver supports wildcard resolution.
   */
  async supportsWildcard() {
    return this.#t == null && (this.#t = (async () => {
      try {
        return await this.#e.supportsInterface("0x9061b923");
      } catch (t) {
        if (Ae(t, "CALL_EXCEPTION"))
          return !1;
        throw this.#t = null, t;
      }
    })()), await this.#t;
  }
  async #r(t, e) {
    e = (e || []).slice();
    const r = this.#e.interface;
    e.unshift(xu(this.name));
    let i = null;
    await this.supportsWildcard() && (i = r.getFunction(t), _t(i, "missing fragment", "UNKNOWN_ERROR", {
      info: { funcName: t }
    }), e = [
      o1(this.name, 255),
      r.encodeFunctionData(i, e)
    ], t = "resolve(bytes,bytes)"), e.push({
      enableCcipRead: !0
    });
    try {
      const o = await this.#e[t](...e);
      return i ? r.decodeFunctionResult(i, o)[0] : o;
    } catch (o) {
      if (!Ae(o, "CALL_EXCEPTION"))
        throw o;
    }
    return null;
  }
  /**
   *  Resolves to the address for %%coinType%% or null if the
   *  provided %%coinType%% has not been configured.
   */
  async getAddress(t) {
    if (t == null && (t = 60), t === 60)
      try {
        const o = await this.#r("addr(bytes32)");
        return o == null || o === Ls ? null : o;
      } catch (o) {
        if (Ae(o, "CALL_EXCEPTION"))
          return null;
        throw o;
      }
    if (t >= 0 && t < 2147483648) {
      let o = t + 2147483648;
      const a = await this.#r("addr(bytes32,uint)", [o]);
      if (Xt(a, 20))
        return Ut(a);
    }
    let e = null;
    for (const o of this.provider.plugins)
      if (o instanceof q1 && o.supportsCoinType(t)) {
        e = o;
        break;
      }
    if (e == null)
      return null;
    const r = await this.#r("addr(bytes32,uint)", [t]);
    if (r == null || r === "0x")
      return null;
    const i = await e.decodeAddress(t, r);
    if (i != null)
      return i;
    _t(!1, "invalid coin data", "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${t})`,
      info: { coinType: t, data: r }
    });
  }
  /**
   *  Resolves to the EIP-634 text record for %%key%%, or ``null``
   *  if unconfigured.
   */
  async getText(t) {
    const e = await this.#r("text(bytes32,string)", [t]);
    return e == null || e === "0x" ? null : e;
  }
  /**
   *  Rsolves to the content-hash or ``null`` if unconfigured.
   */
  async getContentHash() {
    const t = await this.#r("contenthash(bytes32)");
    if (t == null || t === "0x")
      return null;
    const e = t.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (e) {
      const i = e[1] === "e3010170" ? "ipfs" : "ipns", o = parseInt(e[4], 16);
      if (e[5].length === o * 2)
        return `${i}://${t0("0x" + e[2])}`;
    }
    const r = t.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (r && r[1].length === 64)
      return `bzz://${r[1]}`;
    _t(!1, "invalid or unsupported content hash data", "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data: t }
    });
  }
  /**
   *  Resolves to the avatar url or ``null`` if the avatar is either
   *  unconfigured or incorrectly configured (e.g. references an NFT
   *  not owned by the address).
   *
   *  If diagnosing issues with configurations, the [[_getAvatar]]
   *  method may be useful.
   */
  async getAvatar() {
    return (await this._getAvatar()).url;
  }
  /**
   *  When resolving an avatar, there are many steps involved, such
   *  fetching metadata and possibly validating ownership of an
   *  NFT.
   *
   *  This method can be used to examine each step and the value it
   *  was working from.
   */
  async _getAvatar() {
    const t = [{ type: "name", value: this.name }];
    try {
      const e = await this.getText("avatar");
      if (e == null)
        return t.push({ type: "!avatar", value: "" }), { url: null, linkage: t };
      t.push({ type: "avatar", value: e });
      for (let r = 0; r < Af.length; r++) {
        const i = e.match(Af[r]);
        if (i == null)
          continue;
        const o = i[1].toLowerCase();
        switch (o) {
          case "https":
          case "data":
            return t.push({ type: "url", value: e }), { linkage: t, url: e };
          case "ipfs": {
            const a = La(e);
            return t.push({ type: "ipfs", value: e }), t.push({ type: "url", value: a }), { linkage: t, url: a };
          }
          case "erc721":
          case "erc1155": {
            const a = o === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            t.push({ type: o, value: e });
            const u = await this.getAddress();
            if (u == null)
              return t.push({ type: "!owner", value: "" }), { url: null, linkage: t };
            const _ = (i[2] || "").split("/");
            if (_.length !== 2)
              return t.push({ type: `!${o}caip`, value: i[2] || "" }), { url: null, linkage: t };
            const l = _[1], f = new Ze(_[0], [
              // ERC-721
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              // ERC-1155
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (o === "erc721") {
              const S = await f.ownerOf(l);
              if (u !== S)
                return t.push({ type: "!owner", value: S }), { url: null, linkage: t };
              t.push({ type: "owner", value: S });
            } else if (o === "erc1155") {
              const S = await f.balanceOf(u, l);
              if (!S)
                return t.push({ type: "!balance", value: "0" }), { url: null, linkage: t };
              t.push({ type: "balance", value: S.toString() });
            }
            let g = await f[a](l);
            if (g == null || g === "0x")
              return t.push({ type: "!metadata-url", value: "" }), { url: null, linkage: t };
            t.push({ type: "metadata-url-base", value: g }), o === "erc1155" && (g = g.replace("{id}", _i(l, 32).substring(2)), t.push({ type: "metadata-url-expanded", value: g })), g.match(/^ipfs:/i) && (g = La(g)), t.push({ type: "metadata-url", value: g });
            let y = {};
            const B = await new fr(g).send();
            B.assertOk();
            try {
              y = B.bodyJson;
            } catch {
              try {
                t.push({ type: "!metadata", value: B.bodyText });
              } catch {
                const A = B.body;
                return A && t.push({ type: "!metadata", value: gt(A) }), { url: null, linkage: t };
              }
              return { url: null, linkage: t };
            }
            if (!y)
              return t.push({ type: "!metadata", value: "" }), { url: null, linkage: t };
            t.push({ type: "metadata", value: JSON.stringify(y) });
            let I = y.image;
            if (typeof I != "string")
              return t.push({ type: "!imageUrl", value: "" }), { url: null, linkage: t };
            if (!I.match(/^(https:\/\/|data:)/i)) {
              if (I.match(Qd) == null)
                return t.push({ type: "!imageUrl-ipfs", value: I }), { url: null, linkage: t };
              t.push({ type: "imageUrl-ipfs", value: I }), I = La(I);
            }
            return t.push({ type: "url", value: I }), { linkage: t, url: I };
          }
        }
      }
    } catch {
    }
    return { linkage: t, url: null };
  }
  static async getEnsAddress(t) {
    const e = await t.getNetwork(), r = e.getPlugin("org.ethers.plugins.network.Ens");
    return _t(r, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network: e }
    }), r.address;
  }
  static async #n(t, e) {
    const r = await Zi.getEnsAddress(t);
    try {
      const o = await new Ze(r, [
        "function resolver(bytes32) view returns (address)"
      ], t).resolver(xu(e), {
        enableCcipRead: !0
      });
      return o === Ls ? null : o;
    } catch (i) {
      throw i;
    }
    return null;
  }
  /**
   *  Resolve to the ENS resolver for %%name%% using %%provider%% or
   *  ``null`` if unconfigured.
   */
  static async fromName(t, e) {
    let r = e;
    for (; ; ) {
      if (r === "" || r === "." || e !== "eth" && r === "eth")
        return null;
      const i = await Zi.#n(t, r);
      if (i != null) {
        const o = new Zi(t, i, e);
        return r !== e && !await o.supportsWildcard() ? null : o;
      }
      r = r.split(".").slice(1).join(".");
    }
  }
}
const Ef = BigInt(0);
function Nt(n, t) {
  return function(e) {
    return e == null ? t : n(e);
  };
}
function Hs(n, t) {
  return (e) => {
    if (t && e == null)
      return null;
    if (!Array.isArray(e))
      throw new Error("not an array");
    return e.map((r) => n(r));
  };
}
function Ys(n, t) {
  return (e) => {
    const r = {};
    for (const i in n) {
      let o = i;
      if (t && i in t && !(o in e)) {
        for (const a of t[i])
          if (a in e) {
            o = a;
            break;
          }
      }
      try {
        const a = n[i](e[o]);
        a !== void 0 && (r[i] = a);
      } catch (a) {
        const u = a instanceof Error ? a.message : "not-an-error";
        _t(!1, `invalid value for value.${i} (${u})`, "BAD_DATA", { value: e });
      }
    }
    return r;
  };
}
function Q1(n) {
  switch (n) {
    case !0:
    case "true":
      return !0;
    case !1:
    case "false":
      return !1;
  }
  V(!1, `invalid boolean; ${JSON.stringify(n)}`, "value", n);
}
function _s(n) {
  return V(Xt(n, !0), "invalid data", "value", n), n;
}
function me(n) {
  return V(Xt(n, 32), "invalid hash", "value", n), n;
}
const K1 = Ys({
  address: Ut,
  blockHash: me,
  blockNumber: Tt,
  data: _s,
  index: Tt,
  removed: Nt(Q1, !1),
  topics: Hs(me),
  transactionHash: me,
  transactionIndex: Tt
}, {
  index: ["logIndex"]
});
function W1(n) {
  return K1(n);
}
const J1 = Ys({
  hash: Nt(me),
  parentHash: me,
  parentBeaconBlockRoot: Nt(me, null),
  number: Tt,
  timestamp: Tt,
  nonce: Nt(_s),
  difficulty: mt,
  gasLimit: mt,
  gasUsed: mt,
  stateRoot: Nt(me, null),
  receiptsRoot: Nt(me, null),
  blobGasUsed: Nt(mt, null),
  excessBlobGas: Nt(mt, null),
  miner: Nt(Ut),
  prevRandao: Nt(me, null),
  extraData: _s,
  baseFeePerGas: Nt(mt)
}, {
  prevRandao: ["mixHash"]
});
function $1(n) {
  const t = J1(n);
  return t.transactions = n.transactions.map((e) => typeof e == "string" ? e : Kd(e)), t;
}
const Y1 = Ys({
  transactionIndex: Tt,
  blockNumber: Tt,
  transactionHash: me,
  address: Ut,
  topics: Hs(me),
  data: _s,
  index: Tt,
  blockHash: me
}, {
  index: ["logIndex"]
});
function Z1(n) {
  return Y1(n);
}
const X1 = Ys({
  to: Nt(Ut, null),
  from: Nt(Ut, null),
  contractAddress: Nt(Ut, null),
  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
  index: Tt,
  root: Nt(gt),
  gasUsed: mt,
  blobGasUsed: Nt(mt, null),
  logsBloom: Nt(_s),
  blockHash: me,
  hash: me,
  logs: Hs(Z1),
  blockNumber: Tt,
  //confirmations: allowNull(getNumber, null),
  cumulativeGasUsed: mt,
  effectiveGasPrice: Nt(mt),
  blobGasPrice: Nt(mt, null),
  status: Nt(Tt),
  type: Nt(Tt, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});
function tm(n) {
  return X1(n);
}
function Kd(n) {
  n.to && mt(n.to) === Ef && (n.to = "0x0000000000000000000000000000000000000000");
  const t = Ys({
    hash: me,
    // Some nodes do not return this, usually test nodes (like Ganache)
    index: Nt(Tt, void 0),
    type: (e) => e === "0x" || e == null ? 0 : Tt(e),
    accessList: Nt(Li, null),
    blobVersionedHashes: Nt(Hs(me, !0), null),
    authorizationList: Nt(Hs((e) => {
      let r;
      if (e.signature)
        r = e.signature;
      else {
        let i = e.yParity;
        i === "0x1b" ? i = 0 : i === "0x1c" && (i = 1), r = Object.assign({}, e, { yParity: i });
      }
      return {
        address: Ut(e.address),
        chainId: mt(e.chainId),
        nonce: mt(e.nonce),
        signature: ie.from(r)
      };
    }, !1), null),
    blockHash: Nt(me, null),
    blockNumber: Nt(Tt, null),
    transactionIndex: Nt(Tt, null),
    from: Ut,
    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
    gasPrice: Nt(mt),
    maxPriorityFeePerGas: Nt(mt),
    maxFeePerGas: Nt(mt),
    maxFeePerBlobGas: Nt(mt, null),
    gasLimit: mt,
    to: Nt(Ut, null),
    value: mt,
    nonce: Tt,
    data: _s,
    creates: Nt(Ut, null),
    chainId: Nt(mt, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"],
    index: ["transactionIndex"]
  })(n);
  if (t.to == null && t.creates == null && (t.creates = Hy(t)), (n.type === 1 || n.type === 2) && n.accessList == null && (t.accessList = []), n.signature ? t.signature = ie.from(n.signature) : t.signature = ie.from(n), t.chainId == null) {
    const e = t.signature.legacyChainId;
    e != null && (t.chainId = e);
  }
  return t.blockHash && mt(t.blockHash) === Ef && (t.blockHash = null), t;
}
const em = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
class Zs {
  /**
   *  The name of the plugin.
   *
   *  It is recommended to use reverse-domain-notation, which permits
   *  unique names with a known authority as well as hierarchal entries.
   */
  name;
  /**
   *  Creates a new **NetworkPlugin**.
   */
  constructor(t) {
    zt(this, { name: t });
  }
  /**
   *  Creates a copy of this plugin.
   */
  clone() {
    return new Zs(this.name);
  }
}
class Yo extends Zs {
  /**
   *  The block number to treat these values as valid from.
   *
   *  This allows a hardfork to have updated values included as well as
   *  mulutiple hardforks to be supported.
   */
  effectiveBlock;
  /**
   *  The transactions base fee.
   */
  txBase;
  /**
   *  The fee for creating a new account.
   */
  txCreate;
  /**
   *  The fee per zero-byte in the data.
   */
  txDataZero;
  /**
   *  The fee per non-zero-byte in the data.
   */
  txDataNonzero;
  /**
   *  The fee per storage key in the [[link-eip-2930]] access list.
   */
  txAccessListStorageKey;
  /**
   *  The fee per address in the [[link-eip-2930]] access list.
   */
  txAccessListAddress;
  /**
   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
   *  latest block or another GasCostPlugin supercedes that block number,
   *  with the associated %%costs%%.
   */
  constructor(t, e) {
    t == null && (t = 0), super(`org.ethers.network.plugins.GasCost#${t || 0}`);
    const r = { effectiveBlock: t };
    function i(o, a) {
      let u = (e || {})[o];
      u == null && (u = a), V(typeof u == "number", `invalud value for ${o}`, "costs", e), r[o] = u;
    }
    i("txBase", 21e3), i("txCreate", 32e3), i("txDataZero", 4), i("txDataNonzero", 16), i("txAccessListStorageKey", 1900), i("txAccessListAddress", 2400), zt(this, r);
  }
  clone() {
    return new Yo(this.effectiveBlock, this);
  }
}
class Zo extends Zs {
  /**
   *  The ENS Registrty Contract address.
   */
  address;
  /**
   *  The chain ID that the ENS contract lives on.
   */
  targetNetwork;
  /**
   *  Creates a new **EnsPlugin** connected to %%address%% on the
   *  %%targetNetwork%%. The default ENS address and mainnet is used
   *  if unspecified.
   */
  constructor(t, e) {
    super("org.ethers.plugins.network.Ens"), zt(this, {
      address: t || em,
      targetNetwork: e ?? 1
    });
  }
  clone() {
    return new Zo(this.address, this.targetNetwork);
  }
}
class rm extends Zs {
  #t;
  #e;
  /**
   *  The URL to initialize the FetchRequest with in %%processFunc%%.
   */
  get url() {
    return this.#t;
  }
  /**
   *  The callback to use when computing the FeeData.
   */
  get processFunc() {
    return this.#e;
  }
  /**
   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
   *  be used when computing the fee data for the network.
   */
  constructor(t, e) {
    super("org.ethers.plugins.network.FetchUrlFeeDataPlugin"), this.#t = t, this.#e = e;
  }
  // We are immutable, so we can serve as our own clone
  clone() {
    return this;
  }
}
const Da = /* @__PURE__ */ new Map();
class Ce {
  #t;
  #e;
  #r;
  /**
   *  Creates a new **Network** for %%name%% and %%chainId%%.
   */
  constructor(t, e) {
    this.#t = t, this.#e = mt(e), this.#r = /* @__PURE__ */ new Map();
  }
  /**
   *  Returns a JSON-compatible representation of a Network.
   */
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  /**
   *  The network common name.
   *
   *  This is the canonical name, as networks migh have multiple
   *  names.
   */
  get name() {
    return this.#t;
  }
  set name(t) {
    this.#t = t;
  }
  /**
   *  The network chain ID.
   */
  get chainId() {
    return this.#e;
  }
  set chainId(t) {
    this.#e = mt(t, "chainId");
  }
  /**
   *  Returns true if %%other%% matches this network. Any chain ID
   *  must match, and if no chain ID is present, the name must match.
   *
   *  This method does not currently check for additional properties,
   *  such as ENS address or plug-in compatibility.
   */
  matches(t) {
    if (t == null)
      return !1;
    if (typeof t == "string") {
      try {
        return this.chainId === mt(t);
      } catch {
      }
      return this.name === t;
    }
    if (typeof t == "number" || typeof t == "bigint") {
      try {
        return this.chainId === mt(t);
      } catch {
      }
      return !1;
    }
    if (typeof t == "object") {
      if (t.chainId != null) {
        try {
          return this.chainId === mt(t.chainId);
        } catch {
        }
        return !1;
      }
      return t.name != null ? this.name === t.name : !1;
    }
    return !1;
  }
  /**
   *  Returns the list of plugins currently attached to this Network.
   */
  get plugins() {
    return Array.from(this.#r.values());
  }
  /**
   *  Attach a new %%plugin%% to this Network. The network name
   *  must be unique, excluding any fragment.
   */
  attachPlugin(t) {
    if (this.#r.get(t.name))
      throw new Error(`cannot replace existing plugin: ${t.name} `);
    return this.#r.set(t.name, t.clone()), this;
  }
  /**
   *  Return the plugin, if any, matching %%name%% exactly. Plugins
   *  with fragments will not be returned unless %%name%% includes
   *  a fragment.
   */
  getPlugin(t) {
    return this.#r.get(t) || null;
  }
  /**
   *  Gets a list of all plugins that match %%name%%, with otr without
   *  a fragment.
   */
  getPlugins(t) {
    return this.plugins.filter((e) => e.name.split("#")[0] === t);
  }
  /**
   *  Create a copy of this Network.
   */
  clone() {
    const t = new Ce(this.name, this.chainId);
    return this.plugins.forEach((e) => {
      t.attachPlugin(e.clone());
    }), t;
  }
  /**
   *  Compute the intrinsic gas required for a transaction.
   *
   *  A GasCostPlugin can be attached to override the default
   *  values.
   */
  computeIntrinsicGas(t) {
    const e = this.getPlugin("org.ethers.plugins.network.GasCost") || new Yo();
    let r = e.txBase;
    if (t.to == null && (r += e.txCreate), t.data)
      for (let i = 2; i < t.data.length; i += 2)
        t.data.substring(i, i + 2) === "00" ? r += e.txDataZero : r += e.txDataNonzero;
    if (t.accessList) {
      const i = Li(t.accessList);
      for (const o in i)
        r += e.txAccessListAddress + e.txAccessListStorageKey * i[o].storageKeys.length;
    }
    return r;
  }
  /**
   *  Returns a new Network for the %%network%% name or chainId.
   */
  static from(t) {
    if (nm(), t == null)
      return Ce.from("mainnet");
    if (typeof t == "number" && (t = BigInt(t)), typeof t == "string" || typeof t == "bigint") {
      const e = Da.get(t);
      if (e)
        return e();
      if (typeof t == "bigint")
        return new Ce("unknown", t);
      V(!1, "unknown network", "network", t);
    }
    if (typeof t.clone == "function")
      return t.clone();
    if (typeof t == "object") {
      V(typeof t.name == "string" && typeof t.chainId == "number", "invalid network object name or chainId", "network", t);
      const e = new Ce(t.name, t.chainId);
      return (t.ensAddress || t.ensNetwork != null) && e.attachPlugin(new Zo(t.ensAddress, t.ensNetwork)), e;
    }
    V(!1, "invalid network", "network", t);
  }
  /**
   *  Register %%nameOrChainId%% with a function which returns
   *  an instance of a Network representing that chain.
   */
  static register(t, e) {
    typeof t == "number" && (t = BigInt(t));
    const r = Da.get(t);
    r && V(!1, `conflicting network for ${JSON.stringify(r.name)}`, "nameOrChainId", t), Da.set(t, e);
  }
}
function vf(n, t) {
  const e = String(n);
  if (!e.match(/^[0-9.]+$/))
    throw new Error(`invalid gwei value: ${n}`);
  const r = e.split(".");
  if (r.length === 1 && r.push(""), r.length !== 2)
    throw new Error(`invalid gwei value: ${n}`);
  for (; r[1].length < t; )
    r[1] += "0";
  if (r[1].length > 9) {
    let i = BigInt(r[1].substring(0, 9));
    r[1].substring(9).match(/^0+$/) || i++, r[1] = i.toString();
  }
  return BigInt(r[0] + r[1]);
}
function xf(n) {
  return new rm(n, async (t, e, r) => {
    r.setHeader("User-Agent", "ethers");
    let i;
    try {
      const [o, a] = await Promise.all([
        r.send(),
        t()
      ]);
      i = o;
      const u = i.bodyJson.standard;
      return {
        gasPrice: a.gasPrice,
        maxFeePerGas: vf(u.maxFee, 9),
        maxPriorityFeePerGas: vf(u.maxPriorityFee, 9)
      };
    } catch (o) {
      _t(!1, `error encountered with polygon gas station (${JSON.stringify(r.url)})`, "SERVER_ERROR", { request: r, response: i, error: o });
    }
  });
}
let Rf = !1;
function nm() {
  if (Rf)
    return;
  Rf = !0;
  function n(t, e, r) {
    const i = function() {
      const o = new Ce(t, e);
      return r.ensNetwork != null && o.attachPlugin(new Zo(null, r.ensNetwork)), o.attachPlugin(new Yo()), (r.plugins || []).forEach((a) => {
        o.attachPlugin(a);
      }), o;
    };
    Ce.register(t, i), Ce.register(e, i), r.altNames && r.altNames.forEach((o) => {
      Ce.register(o, i);
    });
  }
  n("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] }), n("ropsten", 3, { ensNetwork: 3 }), n("rinkeby", 4, { ensNetwork: 4 }), n("goerli", 5, { ensNetwork: 5 }), n("kovan", 42, { ensNetwork: 42 }), n("sepolia", 11155111, { ensNetwork: 11155111 }), n("holesky", 17e3, { ensNetwork: 17e3 }), n("classic", 61, {}), n("classicKotti", 6, {}), n("arbitrum", 42161, {
    ensNetwork: 1
  }), n("arbitrum-goerli", 421613, {}), n("arbitrum-sepolia", 421614, {}), n("base", 8453, { ensNetwork: 1 }), n("base-goerli", 84531, {}), n("base-sepolia", 84532, {}), n("bnb", 56, { ensNetwork: 1 }), n("bnbt", 97, {}), n("linea", 59144, { ensNetwork: 1 }), n("linea-goerli", 59140, {}), n("linea-sepolia", 59141, {}), n("matic", 137, {
    ensNetwork: 1,
    plugins: [
      xf("https://gasstation.polygon.technology/v2")
    ]
  }), n("matic-amoy", 80002, {}), n("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      xf("https://gasstation-testnet.polygon.technology/v2")
    ]
  }), n("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  }), n("optimism-goerli", 420, {}), n("optimism-sepolia", 11155420, {}), n("xdai", 100, { ensNetwork: 1 });
}
function Bu(n) {
  return JSON.parse(JSON.stringify(n));
}
class im {
  #t;
  #e;
  #r;
  // The most recent block we have scanned for events. The value -2
  // indicates we still need to fetch an initial block number
  #n;
  /**
   *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
   */
  constructor(t) {
    this.#t = t, this.#e = null, this.#r = 4e3, this.#n = -2;
  }
  /**
   *  The polling interval.
   */
  get pollingInterval() {
    return this.#r;
  }
  set pollingInterval(t) {
    this.#r = t;
  }
  async #i() {
    try {
      const t = await this.#t.getBlockNumber();
      if (this.#n === -2) {
        this.#n = t;
        return;
      }
      if (t !== this.#n) {
        for (let e = this.#n + 1; e <= t; e++) {
          if (this.#e == null)
            return;
          await this.#t.emit("block", e);
        }
        this.#n = t;
      }
    } catch {
    }
    this.#e != null && (this.#e = this.#t._setTimeout(this.#i.bind(this), this.#r));
  }
  start() {
    this.#e || (this.#e = this.#t._setTimeout(this.#i.bind(this), this.#r), this.#i());
  }
  stop() {
    this.#e && (this.#t._clearTimeout(this.#e), this.#e = null);
  }
  pause(t) {
    this.stop(), t && (this.#n = -2);
  }
  resume() {
    this.start();
  }
}
class r_ {
  #t;
  #e;
  #r;
  /**
   *  Create a new **OnBlockSubscriber** attached to %%provider%%.
   */
  constructor(t) {
    this.#t = t, this.#r = !1, this.#e = (e) => {
      this._poll(e, this.#t);
    };
  }
  /**
   *  Called on every new block.
   */
  async _poll(t, e) {
    throw new Error("sub-classes must override this");
  }
  start() {
    this.#r || (this.#r = !0, this.#e(-2), this.#t.on("block", this.#e));
  }
  stop() {
    this.#r && (this.#r = !1, this.#t.off("block", this.#e));
  }
  pause(t) {
    this.stop();
  }
  resume() {
    this.start();
  }
}
class sm extends r_ {
  #t;
  #e;
  constructor(t, e) {
    super(t), this.#t = e, this.#e = -2;
  }
  pause(t) {
    t && (this.#e = -2), super.pause(t);
  }
  async _poll(t, e) {
    const r = await e.getBlock(this.#t);
    r != null && (this.#e === -2 ? this.#e = r.number : r.number > this.#e && (e.emit(this.#t, r.number), this.#e = r.number));
  }
}
class om extends r_ {
  #t;
  constructor(t, e) {
    super(t), this.#t = Bu(e);
  }
  async _poll(t, e) {
    throw new Error("@TODO");
  }
}
class am extends r_ {
  #t;
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%hash%%.
   */
  constructor(t, e) {
    super(t), this.#t = e;
  }
  async _poll(t, e) {
    const r = await e.getTransactionReceipt(this.#t);
    r && e.emit(this.#t, r);
  }
}
class n_ {
  #t;
  #e;
  #r;
  #n;
  // The most recent block we have scanned for events. The value -2
  // indicates we still need to fetch an initial block number
  #i;
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%filter%%.
   */
  constructor(t, e) {
    this.#t = t, this.#e = Bu(e), this.#r = this.#o.bind(this), this.#n = !1, this.#i = -2;
  }
  async #o(t) {
    if (this.#i === -2)
      return;
    const e = Bu(this.#e);
    e.fromBlock = this.#i + 1, e.toBlock = t;
    const r = await this.#t.getLogs(e);
    if (r.length === 0) {
      this.#i < t - 60 && (this.#i = t - 60);
      return;
    }
    for (const i of r)
      this.#t.emit(this.#e, i), this.#i = i.blockNumber;
  }
  start() {
    this.#n || (this.#n = !0, this.#i === -2 && this.#t.getBlockNumber().then((t) => {
      this.#i = t;
    }), this.#t.on("block", this.#r));
  }
  stop() {
    this.#n && (this.#n = !1, this.#t.off("block", this.#r));
  }
  pause(t) {
    this.stop(), t && (this.#i = -2);
  }
  resume() {
    this.start();
  }
}
const cm = BigInt(2), um = 10;
function fo(n) {
  return n && typeof n.then == "function";
}
function bo(n, t) {
  return n + ":" + JSON.stringify(t, (e, r) => {
    if (r == null)
      return "null";
    if (typeof r == "bigint")
      return `bigint:${r.toString()}`;
    if (typeof r == "string")
      return r.toLowerCase();
    if (typeof r == "object" && !Array.isArray(r)) {
      const i = Object.keys(r);
      return i.sort(), i.reduce((o, a) => (o[a] = r[a], o), {});
    }
    return r;
  });
}
class Wd {
  /**
   *  The name fof the event.
   */
  name;
  /**
   *  Create a new UnmanagedSubscriber with %%name%%.
   */
  constructor(t) {
    zt(this, { name: t });
  }
  start() {
  }
  stop() {
  }
  pause(t) {
  }
  resume() {
  }
}
function _m(n) {
  return JSON.parse(JSON.stringify(n));
}
function Su(n) {
  return n = Array.from(new Set(n).values()), n.sort(), n;
}
async function Ua(n, t) {
  if (n == null)
    throw new Error("invalid event");
  if (Array.isArray(n) && (n = { topics: n }), typeof n == "string")
    switch (n) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe":
        return { type: n, tag: n };
    }
  if (Xt(n, 32)) {
    const e = n.toLowerCase();
    return { type: "transaction", tag: bo("tx", { hash: e }), hash: e };
  }
  if (n.orphan) {
    const e = n;
    return { type: "orphan", tag: bo("orphan", e), filter: _m(e) };
  }
  if (n.address || n.topics) {
    const e = n, r = {
      topics: (e.topics || []).map((i) => i == null ? null : Array.isArray(i) ? Su(i.map((o) => o.toLowerCase())) : i.toLowerCase())
    };
    if (e.address) {
      const i = [], o = [], a = (u) => {
        Xt(u) ? i.push(u) : o.push((async () => {
          i.push(await ze(u, t));
        })());
      };
      Array.isArray(e.address) ? e.address.forEach(a) : a(e.address), o.length && await Promise.all(o), r.address = Su(i.map((u) => u.toLowerCase()));
    }
    return { filter: r, tag: bo("event", r), type: "event" };
  }
  V(!1, "unknown ProviderEvent", "event", n);
}
function Ma() {
  return (/* @__PURE__ */ new Date()).getTime();
}
const fm = {
  cacheTimeout: 250,
  pollingInterval: 4e3
};
class lm {
  #t;
  #e;
  // null=unpaused, true=paused+dropWhilePaused, false=paused
  #r;
  #n;
  #i;
  #o;
  #s;
  // The most recent block number if running an event or -1 if no "block" event
  #a;
  #h;
  #u;
  #p;
  #w;
  /**
   *  Create a new **AbstractProvider** connected to %%network%%, or
   *  use the various network detection capabilities to discover the
   *  [[Network]] if necessary.
   */
  constructor(t, e) {
    if (this.#w = Object.assign({}, fm, e || {}), t === "any")
      this.#o = !0, this.#i = null;
    else if (t) {
      const r = Ce.from(t);
      this.#o = !1, this.#i = Promise.resolve(r), setTimeout(() => {
        this.emit("network", r, null);
      }, 0);
    } else
      this.#o = !1, this.#i = null;
    this.#a = -1, this.#s = /* @__PURE__ */ new Map(), this.#t = /* @__PURE__ */ new Map(), this.#e = /* @__PURE__ */ new Map(), this.#r = null, this.#n = !1, this.#h = 1, this.#u = /* @__PURE__ */ new Map(), this.#p = !1;
  }
  get pollingInterval() {
    return this.#w.pollingInterval;
  }
  /**
   *  Returns ``this``, to allow an **AbstractProvider** to implement
   *  the [[ContractRunner]] interface.
   */
  get provider() {
    return this;
  }
  /**
   *  Returns all the registered plug-ins.
   */
  get plugins() {
    return Array.from(this.#e.values());
  }
  /**
   *  Attach a new plug-in.
   */
  attachPlugin(t) {
    if (this.#e.get(t.name))
      throw new Error(`cannot replace existing plugin: ${t.name} `);
    return this.#e.set(t.name, t.connect(this)), this;
  }
  /**
   *  Get a plugin by name.
   */
  getPlugin(t) {
    return this.#e.get(t) || null;
  }
  /**
   *  Prevent any CCIP-read operation, regardless of whether requested
   *  in a [[call]] using ``enableCcipRead``.
   */
  get disableCcipRead() {
    return this.#p;
  }
  set disableCcipRead(t) {
    this.#p = !!t;
  }
  // Shares multiple identical requests made during the same 250ms
  async #c(t) {
    const e = this.#w.cacheTimeout;
    if (e < 0)
      return await this._perform(t);
    const r = bo(t.method, t);
    let i = this.#s.get(r);
    return i || (i = this._perform(t), this.#s.set(r, i), setTimeout(() => {
      this.#s.get(r) === i && this.#s.delete(r);
    }, e)), await i;
  }
  /**
   *  Resolves to the data for executing the CCIP-read operations.
   */
  async ccipReadFetch(t, e, r) {
    if (this.disableCcipRead || r.length === 0 || t.to == null)
      return null;
    const i = t.to.toLowerCase(), o = e.toLowerCase(), a = [];
    for (let u = 0; u < r.length; u++) {
      const _ = r[u], l = _.replace("{sender}", i).replace("{data}", o), f = new fr(l);
      _.indexOf("{data}") === -1 && (f.body = { data: o, sender: i }), this.emit("debug", { action: "sendCcipReadFetchRequest", request: f, index: u, urls: r });
      let g = "unknown error", y;
      try {
        y = await f.send();
      } catch (B) {
        a.push(B.message), this.emit("debug", { action: "receiveCcipReadFetchError", request: f, result: { error: B } });
        continue;
      }
      try {
        const B = y.bodyJson;
        if (B.data)
          return this.emit("debug", { action: "receiveCcipReadFetchResult", request: f, result: B }), B.data;
        B.message && (g = B.message), this.emit("debug", { action: "receiveCcipReadFetchError", request: f, result: B });
      } catch {
      }
      _t(y.statusCode < 400 || y.statusCode >= 500, `response not found during CCIP fetch: ${g}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: t, info: { url: _, errorMessage: g } }), a.push(g);
    }
    _t(!1, `error encountered during CCIP fetch: ${a.map((u) => JSON.stringify(u)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: t,
      info: { urls: r, errorMessages: a }
    });
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a block before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Block]].
   */
  _wrapBlock(t, e) {
    return new F1($1(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a log before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Log]].
   */
  _wrapLog(t, e) {
    return new Js(W1(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  receipt before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionReceipt]].
   */
  _wrapTransactionReceipt(t, e) {
    return new Cd(tm(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  response before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionResponse]].
   */
  _wrapTransactionResponse(t, e) {
    return new $s(Kd(t), this);
  }
  /**
   *  Resolves to the Network, forcing a network detection using whatever
   *  technique the sub-class requires.
   *
   *  Sub-classes **must** override this.
   */
  _detectNetwork() {
    _t(!1, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  /**
   *  Sub-classes should use this to perform all built-in operations. All
   *  methods sanitizes and normalizes the values passed into this.
   *
   *  Sub-classes **must** override this.
   */
  async _perform(t) {
    _t(!1, `unsupported method: ${t.method}`, "UNSUPPORTED_OPERATION", {
      operation: t.method,
      info: t
    });
  }
  // State
  async getBlockNumber() {
    const t = Tt(await this.#c({ method: "getBlockNumber" }), "%response");
    return this.#a >= 0 && (this.#a = t), t;
  }
  /**
   *  Returns or resolves to the address for %%address%%, resolving ENS
   *  names and [[Addressable]] objects and returning if already an
   *  address.
   */
  _getAddress(t) {
    return ze(t, this);
  }
  /**
   *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
   *  negative values and returning if already a valid block tag.
   */
  _getBlockTag(t) {
    if (t == null)
      return "latest";
    switch (t) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return t;
    }
    if (Xt(t))
      return Xt(t, 32) ? t : Ke(t);
    if (typeof t == "bigint" && (t = Tt(t, "blockTag")), typeof t == "number")
      return t >= 0 ? Ke(t) : this.#a >= 0 ? Ke(this.#a + t) : this.getBlockNumber().then((e) => Ke(e + t));
    V(!1, "invalid blockTag", "blockTag", t);
  }
  /**
   *  Returns or resolves to a filter for %%filter%%, resolving any ENS
   *  names or [[Addressable]] object and returning if already a valid
   *  filter.
   */
  _getFilter(t) {
    const e = (t.topics || []).map((_) => _ == null ? null : Array.isArray(_) ? Su(_.map((l) => l.toLowerCase())) : _.toLowerCase()), r = "blockHash" in t ? t.blockHash : void 0, i = (_, l, f) => {
      let g;
      switch (_.length) {
        case 0:
          break;
        case 1:
          g = _[0];
          break;
        default:
          _.sort(), g = _;
      }
      if (r && (l != null || f != null))
        throw new Error("invalid filter");
      const y = {};
      return g && (y.address = g), e.length && (y.topics = e), l && (y.fromBlock = l), f && (y.toBlock = f), r && (y.blockHash = r), y;
    };
    let o = [];
    if (t.address)
      if (Array.isArray(t.address))
        for (const _ of t.address)
          o.push(this._getAddress(_));
      else
        o.push(this._getAddress(t.address));
    let a;
    "fromBlock" in t && (a = this._getBlockTag(t.fromBlock));
    let u;
    return "toBlock" in t && (u = this._getBlockTag(t.toBlock)), o.filter((_) => typeof _ != "string").length || a != null && typeof a != "string" || u != null && typeof u != "string" ? Promise.all([Promise.all(o), a, u]).then((_) => i(_[0], _[1], _[2])) : i(o, a, u);
  }
  /**
   *  Returns or resolves to a transaction for %%request%%, resolving
   *  any ENS names or [[Addressable]] and returning if already a valid
   *  transaction.
   */
  _getTransactionRequest(t) {
    const e = Oo(t), r = [];
    if (["to", "from"].forEach((i) => {
      if (e[i] == null)
        return;
      const o = ze(e[i], this);
      fo(o) ? r.push(async function() {
        e[i] = await o;
      }()) : e[i] = o;
    }), e.blockTag != null) {
      const i = this._getBlockTag(e.blockTag);
      fo(i) ? r.push(async function() {
        e.blockTag = await i;
      }()) : e.blockTag = i;
    }
    return r.length ? async function() {
      return await Promise.all(r), e;
    }() : e;
  }
  async getNetwork() {
    if (this.#i == null) {
      const i = (async () => {
        try {
          const o = await this._detectNetwork();
          return this.emit("network", o, null), o;
        } catch (o) {
          throw this.#i === i && (this.#i = null), o;
        }
      })();
      return this.#i = i, (await i).clone();
    }
    const t = this.#i, [e, r] = await Promise.all([
      t,
      this._detectNetwork()
      // The actual connected network
    ]);
    return e.chainId !== r.chainId && (this.#o ? (this.emit("network", r, e), this.#i === t && (this.#i = Promise.resolve(r))) : _t(!1, `network changed: ${e.chainId} => ${r.chainId} `, "NETWORK_ERROR", {
      event: "changed"
    })), e.clone();
  }
  async getFeeData() {
    const t = await this.getNetwork(), e = async () => {
      const { _block: i, gasPrice: o, priorityFee: a } = await ve({
        _block: this.#g("latest", !1),
        gasPrice: (async () => {
          try {
            const f = await this.#c({ method: "getGasPrice" });
            return mt(f, "%response");
          } catch {
          }
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const f = await this.#c({ method: "getPriorityFee" });
            return mt(f, "%response");
          } catch {
          }
          return null;
        })()
      });
      let u = null, _ = null;
      const l = this._wrapBlock(i, t);
      return l && l.baseFeePerGas && (_ = a ?? BigInt("1000000000"), u = l.baseFeePerGas * cm + _), new yf(o, u, _);
    }, r = t.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (r) {
      const i = new fr(r.url), o = await r.processFunc(e, this, i);
      return new yf(o.gasPrice, o.maxFeePerGas, o.maxPriorityFeePerGas);
    }
    return await e();
  }
  async estimateGas(t) {
    let e = this._getTransactionRequest(t);
    return fo(e) && (e = await e), mt(await this.#c({
      method: "estimateGas",
      transaction: e
    }), "%response");
  }
  async #_(t, e, r) {
    _t(r < um, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
      reason: "TOO_MANY_REDIRECTS",
      transaction: Object.assign({}, t, { blockTag: e, enableCcipRead: !0 })
    });
    const i = Oo(t);
    try {
      return gt(await this._perform({ method: "call", transaction: i, blockTag: e }));
    } catch (o) {
      if (!this.disableCcipRead && Lu(o) && o.data && r >= 0 && e === "latest" && i.to != null && ne(o.data, 0, 4) === "0x556f1830") {
        const a = o.data, u = await ze(i.to, this);
        let _;
        try {
          _ = gm(ne(o.data, 4));
        } catch (g) {
          _t(!1, g.message, "OFFCHAIN_FAULT", {
            reason: "BAD_DATA",
            transaction: i,
            info: { data: a }
          });
        }
        _t(_.sender.toLowerCase() === u.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
          action: "call",
          data: a,
          reason: "OffchainLookup",
          transaction: i,
          invocation: null,
          revert: {
            signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
            name: "OffchainLookup",
            args: _.errorArgs
          }
        });
        const l = await this.ccipReadFetch(i, _.calldata, _.urls);
        _t(l != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
          reason: "FETCH_FAILED",
          transaction: i,
          info: { data: o.data, errorArgs: _.errorArgs }
        });
        const f = {
          to: u,
          data: oe([_.selector, dm([l, _.extraData])])
        };
        this.emit("debug", { action: "sendCcipReadCall", transaction: f });
        try {
          const g = await this.#_(f, e, r + 1);
          return this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, f), result: g }), g;
        } catch (g) {
          throw this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, f), error: g }), g;
        }
      }
      throw o;
    }
  }
  async #f(t) {
    const { value: e } = await ve({
      network: this.getNetwork(),
      value: t
    });
    return e;
  }
  async call(t) {
    const { tx: e, blockTag: r } = await ve({
      tx: this._getTransactionRequest(t),
      blockTag: this._getBlockTag(t.blockTag)
    });
    return await this.#f(this.#_(e, r, t.enableCcipRead ? 0 : -1));
  }
  // Account
  async #l(t, e, r) {
    let i = this._getAddress(e), o = this._getBlockTag(r);
    return (typeof i != "string" || typeof o != "string") && ([i, o] = await Promise.all([i, o])), await this.#f(this.#c(Object.assign(t, { address: i, blockTag: o })));
  }
  async getBalance(t, e) {
    return mt(await this.#l({ method: "getBalance" }, t, e), "%response");
  }
  async getTransactionCount(t, e) {
    return Tt(await this.#l({ method: "getTransactionCount" }, t, e), "%response");
  }
  async getCode(t, e) {
    return gt(await this.#l({ method: "getCode" }, t, e));
  }
  async getStorage(t, e, r) {
    const i = mt(e, "position");
    return gt(await this.#l({ method: "getStorage", position: i }, t, r));
  }
  // Write
  async broadcastTransaction(t) {
    const { blockNumber: e, hash: r, network: i } = await ve({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: t
      }),
      network: this.getNetwork()
    }), o = Qe.from(t);
    if (o.hash !== r)
      throw new Error("@TODO: the returned hash did not match");
    return this._wrapTransactionResponse(o, i).replaceableTransaction(e);
  }
  async #g(t, e) {
    if (Xt(t, 32))
      return await this.#c({
        method: "getBlock",
        blockHash: t,
        includeTransactions: e
      });
    let r = this._getBlockTag(t);
    return typeof r != "string" && (r = await r), await this.#c({
      method: "getBlock",
      blockTag: r,
      includeTransactions: e
    });
  }
  // Queries
  async getBlock(t, e) {
    const { network: r, params: i } = await ve({
      network: this.getNetwork(),
      params: this.#g(t, !!e)
    });
    return i == null ? null : this._wrapBlock(i, r);
  }
  async getTransaction(t) {
    const { network: e, params: r } = await ve({
      network: this.getNetwork(),
      params: this.#c({ method: "getTransaction", hash: t })
    });
    return r == null ? null : this._wrapTransactionResponse(r, e);
  }
  async getTransactionReceipt(t) {
    const { network: e, params: r } = await ve({
      network: this.getNetwork(),
      params: this.#c({ method: "getTransactionReceipt", hash: t })
    });
    if (r == null)
      return null;
    if (r.gasPrice == null && r.effectiveGasPrice == null) {
      const i = await this.#c({ method: "getTransaction", hash: t });
      if (i == null)
        throw new Error("report this; could not find tx or effectiveGasPrice");
      r.effectiveGasPrice = i.gasPrice;
    }
    return this._wrapTransactionReceipt(r, e);
  }
  async getTransactionResult(t) {
    const { result: e } = await ve({
      network: this.getNetwork(),
      result: this.#c({ method: "getTransactionResult", hash: t })
    });
    return e == null ? null : gt(e);
  }
  // Bloom-filter Queries
  async getLogs(t) {
    let e = this._getFilter(t);
    fo(e) && (e = await e);
    const { network: r, params: i } = await ve({
      network: this.getNetwork(),
      params: this.#c({ method: "getLogs", filter: e })
    });
    return i.map((o) => this._wrapLog(o, r));
  }
  // ENS
  _getProvider(t) {
    _t(!1, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(t) {
    return await Zi.fromName(this, t);
  }
  async getAvatar(t) {
    const e = await this.getResolver(t);
    return e ? await e.getAvatar() : null;
  }
  async resolveName(t) {
    const e = await this.getResolver(t);
    return e ? await e.getAddress() : null;
  }
  async lookupAddress(t) {
    t = Ut(t);
    const e = xu(t.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const r = await Zi.getEnsAddress(this), o = await new Ze(r, [
        "function resolver(bytes32) view returns (address)"
      ], this).resolver(e);
      if (o == null || o === Ls)
        return null;
      const u = await new Ze(o, [
        "function name(bytes32) view returns (string)"
      ], this).name(e);
      return await this.resolveName(u) !== t ? null : u;
    } catch (r) {
      if (Ae(r, "BAD_DATA") && r.value === "0x" || Ae(r, "CALL_EXCEPTION"))
        return null;
      throw r;
    }
    return null;
  }
  async waitForTransaction(t, e, r) {
    const i = e ?? 1;
    return i === 0 ? this.getTransactionReceipt(t) : new Promise(async (o, a) => {
      let u = null;
      const _ = async (l) => {
        try {
          const f = await this.getTransactionReceipt(t);
          if (f != null && l - f.blockNumber + 1 >= i) {
            o(f), u && (clearTimeout(u), u = null);
            return;
          }
        } catch (f) {
          console.log("EEE", f);
        }
        this.once("block", _);
      };
      r != null && (u = setTimeout(() => {
        u != null && (u = null, this.off("block", _), a(te("timeout", "TIMEOUT", { reason: "timeout" })));
      }, r)), _(await this.getBlockNumber());
    });
  }
  async waitForBlock(t) {
    _t(!1, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  /**
   *  Clear a timer created using the [[_setTimeout]] method.
   */
  _clearTimeout(t) {
    const e = this.#u.get(t);
    e && (e.timer && clearTimeout(e.timer), this.#u.delete(t));
  }
  /**
   *  Create a timer that will execute %%func%% after at least %%timeout%%
   *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
   *  in the next event loop.
   *
   *  [Pausing](AbstractProvider-paused) the provider will pause any
   *  associated timers.
   */
  _setTimeout(t, e) {
    e == null && (e = 0);
    const r = this.#h++, i = () => {
      this.#u.delete(r), t();
    };
    if (this.paused)
      this.#u.set(r, { timer: null, func: i, time: e });
    else {
      const o = setTimeout(i, e);
      this.#u.set(r, { timer: o, func: i, time: Ma() });
    }
    return r;
  }
  /**
   *  Perform %%func%% on each subscriber.
   */
  _forEachSubscriber(t) {
    for (const e of this.#t.values())
      t(e.subscriber);
  }
  /**
   *  Sub-classes may override this to customize subscription
   *  implementations.
   */
  _getSubscriber(t) {
    switch (t.type) {
      case "debug":
      case "error":
      case "network":
        return new Wd(t.type);
      case "block": {
        const e = new im(this);
        return e.pollingInterval = this.pollingInterval, e;
      }
      case "safe":
      case "finalized":
        return new sm(this, t.type);
      case "event":
        return new n_(this, t.filter);
      case "transaction":
        return new am(this, t.hash);
      case "orphan":
        return new om(this, t.filter);
    }
    throw new Error(`unsupported event: ${t.type}`);
  }
  /**
   *  If a [[Subscriber]] fails and needs to replace itself, this
   *  method may be used.
   *
   *  For example, this is used for providers when using the
   *  ``eth_getFilterChanges`` method, which can return null if state
   *  filters are not supported by the backend, allowing the Subscriber
   *  to swap in a [[PollingEventSubscriber]].
   */
  _recoverSubscriber(t, e) {
    for (const r of this.#t.values())
      if (r.subscriber === t) {
        r.started && r.subscriber.stop(), r.subscriber = e, r.started && e.start(), this.#r != null && e.pause(this.#r);
        break;
      }
  }
  async #d(t, e) {
    let r = await Ua(t, this);
    return r.type === "event" && e && e.length > 0 && e[0].removed === !0 && (r = await Ua({ orphan: "drop-log", log: e[0] }, this)), this.#t.get(r.tag) || null;
  }
  async #y(t) {
    const e = await Ua(t, this), r = e.tag;
    let i = this.#t.get(r);
    return i || (i = { subscriber: this._getSubscriber(e), tag: r, addressableMap: /* @__PURE__ */ new WeakMap(), nameMap: /* @__PURE__ */ new Map(), started: !1, listeners: [] }, this.#t.set(r, i)), i;
  }
  async on(t, e) {
    const r = await this.#y(t);
    return r.listeners.push({ listener: e, once: !1 }), r.started || (r.subscriber.start(), r.started = !0, this.#r != null && r.subscriber.pause(this.#r)), this;
  }
  async once(t, e) {
    const r = await this.#y(t);
    return r.listeners.push({ listener: e, once: !0 }), r.started || (r.subscriber.start(), r.started = !0, this.#r != null && r.subscriber.pause(this.#r)), this;
  }
  async emit(t, ...e) {
    const r = await this.#d(t, e);
    if (!r || r.listeners.length === 0)
      return !1;
    const i = r.listeners.length;
    return r.listeners = r.listeners.filter(({ listener: o, once: a }) => {
      const u = new fw(this, a ? null : o, t);
      try {
        o.call(this, ...e, u);
      } catch {
      }
      return !a;
    }), r.listeners.length === 0 && (r.started && r.subscriber.stop(), this.#t.delete(r.tag)), i > 0;
  }
  async listenerCount(t) {
    if (t) {
      const r = await this.#d(t);
      return r ? r.listeners.length : 0;
    }
    let e = 0;
    for (const { listeners: r } of this.#t.values())
      e += r.length;
    return e;
  }
  async listeners(t) {
    if (t) {
      const r = await this.#d(t);
      return r ? r.listeners.map(({ listener: i }) => i) : [];
    }
    let e = [];
    for (const { listeners: r } of this.#t.values())
      e = e.concat(r.map(({ listener: i }) => i));
    return e;
  }
  async off(t, e) {
    const r = await this.#d(t);
    if (!r)
      return this;
    if (e) {
      const i = r.listeners.map(({ listener: o }) => o).indexOf(e);
      i >= 0 && r.listeners.splice(i, 1);
    }
    return (!e || r.listeners.length === 0) && (r.started && r.subscriber.stop(), this.#t.delete(r.tag)), this;
  }
  async removeAllListeners(t) {
    if (t) {
      const { tag: e, started: r, subscriber: i } = await this.#y(t);
      r && i.stop(), this.#t.delete(e);
    } else
      for (const [e, { started: r, subscriber: i }] of this.#t)
        r && i.stop(), this.#t.delete(e);
    return this;
  }
  // Alias for "on"
  async addListener(t, e) {
    return await this.on(t, e);
  }
  // Alias for "off"
  async removeListener(t, e) {
    return this.off(t, e);
  }
  /**
   *  If this provider has been destroyed using the [[destroy]] method.
   *
   *  Once destroyed, all resources are reclaimed, internal event loops
   *  and timers are cleaned up and no further requests may be sent to
   *  the provider.
   */
  get destroyed() {
    return this.#n;
  }
  /**
   *  Sub-classes may use this to shutdown any sockets or release their
   *  resources and reject any pending requests.
   *
   *  Sub-classes **must** call ``super.destroy()``.
   */
  destroy() {
    this.removeAllListeners();
    for (const t of this.#u.keys())
      this._clearTimeout(t);
    this.#n = !0;
  }
  /**
   *  Whether the provider is currently paused.
   *
   *  A paused provider will not emit any events, and generally should
   *  not make any requests to the network, but that is up to sub-classes
   *  to manage.
   *
   *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
   *  which will buffer any events that occur while paused until the
   *  provider is unpaused.
   */
  get paused() {
    return this.#r != null;
  }
  set paused(t) {
    !!t !== this.paused && (this.paused ? this.resume() : this.pause(!1));
  }
  /**
   *  Pause the provider. If %%dropWhilePaused%%, any events that occur
   *  while paused are dropped, otherwise all events will be emitted once
   *  the provider is unpaused.
   */
  pause(t) {
    if (this.#a = -1, this.#r != null) {
      if (this.#r == !!t)
        return;
      _t(!1, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((e) => e.pause(t)), this.#r = !!t;
    for (const e of this.#u.values())
      e.timer && clearTimeout(e.timer), e.time = Ma() - e.time;
  }
  /**
   *  Resume the provider.
   */
  resume() {
    if (this.#r != null) {
      this._forEachSubscriber((t) => t.resume()), this.#r = null;
      for (const t of this.#u.values()) {
        let e = t.time;
        e < 0 && (e = 0), t.time = Ma(), setTimeout(t.func, e);
      }
    }
  }
}
function hm(n, t) {
  try {
    const e = Pu(n, t);
    if (e)
      return zo(e);
  } catch {
  }
  return null;
}
function Pu(n, t) {
  if (n === "0x")
    return null;
  try {
    const e = Tt(ne(n, t, t + 32)), r = Tt(ne(n, e, e + 32));
    return ne(n, e + 32, e + 32 + r);
  } catch {
  }
  return null;
}
function zf(n) {
  const t = ge(n);
  if (t.length > 32)
    throw new Error("internal; should not happen");
  const e = new Uint8Array(32);
  return e.set(t, 32 - t.length), e;
}
function pm(n) {
  if (n.length % 32 === 0)
    return n;
  const t = new Uint8Array(Math.ceil(n.length / 32) * 32);
  return t.set(n), t;
}
const wm = new Uint8Array([]);
function dm(n) {
  const t = [];
  let e = 0;
  for (let r = 0; r < n.length; r++)
    t.push(wm), e += 32;
  for (let r = 0; r < n.length; r++) {
    const i = Ot(n[r]);
    t[r] = zf(e), t.push(zf(i.length)), t.push(pm(i)), e += 32 + Math.ceil(i.length / 32) * 32;
  }
  return oe(t);
}
const Bf = "0x0000000000000000000000000000000000000000000000000000000000000000";
function gm(n) {
  const t = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  _t(Ji(n) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const e = ne(n, 0, 32);
  _t(ne(e, 0, 12) === ne(Bf, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  }), t.sender = ne(e, 12);
  try {
    const r = [], i = Tt(ne(n, 32, 64)), o = Tt(ne(n, i, i + 32)), a = ne(n, i + 32);
    for (let u = 0; u < o; u++) {
      const _ = hm(a, u * 32);
      if (_ == null)
        throw new Error("abort");
      r.push(_);
    }
    t.urls = r;
  } catch {
    _t(!1, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const r = Pu(n, 64);
    if (r == null)
      throw new Error("abort");
    t.calldata = r;
  } catch {
    _t(!1, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  _t(ne(n, 100, 128) === ne(Bf, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  }), t.selector = ne(n, 96, 100);
  try {
    const r = Pu(n, 128);
    if (r == null)
      throw new Error("abort");
    t.extraData = r;
  } catch {
    _t(!1, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  return t.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((r) => t[r]), t;
}
function wi(n, t) {
  if (n.provider)
    return n.provider;
  _t(!1, "missing provider", "UNSUPPORTED_OPERATION", { operation: t });
}
async function Sf(n, t) {
  let e = Oo(t);
  if (e.to != null && (e.to = ze(e.to, n)), e.from != null) {
    const r = e.from;
    e.from = Promise.all([
      n.getAddress(),
      ze(r, n)
    ]).then(([i, o]) => (V(i.toLowerCase() === o.toLowerCase(), "transaction from mismatch", "tx.from", o), i));
  } else
    e.from = n.getAddress();
  return await ve(e);
}
class ym {
  /**
   *  The provider this signer is connected to.
   */
  provider;
  /**
   *  Creates a new Signer connected to %%provider%%.
   */
  constructor(t) {
    zt(this, { provider: t || null });
  }
  async getNonce(t) {
    return wi(this, "getTransactionCount").getTransactionCount(await this.getAddress(), t);
  }
  async populateCall(t) {
    return await Sf(this, t);
  }
  async populateTransaction(t) {
    const e = wi(this, "populateTransaction"), r = await Sf(this, t);
    r.nonce == null && (r.nonce = await this.getNonce("pending")), r.gasLimit == null && (r.gasLimit = await this.estimateGas(r));
    const i = await this.provider.getNetwork();
    if (r.chainId != null) {
      const a = mt(r.chainId);
      V(a === i.chainId, "transaction chainId mismatch", "tx.chainId", t.chainId);
    } else
      r.chainId = i.chainId;
    const o = r.maxFeePerGas != null || r.maxPriorityFeePerGas != null;
    if (r.gasPrice != null && (r.type === 2 || o) ? V(!1, "eip-1559 transaction do not support gasPrice", "tx", t) : (r.type === 0 || r.type === 1) && o && V(!1, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", t), (r.type === 2 || r.type == null) && r.maxFeePerGas != null && r.maxPriorityFeePerGas != null)
      r.type = 2;
    else if (r.type === 0 || r.type === 1) {
      const a = await e.getFeeData();
      _t(a.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      }), r.gasPrice == null && (r.gasPrice = a.gasPrice);
    } else {
      const a = await e.getFeeData();
      if (r.type == null)
        if (a.maxFeePerGas != null && a.maxPriorityFeePerGas != null)
          if (r.authorizationList && r.authorizationList.length ? r.type = 4 : r.type = 2, r.gasPrice != null) {
            const u = r.gasPrice;
            delete r.gasPrice, r.maxFeePerGas = u, r.maxPriorityFeePerGas = u;
          } else
            r.maxFeePerGas == null && (r.maxFeePerGas = a.maxFeePerGas), r.maxPriorityFeePerGas == null && (r.maxPriorityFeePerGas = a.maxPriorityFeePerGas);
        else a.gasPrice != null ? (_t(!o, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
          operation: "populateTransaction"
        }), r.gasPrice == null && (r.gasPrice = a.gasPrice), r.type = 0) : _t(!1, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
          operation: "signer.getFeeData"
        });
      else (r.type === 2 || r.type === 3 || r.type === 4) && (r.maxFeePerGas == null && (r.maxFeePerGas = a.maxFeePerGas), r.maxPriorityFeePerGas == null && (r.maxPriorityFeePerGas = a.maxPriorityFeePerGas));
    }
    return await ve(r);
  }
  async populateAuthorization(t) {
    const e = Object.assign({}, t);
    return e.chainId == null && (e.chainId = (await wi(this, "getNetwork").getNetwork()).chainId), e.nonce == null && (e.nonce = await this.getNonce()), e;
  }
  async estimateGas(t) {
    return wi(this, "estimateGas").estimateGas(await this.populateCall(t));
  }
  async call(t) {
    return wi(this, "call").call(await this.populateCall(t));
  }
  async resolveName(t) {
    return await wi(this, "resolveName").resolveName(t);
  }
  async sendTransaction(t) {
    const e = wi(this, "sendTransaction"), r = await this.populateTransaction(t);
    delete r.from;
    const i = Qe.from(r);
    return await e.broadcastTransaction(await this.signTransaction(i));
  }
  // @TODO: in v7 move this to be abstract
  authorize(t) {
    _t(!1, "authorization not implemented for this signer", "UNSUPPORTED_OPERATION", { operation: "authorize" });
  }
}
function bm(n) {
  return JSON.parse(JSON.stringify(n));
}
class Jd {
  #t;
  #e;
  #r;
  #n;
  #i;
  #o;
  /**
   *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
   *  and [[_emitResults]] to setup the subscription and provide the event
   *  to the %%provider%%.
   */
  constructor(t) {
    this.#t = t, this.#e = null, this.#r = this.#s.bind(this), this.#n = !1, this.#i = null, this.#o = !1;
  }
  /**
   *  Sub-classes **must** override this to begin the subscription.
   */
  _subscribe(t) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle the events.
   */
  _emitResults(t, e) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle recovery on errors.
   */
  _recover(t) {
    throw new Error("subclasses must override this");
  }
  async #s(t) {
    try {
      this.#e == null && (this.#e = this._subscribe(this.#t));
      let e = null;
      try {
        e = await this.#e;
      } catch (o) {
        if (!Ae(o, "UNSUPPORTED_OPERATION") || o.operation !== "eth_newFilter")
          throw o;
      }
      if (e == null) {
        this.#e = null, this.#t._recoverSubscriber(this, this._recover(this.#t));
        return;
      }
      const r = await this.#t.getNetwork();
      if (this.#i || (this.#i = r), this.#i.chainId !== r.chainId)
        throw new Error("chaid changed");
      if (this.#o)
        return;
      const i = await this.#t.send("eth_getFilterChanges", [e]);
      await this._emitResults(this.#t, i);
    } catch (e) {
      console.log("@TODO", e);
    }
    this.#t.once("block", this.#r);
  }
  #a() {
    const t = this.#e;
    t && (this.#e = null, t.then((e) => {
      this.#t.destroyed || this.#t.send("eth_uninstallFilter", [e]);
    }));
  }
  start() {
    this.#n || (this.#n = !0, this.#s(-2));
  }
  stop() {
    this.#n && (this.#n = !1, this.#o = !0, this.#a(), this.#t.off("block", this.#r));
  }
  pause(t) {
    t && this.#a(), this.#t.off("block", this.#r);
  }
  resume() {
    this.start();
  }
}
class mm extends Jd {
  #t;
  /**
   *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
   *  listening for %%filter%%.
   */
  constructor(t, e) {
    super(t), this.#t = bm(e);
  }
  _recover(t) {
    return new n_(t, this.#t);
  }
  async _subscribe(t) {
    return await t.send("eth_newFilter", [this.#t]);
  }
  async _emitResults(t, e) {
    for (const r of e)
      t.emit(this.#t, t._wrapLog(r, t._network));
  }
}
class Am extends Jd {
  async _subscribe(t) {
    return await t.send("eth_newPendingTransactionFilter", []);
  }
  async _emitResults(t, e) {
    for (const r of e)
      t.emit("pending", r);
  }
}
const Em = "bigint,boolean,function,number,string,symbol".split(/,/g);
function mo(n) {
  if (n == null || Em.indexOf(typeof n) >= 0 || typeof n.getAddress == "function")
    return n;
  if (Array.isArray(n))
    return n.map(mo);
  if (typeof n == "object")
    return Object.keys(n).reduce((t, e) => (t[e] = n[e], t), {});
  throw new Error(`should not happen: ${n} (${typeof n})`);
}
function vm(n) {
  return new Promise((t) => {
    setTimeout(t, n);
  });
}
function Hi(n) {
  return n && n.toLowerCase();
}
function Pf(n) {
  return n && typeof n.pollingInterval == "number";
}
const $d = {
  polling: !1,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4e3
};
class ja extends ym {
  address;
  constructor(t, e) {
    super(t), e = Ut(e), zt(this, { address: e });
  }
  connect(t) {
    _t(!1, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
      operation: "signer.connect"
    });
  }
  async getAddress() {
    return this.address;
  }
  // JSON-RPC will automatially fill in nonce, etc. so we just check from
  async populateTransaction(t) {
    return await this.populateCall(t);
  }
  // Returns just the hash of the transaction after sent, which is what
  // the bare JSON-RPC API does;
  async sendUncheckedTransaction(t) {
    const e = mo(t), r = [];
    if (e.from) {
      const o = e.from;
      r.push((async () => {
        const a = await ze(o, this.provider);
        V(a != null && a.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", t), e.from = a;
      })());
    } else
      e.from = this.address;
    if (e.gasLimit == null && r.push((async () => {
      e.gasLimit = await this.provider.estimateGas({ ...e, from: this.address });
    })()), e.to != null) {
      const o = e.to;
      r.push((async () => {
        e.to = await ze(o, this.provider);
      })());
    }
    r.length && await Promise.all(r);
    const i = this.provider.getRpcTransaction(e);
    return this.provider.send("eth_sendTransaction", [i]);
  }
  async sendTransaction(t) {
    const e = await this.provider.getBlockNumber(), r = await this.sendUncheckedTransaction(t);
    return await new Promise((i, o) => {
      const a = [1e3, 100];
      let u = 0;
      const _ = async () => {
        try {
          const l = await this.provider.getTransaction(r);
          if (l != null) {
            i(l.replaceableTransaction(e));
            return;
          }
        } catch (l) {
          if (Ae(l, "CANCELLED") || Ae(l, "BAD_DATA") || Ae(l, "NETWORK_ERROR") || Ae(l, "UNSUPPORTED_OPERATION")) {
            l.info == null && (l.info = {}), l.info.sendTransactionHash = r, o(l);
            return;
          }
          if (Ae(l, "INVALID_ARGUMENT") && (u++, l.info == null && (l.info = {}), l.info.sendTransactionHash = r, u > 10)) {
            o(l);
            return;
          }
          this.provider.emit("error", te("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error: l }));
        }
        this.provider._setTimeout(() => {
          _();
        }, a.pop() || 4e3);
      };
      _();
    });
  }
  async signTransaction(t) {
    const e = mo(t);
    if (e.from) {
      const i = await ze(e.from, this.provider);
      V(i != null && i.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", t), e.from = i;
    } else
      e.from = this.address;
    const r = this.provider.getRpcTransaction(e);
    return await this.provider.send("eth_signTransaction", [r]);
  }
  async signMessage(t) {
    const e = typeof t == "string" ? Jn(t) : t;
    return await this.provider.send("personal_sign", [
      gt(e),
      this.address.toLowerCase()
    ]);
  }
  async signTypedData(t, e, r) {
    const i = mo(r), o = await ke.resolveNames(t, e, i, async (a) => {
      const u = await ze(a);
      return V(u != null, "TypedData does not support null address", "value", a), u;
    });
    return await this.provider.send("eth_signTypedData_v4", [
      this.address.toLowerCase(),
      JSON.stringify(ke.getPayload(o.domain, e, o.value))
    ]);
  }
  async unlock(t) {
    return this.provider.send("personal_unlockAccount", [
      this.address.toLowerCase(),
      t,
      null
    ]);
  }
  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
  async _legacySignMessage(t) {
    const e = typeof t == "string" ? Jn(t) : t;
    return await this.provider.send("eth_sign", [
      this.address.toLowerCase(),
      gt(e)
    ]);
  }
}
class xm extends lm {
  #t;
  // The next ID to use for the JSON-RPC ID field
  #e;
  // Payloads are queued and triggered in batches using the drainTimer
  #r;
  #n;
  #i;
  #o;
  #s;
  #a() {
    if (this.#n)
      return;
    const t = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
    this.#n = setTimeout(() => {
      this.#n = null;
      const e = this.#r;
      for (this.#r = []; e.length; ) {
        const r = [e.shift()];
        for (; e.length && r.length !== this.#t.batchMaxCount; )
          if (r.push(e.shift()), JSON.stringify(r.map((o) => o.payload)).length > this.#t.batchMaxSize) {
            e.unshift(r.pop());
            break;
          }
        (async () => {
          const i = r.length === 1 ? r[0].payload : r.map((o) => o.payload);
          this.emit("debug", { action: "sendRpcPayload", payload: i });
          try {
            const o = await this._send(i);
            this.emit("debug", { action: "receiveRpcResult", result: o });
            for (const { resolve: a, reject: u, payload: _ } of r) {
              if (this.destroyed) {
                u(te("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: _.method }));
                continue;
              }
              const l = o.filter((f) => f.id === _.id)[0];
              if (l == null) {
                const f = te("missing response for request", "BAD_DATA", {
                  value: o,
                  info: { payload: _ }
                });
                this.emit("error", f), u(f);
                continue;
              }
              if ("error" in l) {
                u(this.getRpcError(_, l));
                continue;
              }
              a(l.result);
            }
          } catch (o) {
            this.emit("debug", { action: "receiveRpcError", error: o });
            for (const { reject: a } of r)
              a(o);
          }
        })();
      }
    }, t);
  }
  constructor(t, e) {
    super(t, e), this.#e = 1, this.#t = Object.assign({}, $d, e || {}), this.#r = [], this.#n = null, this.#o = null, this.#s = null;
    {
      let i = null;
      const o = new Promise((a) => {
        i = a;
      });
      this.#i = { promise: o, resolve: i };
    }
    const r = this._getOption("staticNetwork");
    typeof r == "boolean" ? (V(!r || t !== "any", "staticNetwork cannot be used on special network 'any'", "options", e), r && t != null && (this.#o = Ce.from(t))) : r && (V(t == null || r.matches(t), "staticNetwork MUST match network object", "options", e), this.#o = r);
  }
  /**
   *  Returns the value associated with the option %%key%%.
   *
   *  Sub-classes can use this to inquire about configuration options.
   */
  _getOption(t) {
    return this.#t[t];
  }
  /**
   *  Gets the [[Network]] this provider has committed to. On each call, the network
   *  is detected, and if it has changed, the call will reject.
   */
  get _network() {
    return _t(this.#o, "network is not available yet", "NETWORK_ERROR"), this.#o;
  }
  /**
   *  Resolves to the non-normalized value by performing %%req%%.
   *
   *  Sub-classes may override this to modify behavior of actions,
   *  and should generally call ``super._perform`` as a fallback.
   */
  async _perform(t) {
    if (t.method === "call" || t.method === "estimateGas") {
      let r = t.transaction;
      if (r && r.type != null && mt(r.type) && r.maxFeePerGas == null && r.maxPriorityFeePerGas == null) {
        const i = await this.getFeeData();
        i.maxFeePerGas == null && i.maxPriorityFeePerGas == null && (t = Object.assign({}, t, {
          transaction: Object.assign({}, r, { type: void 0 })
        }));
      }
    }
    const e = this.getRpcRequest(t);
    return e != null ? await this.send(e.method, e.args) : super._perform(t);
  }
  /**
   *  Sub-classes may override this; it detects the *actual* network that
   *  we are **currently** connected to.
   *
   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
   *  _send primitive must be used instead.
   */
  async _detectNetwork() {
    const t = this._getOption("staticNetwork");
    if (t)
      if (t === !0) {
        if (this.#o)
          return this.#o;
      } else
        return t;
    return this.#s ? await this.#s : this.ready ? (this.#s = (async () => {
      try {
        const e = Ce.from(mt(await this.send("eth_chainId", [])));
        return this.#s = null, e;
      } catch (e) {
        throw this.#s = null, e;
      }
    })(), await this.#s) : (this.#s = (async () => {
      const e = {
        id: this.#e++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload: e });
      let r;
      try {
        r = (await this._send(e))[0], this.#s = null;
      } catch (i) {
        throw this.#s = null, this.emit("debug", { action: "receiveRpcError", error: i }), i;
      }
      if (this.emit("debug", { action: "receiveRpcResult", result: r }), "result" in r)
        return Ce.from(mt(r.result));
      throw this.getRpcError(e, r);
    })(), await this.#s);
  }
  /**
   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
   *  will be passed to [[_send]] from [[send]]. If it is overridden, then
   *  ``super._start()`` **MUST** be called.
   *
   *  Calling it multiple times is safe and has no effect.
   */
  _start() {
    this.#i == null || this.#i.resolve == null || (this.#i.resolve(), this.#i = null, (async () => {
      for (; this.#o == null && !this.destroyed; )
        try {
          this.#o = await this._detectNetwork();
        } catch (t) {
          if (this.destroyed)
            break;
          console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"), this.emit("error", te("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error: t } })), await vm(1e3);
        }
      this.#a();
    })());
  }
  /**
   *  Resolves once the [[_start]] has been called. This can be used in
   *  sub-classes to defer sending data until the connection has been
   *  established.
   */
  async _waitUntilReady() {
    if (this.#i != null)
      return await this.#i.promise;
  }
  /**
   *  Return a Subscriber that will manage the %%sub%%.
   *
   *  Sub-classes may override this to modify the behavior of
   *  subscription management.
   */
  _getSubscriber(t) {
    return t.type === "pending" ? new Am(this) : t.type === "event" ? this._getOption("polling") ? new n_(this, t.filter) : new mm(this, t.filter) : t.type === "orphan" && t.filter.orphan === "drop-log" ? new Wd("orphan") : super._getSubscriber(t);
  }
  /**
   *  Returns true only if the [[_start]] has been called.
   */
  get ready() {
    return this.#i == null;
  }
  /**
   *  Returns %%tx%% as a normalized JSON-RPC transaction request,
   *  which has all values hexlified and any numeric values converted
   *  to Quantity values.
   */
  getRpcTransaction(t) {
    const e = {};
    return ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((r) => {
      if (t[r] == null)
        return;
      let i = r;
      r === "gasLimit" && (i = "gas"), e[i] = Ke(mt(t[r], `tx.${r}`));
    }), ["from", "to", "data"].forEach((r) => {
      t[r] != null && (e[r] = gt(t[r]));
    }), t.accessList && (e.accessList = Li(t.accessList)), t.blobVersionedHashes && (e.blobVersionedHashes = t.blobVersionedHashes.map((r) => r.toLowerCase())), t.authorizationList && (e.authorizationList = t.authorizationList.map((r) => {
      const i = Xw(r);
      return {
        address: i.address,
        nonce: Ke(i.nonce),
        chainId: Ke(i.chainId),
        yParity: Ke(i.signature.yParity),
        r: Ke(i.signature.r),
        s: Ke(i.signature.s)
      };
    })), e;
  }
  /**
   *  Returns the request method and arguments required to perform
   *  %%req%%.
   */
  getRpcRequest(t) {
    switch (t.method) {
      case "chainId":
        return { method: "eth_chainId", args: [] };
      case "getBlockNumber":
        return { method: "eth_blockNumber", args: [] };
      case "getGasPrice":
        return { method: "eth_gasPrice", args: [] };
      case "getPriorityFee":
        return { method: "eth_maxPriorityFeePerGas", args: [] };
      case "getBalance":
        return {
          method: "eth_getBalance",
          args: [Hi(t.address), t.blockTag]
        };
      case "getTransactionCount":
        return {
          method: "eth_getTransactionCount",
          args: [Hi(t.address), t.blockTag]
        };
      case "getCode":
        return {
          method: "eth_getCode",
          args: [Hi(t.address), t.blockTag]
        };
      case "getStorage":
        return {
          method: "eth_getStorageAt",
          args: [
            Hi(t.address),
            "0x" + t.position.toString(16),
            t.blockTag
          ]
        };
      case "broadcastTransaction":
        return {
          method: "eth_sendRawTransaction",
          args: [t.signedTransaction]
        };
      case "getBlock":
        if ("blockTag" in t)
          return {
            method: "eth_getBlockByNumber",
            args: [t.blockTag, !!t.includeTransactions]
          };
        if ("blockHash" in t)
          return {
            method: "eth_getBlockByHash",
            args: [t.blockHash, !!t.includeTransactions]
          };
        break;
      case "getTransaction":
        return {
          method: "eth_getTransactionByHash",
          args: [t.hash]
        };
      case "getTransactionReceipt":
        return {
          method: "eth_getTransactionReceipt",
          args: [t.hash]
        };
      case "call":
        return {
          method: "eth_call",
          args: [this.getRpcTransaction(t.transaction), t.blockTag]
        };
      case "estimateGas":
        return {
          method: "eth_estimateGas",
          args: [this.getRpcTransaction(t.transaction)]
        };
      case "getLogs":
        return t.filter && t.filter.address != null && (Array.isArray(t.filter.address) ? t.filter.address = t.filter.address.map(Hi) : t.filter.address = Hi(t.filter.address)), { method: "eth_getLogs", args: [t.filter] };
    }
    return null;
  }
  /**
   *  Returns an ethers-style Error for the given JSON-RPC error
   *  %%payload%%, coalescing the various strings and error shapes
   *  that different nodes return, coercing them into a machine-readable
   *  standardized error.
   */
  getRpcError(t, e) {
    const { method: r } = t, { error: i } = e;
    if (r === "eth_estimateGas" && i.message) {
      const u = i.message;
      if (!u.match(/revert/i) && u.match(/insufficient funds/i))
        return te("insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: t.params[0],
          info: { payload: t, error: i }
        });
      if (u.match(/nonce/i) && u.match(/too low/i))
        return te("nonce has already been used", "NONCE_EXPIRED", {
          transaction: t.params[0],
          info: { payload: t, error: i }
        });
    }
    if (r === "eth_call" || r === "eth_estimateGas") {
      const u = ku(i), _ = Ci.getBuiltinCallException(r === "eth_call" ? "call" : "estimateGas", t.params[0], u ? u.data : null);
      return _.info = { error: i, payload: t }, _;
    }
    const o = JSON.stringify(zm(i));
    if (typeof i.message == "string" && i.message.match(/user denied|ethers-user-denied/i))
      return te("user rejected action", "ACTION_REJECTED", {
        action: {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        }[r] || "unknown",
        reason: "rejected",
        info: { payload: t, error: i }
      });
    if (r === "eth_sendRawTransaction" || r === "eth_sendTransaction") {
      const u = t.params[0];
      if (o.match(/insufficient funds|base fee exceeds gas limit/i))
        return te("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
          transaction: u,
          info: { error: i }
        });
      if (o.match(/nonce/i) && o.match(/too low/i))
        return te("nonce has already been used", "NONCE_EXPIRED", { transaction: u, info: { error: i } });
      if (o.match(/replacement transaction/i) && o.match(/underpriced/i))
        return te("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction: u, info: { error: i } });
      if (o.match(/only replay-protected/i))
        return te("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
          operation: r,
          info: { transaction: u, info: { error: i } }
        });
    }
    let a = !!o.match(/the method .* does not exist/i);
    return a || i && i.details && i.details.startsWith("Unauthorized method:") && (a = !0), a ? te("unsupported operation", "UNSUPPORTED_OPERATION", {
      operation: t.method,
      info: { error: i, payload: t }
    }) : te("could not coalesce error", "UNKNOWN_ERROR", { error: i, payload: t });
  }
  /**
   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
   *  over the underlying channel. This can be used to call methods
   *  on the backend that do not have a high-level API within the Provider
   *  API.
   *
   *  This method queues requests according to the batch constraints
   *  in the options, assigns the request a unique ID.
   *
   *  **Do NOT override** this method in sub-classes; instead
   *  override [[_send]] or force the options values in the
   *  call to the constructor to modify this method's behavior.
   */
  send(t, e) {
    if (this.destroyed)
      return Promise.reject(te("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: t }));
    const r = this.#e++, i = new Promise((o, a) => {
      this.#r.push({
        resolve: o,
        reject: a,
        payload: { method: t, params: e, id: r, jsonrpc: "2.0" }
      });
    });
    return this.#a(), i;
  }
  /**
   *  Resolves to the [[Signer]] account for  %%address%% managed by
   *  the client.
   *
   *  If the %%address%% is a number, it is used as an index in the
   *  the accounts from [[listAccounts]].
   *
   *  This can only be used on clients which manage accounts (such as
   *  Geth with imported account or MetaMask).
   *
   *  Throws if the account doesn't exist.
   */
  async getSigner(t) {
    t == null && (t = 0);
    const e = this.send("eth_accounts", []);
    if (typeof t == "number") {
      const i = await e;
      if (t >= i.length)
        throw new Error("no such account");
      return new ja(this, i[t]);
    }
    const { accounts: r } = await ve({
      network: this.getNetwork(),
      accounts: e
    });
    t = Ut(t);
    for (const i of r)
      if (Ut(i) === t)
        return new ja(this, t);
    throw new Error("invalid account");
  }
  async listAccounts() {
    return (await this.send("eth_accounts", [])).map((e) => new ja(this, e));
  }
  destroy() {
    this.#n && (clearTimeout(this.#n), this.#n = null);
    for (const { payload: t, reject: e } of this.#r)
      e(te("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: t.method }));
    this.#r = [], super.destroy();
  }
}
class Yd extends xm {
  #t;
  constructor(t, e) {
    super(t, e);
    let r = this._getOption("pollingInterval");
    r == null && (r = $d.pollingInterval), this.#t = r;
  }
  _getSubscriber(t) {
    const e = super._getSubscriber(t);
    return Pf(e) && (e.pollingInterval = this.#t), e;
  }
  /**
   *  The polling interval (default: 4000 ms)
   */
  get pollingInterval() {
    return this.#t;
  }
  set pollingInterval(t) {
    if (!Number.isInteger(t) || t < 0)
      throw new Error("invalid interval");
    this.#t = t, this._forEachSubscriber((e) => {
      Pf(e) && (e.pollingInterval = this.#t);
    });
  }
}
class Rm extends Yd {
  #t;
  constructor(t, e, r) {
    t == null && (t = "http://localhost:8545"), super(e, r), typeof t == "string" ? this.#t = new fr(t) : this.#t = t.clone();
  }
  _getConnection() {
    return this.#t.clone();
  }
  async send(t, e) {
    return await this._start(), await super.send(t, e);
  }
  async _send(t) {
    const e = this._getConnection();
    e.body = JSON.stringify(t), e.setHeader("content-type", "application/json");
    const r = await e.send();
    r.assertOk();
    let i = r.bodyJson;
    return Array.isArray(i) || (i = [i]), i;
  }
}
function ku(n) {
  if (n == null)
    return null;
  if (typeof n.message == "string" && n.message.match(/revert/i) && Xt(n.data))
    return { message: n.message, data: n.data };
  if (typeof n == "object") {
    for (const t in n) {
      const e = ku(n[t]);
      if (e)
        return e;
    }
    return null;
  }
  if (typeof n == "string")
    try {
      return ku(JSON.parse(n));
    } catch {
    }
  return null;
}
function Fu(n, t) {
  if (n != null) {
    if (typeof n.message == "string" && t.push(n.message), typeof n == "object")
      for (const e in n)
        Fu(n[e], t);
    if (typeof n == "string")
      try {
        return Fu(JSON.parse(n), t);
      } catch {
      }
  }
}
function zm(n) {
  const t = [];
  return Fu(n, t), t;
}
class vi extends Yd {
  #t;
  #e;
  /**
   *  Connect to the %%ethereum%% provider, optionally forcing the
   *  %%network%%.
   */
  constructor(t, e, r) {
    const i = Object.assign({}, r ?? {}, { batchMaxCount: 1 });
    V(t && t.request, "invalid EIP-1193 provider", "ethereum", t), super(e, i), this.#e = null, r && r.providerInfo && (this.#e = r.providerInfo), this.#t = async (o, a) => {
      const u = { method: o, params: a };
      this.emit("debug", { action: "sendEip1193Request", payload: u });
      try {
        const _ = await t.request(u);
        return this.emit("debug", { action: "receiveEip1193Result", result: _ }), _;
      } catch (_) {
        const l = new Error(_.message);
        throw l.code = _.code, l.data = _.data, l.payload = u, this.emit("debug", { action: "receiveEip1193Error", error: l }), l;
      }
    };
  }
  get providerInfo() {
    return this.#e;
  }
  async send(t, e) {
    return await this._start(), await super.send(t, e);
  }
  async _send(t) {
    V(!Array.isArray(t), "EIP-1193 does not support batch request", "payload", t);
    try {
      const e = await this.#t(t.method, t.params || []);
      return [{ id: t.id, result: e }];
    } catch (e) {
      return [{
        id: t.id,
        error: { code: e.code, data: e.data, message: e.message }
      }];
    }
  }
  getRpcError(t, e) {
    switch (e = JSON.parse(JSON.stringify(e)), e.error.code || -1) {
      case 4001:
        e.error.message = `ethers-user-denied: ${e.error.message}`;
        break;
      case 4200:
        e.error.message = `ethers-unsupported: ${e.error.message}`;
        break;
    }
    return super.getRpcError(t, e);
  }
  /**
   *  Resolves to ``true`` if the provider manages the %%address%%.
   */
  async hasSigner(t) {
    t == null && (t = 0);
    const e = await this.send("eth_accounts", []);
    return typeof t == "number" ? e.length > t : (t = t.toLowerCase(), e.filter((r) => r.toLowerCase() === t).length !== 0);
  }
  async getSigner(t) {
    if (t == null && (t = 0), !await this.hasSigner(t))
      try {
        await this.#t("eth_requestAccounts", []);
      } catch (e) {
        const r = e.payload;
        throw this.getRpcError(r, { id: r.id, error: e });
      }
    return await super.getSigner(t);
  }
  /**
   *  Discover and connect to a Provider in the Browser using the
   *  [[link-eip-6963]] discovery mechanism. If no providers are
   *  present, ``null`` is resolved.
   */
  static async discover(t) {
    if (t == null && (t = {}), t.provider)
      return new vi(t.provider);
    const e = t.window ? t.window : typeof window < "u" ? window : null;
    if (e == null)
      return null;
    const r = t.anyProvider;
    if (r && e.ethereum)
      return new vi(e.ethereum);
    if (!("addEventListener" in e && "dispatchEvent" in e && "removeEventListener" in e))
      return null;
    const i = t.timeout ? t.timeout : 300;
    return i === 0 ? null : await new Promise((o, a) => {
      let u = [];
      const _ = (g) => {
        u.push(g.detail), r && l();
      }, l = () => {
        if (clearTimeout(f), u.length)
          if (t && t.filter) {
            const g = t.filter(u.map((y) => Object.assign({}, y.info)));
            if (g == null)
              o(null);
            else if (g instanceof vi)
              o(g);
            else {
              let y = null;
              if (g.uuid && (y = u.filter((I) => g.uuid === I.info.uuid)[0]), y) {
                const { provider: B, info: I } = y;
                o(new vi(B, void 0, {
                  providerInfo: I
                }));
              } else
                a(te("filter returned unknown info", "UNSUPPORTED_OPERATION", {
                  value: g
                }));
            }
          } else {
            const { provider: g, info: y } = u[0];
            o(new vi(g, void 0, {
              providerInfo: y
            }));
          }
        else
          o(null);
        e.removeEventListener("eip6963:announceProvider", _);
      }, f = setTimeout(() => {
        l();
      }, i);
      e.addEventListener("eip6963:announceProvider", _), e.dispatchEvent(new Event("eip6963:requestProvider"));
    });
  }
}
var li = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Zd(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var lo = { exports: {} };
function Bm(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var Xd = { exports: {} }, _e = Xd.exports = {}, sr, or;
function Iu() {
  throw new Error("setTimeout has not been defined");
}
function Ou() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    typeof setTimeout == "function" ? sr = setTimeout : sr = Iu;
  } catch {
    sr = Iu;
  }
  try {
    typeof clearTimeout == "function" ? or = clearTimeout : or = Ou;
  } catch {
    or = Ou;
  }
})();
function tg(n) {
  if (sr === setTimeout)
    return setTimeout(n, 0);
  if ((sr === Iu || !sr) && setTimeout)
    return sr = setTimeout, setTimeout(n, 0);
  try {
    return sr(n, 0);
  } catch {
    try {
      return sr.call(null, n, 0);
    } catch {
      return sr.call(this, n, 0);
    }
  }
}
function Sm(n) {
  if (or === clearTimeout)
    return clearTimeout(n);
  if ((or === Ou || !or) && clearTimeout)
    return or = clearTimeout, clearTimeout(n);
  try {
    return or(n);
  } catch {
    try {
      return or.call(null, n);
    } catch {
      return or.call(this, n);
    }
  }
}
var Wn = [], Xi = !1, Bi, Ao = -1;
function Pm() {
  !Xi || !Bi || (Xi = !1, Bi.length ? Wn = Bi.concat(Wn) : Ao = -1, Wn.length && eg());
}
function eg() {
  if (!Xi) {
    var n = tg(Pm);
    Xi = !0;
    for (var t = Wn.length; t; ) {
      for (Bi = Wn, Wn = []; ++Ao < t; )
        Bi && Bi[Ao].run();
      Ao = -1, t = Wn.length;
    }
    Bi = null, Xi = !1, Sm(n);
  }
}
_e.nextTick = function(n) {
  var t = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var e = 1; e < arguments.length; e++)
      t[e - 1] = arguments[e];
  Wn.push(new rg(n, t)), Wn.length === 1 && !Xi && tg(eg);
};
function rg(n, t) {
  this.fun = n, this.array = t;
}
rg.prototype.run = function() {
  this.fun.apply(null, this.array);
};
_e.title = "browser";
_e.browser = !0;
_e.env = {};
_e.argv = [];
_e.version = "";
_e.versions = {};
function ti() {
}
_e.on = ti;
_e.addListener = ti;
_e.once = ti;
_e.off = ti;
_e.removeListener = ti;
_e.removeAllListeners = ti;
_e.emit = ti;
_e.prependListener = ti;
_e.prependOnceListener = ti;
_e.listeners = function(n) {
  return [];
};
_e.binding = function(n) {
  throw new Error("process.binding is not supported");
};
_e.cwd = function() {
  return "/";
};
_e.chdir = function(n) {
  throw new Error("process.chdir is not supported");
};
_e.umask = function() {
  return 0;
};
var km = Xd.exports;
const Ct = /* @__PURE__ */ Bm(km);
var ho = { exports: {} }, kf;
function ng() {
  if (kf) return ho.exports;
  kf = 1;
  var n = typeof Reflect == "object" ? Reflect : null, t = n && typeof n.apply == "function" ? n.apply : function(k, C, N) {
    return Function.prototype.apply.call(k, C, N);
  }, e;
  n && typeof n.ownKeys == "function" ? e = n.ownKeys : Object.getOwnPropertySymbols ? e = function(k) {
    return Object.getOwnPropertyNames(k).concat(Object.getOwnPropertySymbols(k));
  } : e = function(k) {
    return Object.getOwnPropertyNames(k);
  };
  function r(z) {
    console && console.warn && console.warn(z);
  }
  var i = Number.isNaN || function(k) {
    return k !== k;
  };
  function o() {
    o.init.call(this);
  }
  ho.exports = o, ho.exports.once = A, o.EventEmitter = o, o.prototype._events = void 0, o.prototype._eventsCount = 0, o.prototype._maxListeners = void 0;
  var a = 10;
  function u(z) {
    if (typeof z != "function")
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof z);
  }
  Object.defineProperty(o, "defaultMaxListeners", {
    enumerable: !0,
    get: function() {
      return a;
    },
    set: function(z) {
      if (typeof z != "number" || z < 0 || i(z))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + z + ".");
      a = z;
    }
  }), o.init = function() {
    (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
  }, o.prototype.setMaxListeners = function(k) {
    if (typeof k != "number" || k < 0 || i(k))
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + k + ".");
    return this._maxListeners = k, this;
  };
  function _(z) {
    return z._maxListeners === void 0 ? o.defaultMaxListeners : z._maxListeners;
  }
  o.prototype.getMaxListeners = function() {
    return _(this);
  }, o.prototype.emit = function(k) {
    for (var C = [], N = 1; N < arguments.length; N++) C.push(arguments[N]);
    var D = k === "error", Y = this._events;
    if (Y !== void 0)
      D = D && Y.error === void 0;
    else if (!D)
      return !1;
    if (D) {
      var Z;
      if (C.length > 0 && (Z = C[0]), Z instanceof Error)
        throw Z;
      var ft = new Error("Unhandled error." + (Z ? " (" + Z.message + ")" : ""));
      throw ft.context = Z, ft;
    }
    var L = Y[k];
    if (L === void 0)
      return !1;
    if (typeof L == "function")
      t(L, this, C);
    else
      for (var At = L.length, Rt = I(L, At), N = 0; N < At; ++N)
        t(Rt[N], this, C);
    return !0;
  };
  function l(z, k, C, N) {
    var D, Y, Z;
    if (u(C), Y = z._events, Y === void 0 ? (Y = z._events = /* @__PURE__ */ Object.create(null), z._eventsCount = 0) : (Y.newListener !== void 0 && (z.emit(
      "newListener",
      k,
      C.listener ? C.listener : C
    ), Y = z._events), Z = Y[k]), Z === void 0)
      Z = Y[k] = C, ++z._eventsCount;
    else if (typeof Z == "function" ? Z = Y[k] = N ? [C, Z] : [Z, C] : N ? Z.unshift(C) : Z.push(C), D = _(z), D > 0 && Z.length > D && !Z.warned) {
      Z.warned = !0;
      var ft = new Error("Possible EventEmitter memory leak detected. " + Z.length + " " + String(k) + " listeners added. Use emitter.setMaxListeners() to increase limit");
      ft.name = "MaxListenersExceededWarning", ft.emitter = z, ft.type = k, ft.count = Z.length, r(ft);
    }
    return z;
  }
  o.prototype.addListener = function(k, C) {
    return l(this, k, C, !1);
  }, o.prototype.on = o.prototype.addListener, o.prototype.prependListener = function(k, C) {
    return l(this, k, C, !0);
  };
  function f() {
    if (!this.fired)
      return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
  }
  function g(z, k, C) {
    var N = { fired: !1, wrapFn: void 0, target: z, type: k, listener: C }, D = f.bind(N);
    return D.listener = C, N.wrapFn = D, D;
  }
  o.prototype.once = function(k, C) {
    return u(C), this.on(k, g(this, k, C)), this;
  }, o.prototype.prependOnceListener = function(k, C) {
    return u(C), this.prependListener(k, g(this, k, C)), this;
  }, o.prototype.removeListener = function(k, C) {
    var N, D, Y, Z, ft;
    if (u(C), D = this._events, D === void 0)
      return this;
    if (N = D[k], N === void 0)
      return this;
    if (N === C || N.listener === C)
      --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete D[k], D.removeListener && this.emit("removeListener", k, N.listener || C));
    else if (typeof N != "function") {
      for (Y = -1, Z = N.length - 1; Z >= 0; Z--)
        if (N[Z] === C || N[Z].listener === C) {
          ft = N[Z].listener, Y = Z;
          break;
        }
      if (Y < 0)
        return this;
      Y === 0 ? N.shift() : S(N, Y), N.length === 1 && (D[k] = N[0]), D.removeListener !== void 0 && this.emit("removeListener", k, ft || C);
    }
    return this;
  }, o.prototype.off = o.prototype.removeListener, o.prototype.removeAllListeners = function(k) {
    var C, N, D;
    if (N = this._events, N === void 0)
      return this;
    if (N.removeListener === void 0)
      return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : N[k] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete N[k]), this;
    if (arguments.length === 0) {
      var Y = Object.keys(N), Z;
      for (D = 0; D < Y.length; ++D)
        Z = Y[D], Z !== "removeListener" && this.removeAllListeners(Z);
      return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
    }
    if (C = N[k], typeof C == "function")
      this.removeListener(k, C);
    else if (C !== void 0)
      for (D = C.length - 1; D >= 0; D--)
        this.removeListener(k, C[D]);
    return this;
  };
  function y(z, k, C) {
    var N = z._events;
    if (N === void 0)
      return [];
    var D = N[k];
    return D === void 0 ? [] : typeof D == "function" ? C ? [D.listener || D] : [D] : C ? T(D) : I(D, D.length);
  }
  o.prototype.listeners = function(k) {
    return y(this, k, !0);
  }, o.prototype.rawListeners = function(k) {
    return y(this, k, !1);
  }, o.listenerCount = function(z, k) {
    return typeof z.listenerCount == "function" ? z.listenerCount(k) : B.call(z, k);
  }, o.prototype.listenerCount = B;
  function B(z) {
    var k = this._events;
    if (k !== void 0) {
      var C = k[z];
      if (typeof C == "function")
        return 1;
      if (C !== void 0)
        return C.length;
    }
    return 0;
  }
  o.prototype.eventNames = function() {
    return this._eventsCount > 0 ? e(this._events) : [];
  };
  function I(z, k) {
    for (var C = new Array(k), N = 0; N < k; ++N)
      C[N] = z[N];
    return C;
  }
  function S(z, k) {
    for (; k + 1 < z.length; k++)
      z[k] = z[k + 1];
    z.pop();
  }
  function T(z) {
    for (var k = new Array(z.length), C = 0; C < k.length; ++C)
      k[C] = z[C].listener || z[C];
    return k;
  }
  function A(z, k) {
    return new Promise(function(C, N) {
      function D(Z) {
        z.removeListener(k, Y), N(Z);
      }
      function Y() {
        typeof z.removeListener == "function" && z.removeListener("error", D), C([].slice.call(arguments));
      }
      P(z, k, Y, { once: !0 }), k !== "error" && R(z, D, { once: !0 });
    });
  }
  function R(z, k, C) {
    typeof z.on == "function" && P(z, "error", k, C);
  }
  function P(z, k, C, N) {
    if (typeof z.on == "function")
      N.once ? z.once(k, C) : z.on(k, C);
    else if (typeof z.addEventListener == "function")
      z.addEventListener(k, function D(Y) {
        N.once && z.removeEventListener(k, D), C(Y);
      });
    else
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof z);
  }
  return ho.exports;
}
var Ga, Ff;
function ig() {
  return Ff || (Ff = 1, Ga = ng().EventEmitter), Ga;
}
var Ha = {}, If;
function Xo() {
  return If || (If = 1, function(n) {
    Object.defineProperties(n, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } });
    var t = {}, e = {};
    e.byteLength = f, e.toByteArray = y, e.fromByteArray = S;
    for (var r = [], i = [], o = typeof Uint8Array < "u" ? Uint8Array : Array, a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", u = 0, _ = a.length; u < _; ++u)
      r[u] = a[u], i[a.charCodeAt(u)] = u;
    i[45] = 62, i[95] = 63;
    function l(R) {
      var P = R.length;
      if (P % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var z = R.indexOf("=");
      z === -1 && (z = P);
      var k = z === P ? 0 : 4 - z % 4;
      return [z, k];
    }
    function f(R) {
      var P = l(R), z = P[0], k = P[1];
      return (z + k) * 3 / 4 - k;
    }
    function g(R, P, z) {
      return (P + z) * 3 / 4 - z;
    }
    function y(R) {
      var P, z = l(R), k = z[0], C = z[1], N = new o(g(R, k, C)), D = 0, Y = C > 0 ? k - 4 : k, Z;
      for (Z = 0; Z < Y; Z += 4)
        P = i[R.charCodeAt(Z)] << 18 | i[R.charCodeAt(Z + 1)] << 12 | i[R.charCodeAt(Z + 2)] << 6 | i[R.charCodeAt(Z + 3)], N[D++] = P >> 16 & 255, N[D++] = P >> 8 & 255, N[D++] = P & 255;
      return C === 2 && (P = i[R.charCodeAt(Z)] << 2 | i[R.charCodeAt(Z + 1)] >> 4, N[D++] = P & 255), C === 1 && (P = i[R.charCodeAt(Z)] << 10 | i[R.charCodeAt(Z + 1)] << 4 | i[R.charCodeAt(Z + 2)] >> 2, N[D++] = P >> 8 & 255, N[D++] = P & 255), N;
    }
    function B(R) {
      return r[R >> 18 & 63] + r[R >> 12 & 63] + r[R >> 6 & 63] + r[R & 63];
    }
    function I(R, P, z) {
      for (var k, C = [], N = P; N < z; N += 3)
        k = (R[N] << 16 & 16711680) + (R[N + 1] << 8 & 65280) + (R[N + 2] & 255), C.push(B(k));
      return C.join("");
    }
    function S(R) {
      for (var P, z = R.length, k = z % 3, C = [], N = 16383, D = 0, Y = z - k; D < Y; D += N)
        C.push(I(R, D, D + N > Y ? Y : D + N));
      return k === 1 ? (P = R[z - 1], C.push(
        r[P >> 2] + r[P << 4 & 63] + "=="
      )) : k === 2 && (P = (R[z - 2] << 8) + R[z - 1], C.push(
        r[P >> 10] + r[P >> 4 & 63] + r[P << 2 & 63] + "="
      )), C.join("");
    }
    var T = {};
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    T.read = function(R, P, z, k, C) {
      var N, D, Y = C * 8 - k - 1, Z = (1 << Y) - 1, ft = Z >> 1, L = -7, At = z ? C - 1 : 0, Rt = z ? -1 : 1, at = R[P + At];
      for (At += Rt, N = at & (1 << -L) - 1, at >>= -L, L += Y; L > 0; N = N * 256 + R[P + At], At += Rt, L -= 8)
        ;
      for (D = N & (1 << -L) - 1, N >>= -L, L += k; L > 0; D = D * 256 + R[P + At], At += Rt, L -= 8)
        ;
      if (N === 0)
        N = 1 - ft;
      else {
        if (N === Z)
          return D ? NaN : (at ? -1 : 1) * (1 / 0);
        D = D + Math.pow(2, k), N = N - ft;
      }
      return (at ? -1 : 1) * D * Math.pow(2, N - k);
    }, T.write = function(R, P, z, k, C, N) {
      var D, Y, Z, ft = N * 8 - C - 1, L = (1 << ft) - 1, At = L >> 1, Rt = C === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, at = k ? 0 : N - 1, wt = k ? 1 : -1, Et = P < 0 || P === 0 && 1 / P < 0 ? 1 : 0;
      for (P = Math.abs(P), isNaN(P) || P === 1 / 0 ? (Y = isNaN(P) ? 1 : 0, D = L) : (D = Math.floor(Math.log(P) / Math.LN2), P * (Z = Math.pow(2, -D)) < 1 && (D--, Z *= 2), D + At >= 1 ? P += Rt / Z : P += Rt * Math.pow(2, 1 - At), P * Z >= 2 && (D++, Z /= 2), D + At >= L ? (Y = 0, D = L) : D + At >= 1 ? (Y = (P * Z - 1) * Math.pow(2, C), D = D + At) : (Y = P * Math.pow(2, At - 1) * Math.pow(2, C), D = 0)); C >= 8; R[z + at] = Y & 255, at += wt, Y /= 256, C -= 8)
        ;
      for (D = D << C | Y, ft += C; ft > 0; R[z + at] = D & 255, at += wt, D /= 256, ft -= 8)
        ;
      R[z + at - wt] |= Et * 128;
    };
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    (function(R) {
      const P = e, z = T, k = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
      R.Buffer = L, R.SlowBuffer = X, R.INSPECT_MAX_BYTES = 50;
      const C = 2147483647;
      R.kMaxLength = C;
      const { Uint8Array: N, ArrayBuffer: D, SharedArrayBuffer: Y } = globalThis;
      L.TYPED_ARRAY_SUPPORT = Z(), !L.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
      function Z() {
        try {
          const m = new N(1), p = { foo: function() {
            return 42;
          } };
          return Object.setPrototypeOf(p, N.prototype), Object.setPrototypeOf(m, p), m.foo() === 42;
        } catch {
          return !1;
        }
      }
      Object.defineProperty(L.prototype, "parent", {
        enumerable: !0,
        get: function() {
          if (L.isBuffer(this))
            return this.buffer;
        }
      }), Object.defineProperty(L.prototype, "offset", {
        enumerable: !0,
        get: function() {
          if (L.isBuffer(this))
            return this.byteOffset;
        }
      });
      function ft(m) {
        if (m > C)
          throw new RangeError('The value "' + m + '" is invalid for option "size"');
        const p = new N(m);
        return Object.setPrototypeOf(p, L.prototype), p;
      }
      function L(m, p, d) {
        if (typeof m == "number") {
          if (typeof p == "string")
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          return wt(m);
        }
        return At(m, p, d);
      }
      L.poolSize = 8192;
      function At(m, p, d) {
        if (typeof m == "string")
          return Et(m, p);
        if (D.isView(m))
          return vt(m);
        if (m == null)
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof m
          );
        if (Pe(m, D) || m && Pe(m.buffer, D) || typeof Y < "u" && (Pe(m, Y) || m && Pe(m.buffer, Y)))
          return Bt(m, p, d);
        if (typeof m == "number")
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        const O = m.valueOf && m.valueOf();
        if (O != null && O !== m)
          return L.from(O, p, d);
        const H = jt(m);
        if (H) return H;
        if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof m[Symbol.toPrimitive] == "function")
          return L.from(m[Symbol.toPrimitive]("string"), p, d);
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof m
        );
      }
      L.from = function(m, p, d) {
        return At(m, p, d);
      }, Object.setPrototypeOf(L.prototype, N.prototype), Object.setPrototypeOf(L, N);
      function Rt(m) {
        if (typeof m != "number")
          throw new TypeError('"size" argument must be of type number');
        if (m < 0)
          throw new RangeError('The value "' + m + '" is invalid for option "size"');
      }
      function at(m, p, d) {
        return Rt(m), m <= 0 ? ft(m) : p !== void 0 ? typeof d == "string" ? ft(m).fill(p, d) : ft(m).fill(p) : ft(m);
      }
      L.alloc = function(m, p, d) {
        return at(m, p, d);
      };
      function wt(m) {
        return Rt(m), ft(m < 0 ? 0 : W(m) | 0);
      }
      L.allocUnsafe = function(m) {
        return wt(m);
      }, L.allocUnsafeSlow = function(m) {
        return wt(m);
      };
      function Et(m, p) {
        if ((typeof p != "string" || p === "") && (p = "utf8"), !L.isEncoding(p))
          throw new TypeError("Unknown encoding: " + p);
        const d = nt(m, p) | 0;
        let O = ft(d);
        const H = O.write(m, p);
        return H !== d && (O = O.slice(0, H)), O;
      }
      function xt(m) {
        const p = m.length < 0 ? 0 : W(m.length) | 0, d = ft(p);
        for (let O = 0; O < p; O += 1)
          d[O] = m[O] & 255;
        return d;
      }
      function vt(m) {
        if (Pe(m, N)) {
          const p = new N(m);
          return Bt(p.buffer, p.byteOffset, p.byteLength);
        }
        return xt(m);
      }
      function Bt(m, p, d) {
        if (p < 0 || m.byteLength < p)
          throw new RangeError('"offset" is outside of buffer bounds');
        if (m.byteLength < p + (d || 0))
          throw new RangeError('"length" is outside of buffer bounds');
        let O;
        return p === void 0 && d === void 0 ? O = new N(m) : d === void 0 ? O = new N(m, p) : O = new N(m, p, d), Object.setPrototypeOf(O, L.prototype), O;
      }
      function jt(m) {
        if (L.isBuffer(m)) {
          const p = W(m.length) | 0, d = ft(p);
          return d.length === 0 || m.copy(d, 0, 0, p), d;
        }
        if (m.length !== void 0)
          return typeof m.length != "number" || pi(m.length) ? ft(0) : xt(m);
        if (m.type === "Buffer" && Array.isArray(m.data))
          return xt(m.data);
      }
      function W(m) {
        if (m >= C)
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + C.toString(16) + " bytes");
        return m | 0;
      }
      function X(m) {
        return +m != m && (m = 0), L.alloc(+m);
      }
      L.isBuffer = function(p) {
        return p != null && p._isBuffer === !0 && p !== L.prototype;
      }, L.compare = function(p, d) {
        if (Pe(p, N) && (p = L.from(p, p.offset, p.byteLength)), Pe(d, N) && (d = L.from(d, d.offset, d.byteLength)), !L.isBuffer(p) || !L.isBuffer(d))
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        if (p === d) return 0;
        let O = p.length, H = d.length;
        for (let $ = 0, ot = Math.min(O, H); $ < ot; ++$)
          if (p[$] !== d[$]) {
            O = p[$], H = d[$];
            break;
          }
        return O < H ? -1 : H < O ? 1 : 0;
      }, L.isEncoding = function(p) {
        switch (String(p).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return !0;
          default:
            return !1;
        }
      }, L.concat = function(p, d) {
        if (!Array.isArray(p))
          throw new TypeError('"list" argument must be an Array of Buffers');
        if (p.length === 0)
          return L.alloc(0);
        let O;
        if (d === void 0)
          for (d = 0, O = 0; O < p.length; ++O)
            d += p[O].length;
        const H = L.allocUnsafe(d);
        let $ = 0;
        for (O = 0; O < p.length; ++O) {
          let ot = p[O];
          if (Pe(ot, N))
            $ + ot.length > H.length ? (L.isBuffer(ot) || (ot = L.from(ot)), ot.copy(H, $)) : N.prototype.set.call(
              H,
              ot,
              $
            );
          else if (L.isBuffer(ot))
            ot.copy(H, $);
          else
            throw new TypeError('"list" argument must be an Array of Buffers');
          $ += ot.length;
        }
        return H;
      };
      function nt(m, p) {
        if (L.isBuffer(m))
          return m.length;
        if (D.isView(m) || Pe(m, D))
          return m.byteLength;
        if (typeof m != "string")
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof m
          );
        const d = m.length, O = arguments.length > 2 && arguments[2] === !0;
        if (!O && d === 0) return 0;
        let H = !1;
        for (; ; )
          switch (p) {
            case "ascii":
            case "latin1":
            case "binary":
              return d;
            case "utf8":
            case "utf-8":
              return Vt(m).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return d * 2;
            case "hex":
              return d >>> 1;
            case "base64":
              return Dt(m).length;
            default:
              if (H)
                return O ? -1 : Vt(m).length;
              p = ("" + p).toLowerCase(), H = !0;
          }
      }
      L.byteLength = nt;
      function dt(m, p, d) {
        let O = !1;
        if ((p === void 0 || p < 0) && (p = 0), p > this.length || ((d === void 0 || d > this.length) && (d = this.length), d <= 0) || (d >>>= 0, p >>>= 0, d <= p))
          return "";
        for (m || (m = "utf8"); ; )
          switch (m) {
            case "hex":
              return pe(this, p, d);
            case "utf8":
            case "utf-8":
              return St(this, p, d);
            case "ascii":
              return he(this, p, d);
            case "latin1":
            case "binary":
              return it(this, p, d);
            case "base64":
              return lt(this, p, d);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return we(this, p, d);
            default:
              if (O) throw new TypeError("Unknown encoding: " + m);
              m = (m + "").toLowerCase(), O = !0;
          }
      }
      L.prototype._isBuffer = !0;
      function G(m, p, d) {
        const O = m[p];
        m[p] = m[d], m[d] = O;
      }
      L.prototype.swap16 = function() {
        const p = this.length;
        if (p % 2 !== 0)
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (let d = 0; d < p; d += 2)
          G(this, d, d + 1);
        return this;
      }, L.prototype.swap32 = function() {
        const p = this.length;
        if (p % 4 !== 0)
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (let d = 0; d < p; d += 4)
          G(this, d, d + 3), G(this, d + 1, d + 2);
        return this;
      }, L.prototype.swap64 = function() {
        const p = this.length;
        if (p % 8 !== 0)
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (let d = 0; d < p; d += 8)
          G(this, d, d + 7), G(this, d + 1, d + 6), G(this, d + 2, d + 5), G(this, d + 3, d + 4);
        return this;
      }, L.prototype.toString = function() {
        const p = this.length;
        return p === 0 ? "" : arguments.length === 0 ? St(this, 0, p) : dt.apply(this, arguments);
      }, L.prototype.toLocaleString = L.prototype.toString, L.prototype.equals = function(p) {
        if (!L.isBuffer(p)) throw new TypeError("Argument must be a Buffer");
        return this === p ? !0 : L.compare(this, p) === 0;
      }, L.prototype.inspect = function() {
        let p = "";
        const d = R.INSPECT_MAX_BYTES;
        return p = this.toString("hex", 0, d).replace(/(.{2})/g, "$1 ").trim(), this.length > d && (p += " ... "), "<Buffer " + p + ">";
      }, k && (L.prototype[k] = L.prototype.inspect), L.prototype.compare = function(p, d, O, H, $) {
        if (Pe(p, N) && (p = L.from(p, p.offset, p.byteLength)), !L.isBuffer(p))
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof p
          );
        if (d === void 0 && (d = 0), O === void 0 && (O = p ? p.length : 0), H === void 0 && (H = 0), $ === void 0 && ($ = this.length), d < 0 || O > p.length || H < 0 || $ > this.length)
          throw new RangeError("out of range index");
        if (H >= $ && d >= O)
          return 0;
        if (H >= $)
          return -1;
        if (d >= O)
          return 1;
        if (d >>>= 0, O >>>= 0, H >>>= 0, $ >>>= 0, this === p) return 0;
        let ot = $ - H, Ft = O - d;
        const $t = Math.min(ot, Ft), Wt = this.slice(H, $), Yt = p.slice(d, O);
        for (let Ht = 0; Ht < $t; ++Ht)
          if (Wt[Ht] !== Yt[Ht]) {
            ot = Wt[Ht], Ft = Yt[Ht];
            break;
          }
        return ot < Ft ? -1 : Ft < ot ? 1 : 0;
      };
      function M(m, p, d, O, H) {
        if (m.length === 0) return -1;
        if (typeof d == "string" ? (O = d, d = 0) : d > 2147483647 ? d = 2147483647 : d < -2147483648 && (d = -2147483648), d = +d, pi(d) && (d = H ? 0 : m.length - 1), d < 0 && (d = m.length + d), d >= m.length) {
          if (H) return -1;
          d = m.length - 1;
        } else if (d < 0)
          if (H) d = 0;
          else return -1;
        if (typeof p == "string" && (p = L.from(p, O)), L.isBuffer(p))
          return p.length === 0 ? -1 : tt(m, p, d, O, H);
        if (typeof p == "number")
          return p = p & 255, typeof N.prototype.indexOf == "function" ? H ? N.prototype.indexOf.call(m, p, d) : N.prototype.lastIndexOf.call(m, p, d) : tt(m, [p], d, O, H);
        throw new TypeError("val must be string, number or Buffer");
      }
      function tt(m, p, d, O, H) {
        let $ = 1, ot = m.length, Ft = p.length;
        if (O !== void 0 && (O = String(O).toLowerCase(), O === "ucs2" || O === "ucs-2" || O === "utf16le" || O === "utf-16le")) {
          if (m.length < 2 || p.length < 2)
            return -1;
          $ = 2, ot /= 2, Ft /= 2, d /= 2;
        }
        function $t(Yt, Ht) {
          return $ === 1 ? Yt[Ht] : Yt.readUInt16BE(Ht * $);
        }
        let Wt;
        if (H) {
          let Yt = -1;
          for (Wt = d; Wt < ot; Wt++)
            if ($t(m, Wt) === $t(p, Yt === -1 ? 0 : Wt - Yt)) {
              if (Yt === -1 && (Yt = Wt), Wt - Yt + 1 === Ft) return Yt * $;
            } else
              Yt !== -1 && (Wt -= Wt - Yt), Yt = -1;
        } else
          for (d + Ft > ot && (d = ot - Ft), Wt = d; Wt >= 0; Wt--) {
            let Yt = !0;
            for (let Ht = 0; Ht < Ft; Ht++)
              if ($t(m, Wt + Ht) !== $t(p, Ht)) {
                Yt = !1;
                break;
              }
            if (Yt) return Wt;
          }
        return -1;
      }
      L.prototype.includes = function(p, d, O) {
        return this.indexOf(p, d, O) !== -1;
      }, L.prototype.indexOf = function(p, d, O) {
        return M(this, p, d, O, !0);
      }, L.prototype.lastIndexOf = function(p, d, O) {
        return M(this, p, d, O, !1);
      };
      function ct(m, p, d, O) {
        d = Number(d) || 0;
        const H = m.length - d;
        O ? (O = Number(O), O > H && (O = H)) : O = H;
        const $ = p.length;
        O > $ / 2 && (O = $ / 2);
        let ot;
        for (ot = 0; ot < O; ++ot) {
          const Ft = parseInt(p.substr(ot * 2, 2), 16);
          if (pi(Ft)) return ot;
          m[d + ot] = Ft;
        }
        return ot;
      }
      function ut(m, p, d, O) {
        return ei(Vt(p, m.length - d), m, d, O);
      }
      function v(m, p, d, O) {
        return ei(qt(p), m, d, O);
      }
      function x(m, p, d, O) {
        return ei(Dt(p), m, d, O);
      }
      function et(m, p, d, O) {
        return ei(Kt(p, m.length - d), m, d, O);
      }
      L.prototype.write = function(p, d, O, H) {
        if (d === void 0)
          H = "utf8", O = this.length, d = 0;
        else if (O === void 0 && typeof d == "string")
          H = d, O = this.length, d = 0;
        else if (isFinite(d))
          d = d >>> 0, isFinite(O) ? (O = O >>> 0, H === void 0 && (H = "utf8")) : (H = O, O = void 0);
        else
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        const $ = this.length - d;
        if ((O === void 0 || O > $) && (O = $), p.length > 0 && (O < 0 || d < 0) || d > this.length)
          throw new RangeError("Attempt to write outside buffer bounds");
        H || (H = "utf8");
        let ot = !1;
        for (; ; )
          switch (H) {
            case "hex":
              return ct(this, p, d, O);
            case "utf8":
            case "utf-8":
              return ut(this, p, d, O);
            case "ascii":
            case "latin1":
            case "binary":
              return v(this, p, d, O);
            case "base64":
              return x(this, p, d, O);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return et(this, p, d, O);
            default:
              if (ot) throw new TypeError("Unknown encoding: " + H);
              H = ("" + H).toLowerCase(), ot = !0;
          }
      }, L.prototype.toJSON = function() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function lt(m, p, d) {
        return p === 0 && d === m.length ? P.fromByteArray(m) : P.fromByteArray(m.slice(p, d));
      }
      function St(m, p, d) {
        d = Math.min(m.length, d);
        const O = [];
        let H = p;
        for (; H < d; ) {
          const $ = m[H];
          let ot = null, Ft = $ > 239 ? 4 : $ > 223 ? 3 : $ > 191 ? 2 : 1;
          if (H + Ft <= d) {
            let $t, Wt, Yt, Ht;
            switch (Ft) {
              case 1:
                $ < 128 && (ot = $);
                break;
              case 2:
                $t = m[H + 1], ($t & 192) === 128 && (Ht = ($ & 31) << 6 | $t & 63, Ht > 127 && (ot = Ht));
                break;
              case 3:
                $t = m[H + 1], Wt = m[H + 2], ($t & 192) === 128 && (Wt & 192) === 128 && (Ht = ($ & 15) << 12 | ($t & 63) << 6 | Wt & 63, Ht > 2047 && (Ht < 55296 || Ht > 57343) && (ot = Ht));
                break;
              case 4:
                $t = m[H + 1], Wt = m[H + 2], Yt = m[H + 3], ($t & 192) === 128 && (Wt & 192) === 128 && (Yt & 192) === 128 && (Ht = ($ & 15) << 18 | ($t & 63) << 12 | (Wt & 63) << 6 | Yt & 63, Ht > 65535 && Ht < 1114112 && (ot = Ht));
            }
          }
          ot === null ? (ot = 65533, Ft = 1) : ot > 65535 && (ot -= 65536, O.push(ot >>> 10 & 1023 | 55296), ot = 56320 | ot & 1023), O.push(ot), H += Ft;
        }
        return Pt(O);
      }
      const yt = 4096;
      function Pt(m) {
        const p = m.length;
        if (p <= yt)
          return String.fromCharCode.apply(String, m);
        let d = "", O = 0;
        for (; O < p; )
          d += String.fromCharCode.apply(
            String,
            m.slice(O, O += yt)
          );
        return d;
      }
      function he(m, p, d) {
        let O = "";
        d = Math.min(m.length, d);
        for (let H = p; H < d; ++H)
          O += String.fromCharCode(m[H] & 127);
        return O;
      }
      function it(m, p, d) {
        let O = "";
        d = Math.min(m.length, d);
        for (let H = p; H < d; ++H)
          O += String.fromCharCode(m[H]);
        return O;
      }
      function pe(m, p, d) {
        const O = m.length;
        (!p || p < 0) && (p = 0), (!d || d < 0 || d > O) && (d = O);
        let H = "";
        for (let $ = p; $ < d; ++$)
          H += ms[m[$]];
        return H;
      }
      function we(m, p, d) {
        const O = m.slice(p, d);
        let H = "";
        for (let $ = 0; $ < O.length - 1; $ += 2)
          H += String.fromCharCode(O[$] + O[$ + 1] * 256);
        return H;
      }
      L.prototype.slice = function(p, d) {
        const O = this.length;
        p = ~~p, d = d === void 0 ? O : ~~d, p < 0 ? (p += O, p < 0 && (p = 0)) : p > O && (p = O), d < 0 ? (d += O, d < 0 && (d = 0)) : d > O && (d = O), d < p && (d = p);
        const H = this.subarray(p, d);
        return Object.setPrototypeOf(H, L.prototype), H;
      };
      function Gt(m, p, d) {
        if (m % 1 !== 0 || m < 0) throw new RangeError("offset is not uint");
        if (m + p > d) throw new RangeError("Trying to access beyond buffer length");
      }
      L.prototype.readUintLE = L.prototype.readUIntLE = function(p, d, O) {
        p = p >>> 0, d = d >>> 0, O || Gt(p, d, this.length);
        let H = this[p], $ = 1, ot = 0;
        for (; ++ot < d && ($ *= 256); )
          H += this[p + ot] * $;
        return H;
      }, L.prototype.readUintBE = L.prototype.readUIntBE = function(p, d, O) {
        p = p >>> 0, d = d >>> 0, O || Gt(p, d, this.length);
        let H = this[p + --d], $ = 1;
        for (; d > 0 && ($ *= 256); )
          H += this[p + --d] * $;
        return H;
      }, L.prototype.readUint8 = L.prototype.readUInt8 = function(p, d) {
        return p = p >>> 0, d || Gt(p, 1, this.length), this[p];
      }, L.prototype.readUint16LE = L.prototype.readUInt16LE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 2, this.length), this[p] | this[p + 1] << 8;
      }, L.prototype.readUint16BE = L.prototype.readUInt16BE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 2, this.length), this[p] << 8 | this[p + 1];
      }, L.prototype.readUint32LE = L.prototype.readUInt32LE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 4, this.length), (this[p] | this[p + 1] << 8 | this[p + 2] << 16) + this[p + 3] * 16777216;
      }, L.prototype.readUint32BE = L.prototype.readUInt32BE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 4, this.length), this[p] * 16777216 + (this[p + 1] << 16 | this[p + 2] << 8 | this[p + 3]);
      }, L.prototype.readBigUInt64LE = Le(function(p) {
        p = p >>> 0, U(p, "offset");
        const d = this[p], O = this[p + 7];
        (d === void 0 || O === void 0) && J(p, this.length - 8);
        const H = d + this[++p] * 2 ** 8 + this[++p] * 2 ** 16 + this[++p] * 2 ** 24, $ = this[++p] + this[++p] * 2 ** 8 + this[++p] * 2 ** 16 + O * 2 ** 24;
        return BigInt(H) + (BigInt($) << BigInt(32));
      }), L.prototype.readBigUInt64BE = Le(function(p) {
        p = p >>> 0, U(p, "offset");
        const d = this[p], O = this[p + 7];
        (d === void 0 || O === void 0) && J(p, this.length - 8);
        const H = d * 2 ** 24 + this[++p] * 2 ** 16 + this[++p] * 2 ** 8 + this[++p], $ = this[++p] * 2 ** 24 + this[++p] * 2 ** 16 + this[++p] * 2 ** 8 + O;
        return (BigInt(H) << BigInt(32)) + BigInt($);
      }), L.prototype.readIntLE = function(p, d, O) {
        p = p >>> 0, d = d >>> 0, O || Gt(p, d, this.length);
        let H = this[p], $ = 1, ot = 0;
        for (; ++ot < d && ($ *= 256); )
          H += this[p + ot] * $;
        return $ *= 128, H >= $ && (H -= Math.pow(2, 8 * d)), H;
      }, L.prototype.readIntBE = function(p, d, O) {
        p = p >>> 0, d = d >>> 0, O || Gt(p, d, this.length);
        let H = d, $ = 1, ot = this[p + --H];
        for (; H > 0 && ($ *= 256); )
          ot += this[p + --H] * $;
        return $ *= 128, ot >= $ && (ot -= Math.pow(2, 8 * d)), ot;
      }, L.prototype.readInt8 = function(p, d) {
        return p = p >>> 0, d || Gt(p, 1, this.length), this[p] & 128 ? (255 - this[p] + 1) * -1 : this[p];
      }, L.prototype.readInt16LE = function(p, d) {
        p = p >>> 0, d || Gt(p, 2, this.length);
        const O = this[p] | this[p + 1] << 8;
        return O & 32768 ? O | 4294901760 : O;
      }, L.prototype.readInt16BE = function(p, d) {
        p = p >>> 0, d || Gt(p, 2, this.length);
        const O = this[p + 1] | this[p] << 8;
        return O & 32768 ? O | 4294901760 : O;
      }, L.prototype.readInt32LE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 4, this.length), this[p] | this[p + 1] << 8 | this[p + 2] << 16 | this[p + 3] << 24;
      }, L.prototype.readInt32BE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 4, this.length), this[p] << 24 | this[p + 1] << 16 | this[p + 2] << 8 | this[p + 3];
      }, L.prototype.readBigInt64LE = Le(function(p) {
        p = p >>> 0, U(p, "offset");
        const d = this[p], O = this[p + 7];
        (d === void 0 || O === void 0) && J(p, this.length - 8);
        const H = this[p + 4] + this[p + 5] * 2 ** 8 + this[p + 6] * 2 ** 16 + (O << 24);
        return (BigInt(H) << BigInt(32)) + BigInt(d + this[++p] * 2 ** 8 + this[++p] * 2 ** 16 + this[++p] * 2 ** 24);
      }), L.prototype.readBigInt64BE = Le(function(p) {
        p = p >>> 0, U(p, "offset");
        const d = this[p], O = this[p + 7];
        (d === void 0 || O === void 0) && J(p, this.length - 8);
        const H = (d << 24) + // Overflow
        this[++p] * 2 ** 16 + this[++p] * 2 ** 8 + this[++p];
        return (BigInt(H) << BigInt(32)) + BigInt(this[++p] * 2 ** 24 + this[++p] * 2 ** 16 + this[++p] * 2 ** 8 + O);
      }), L.prototype.readFloatLE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 4, this.length), z.read(this, p, !0, 23, 4);
      }, L.prototype.readFloatBE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 4, this.length), z.read(this, p, !1, 23, 4);
      }, L.prototype.readDoubleLE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 8, this.length), z.read(this, p, !0, 52, 8);
      }, L.prototype.readDoubleBE = function(p, d) {
        return p = p >>> 0, d || Gt(p, 8, this.length), z.read(this, p, !1, 52, 8);
      };
      function Qt(m, p, d, O, H, $) {
        if (!L.isBuffer(m)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (p > H || p < $) throw new RangeError('"value" argument is out of bounds');
        if (d + O > m.length) throw new RangeError("Index out of range");
      }
      L.prototype.writeUintLE = L.prototype.writeUIntLE = function(p, d, O, H) {
        if (p = +p, d = d >>> 0, O = O >>> 0, !H) {
          const Ft = Math.pow(2, 8 * O) - 1;
          Qt(this, p, d, O, Ft, 0);
        }
        let $ = 1, ot = 0;
        for (this[d] = p & 255; ++ot < O && ($ *= 256); )
          this[d + ot] = p / $ & 255;
        return d + O;
      }, L.prototype.writeUintBE = L.prototype.writeUIntBE = function(p, d, O, H) {
        if (p = +p, d = d >>> 0, O = O >>> 0, !H) {
          const Ft = Math.pow(2, 8 * O) - 1;
          Qt(this, p, d, O, Ft, 0);
        }
        let $ = O - 1, ot = 1;
        for (this[d + $] = p & 255; --$ >= 0 && (ot *= 256); )
          this[d + $] = p / ot & 255;
        return d + O;
      }, L.prototype.writeUint8 = L.prototype.writeUInt8 = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 1, 255, 0), this[d] = p & 255, d + 1;
      }, L.prototype.writeUint16LE = L.prototype.writeUInt16LE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 2, 65535, 0), this[d] = p & 255, this[d + 1] = p >>> 8, d + 2;
      }, L.prototype.writeUint16BE = L.prototype.writeUInt16BE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 2, 65535, 0), this[d] = p >>> 8, this[d + 1] = p & 255, d + 2;
      }, L.prototype.writeUint32LE = L.prototype.writeUInt32LE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 4, 4294967295, 0), this[d + 3] = p >>> 24, this[d + 2] = p >>> 16, this[d + 1] = p >>> 8, this[d] = p & 255, d + 4;
      }, L.prototype.writeUint32BE = L.prototype.writeUInt32BE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 4, 4294967295, 0), this[d] = p >>> 24, this[d + 1] = p >>> 16, this[d + 2] = p >>> 8, this[d + 3] = p & 255, d + 4;
      };
      function de(m, p, d, O, H) {
        F(p, O, H, m, d, 7);
        let $ = Number(p & BigInt(4294967295));
        m[d++] = $, $ = $ >> 8, m[d++] = $, $ = $ >> 8, m[d++] = $, $ = $ >> 8, m[d++] = $;
        let ot = Number(p >> BigInt(32) & BigInt(4294967295));
        return m[d++] = ot, ot = ot >> 8, m[d++] = ot, ot = ot >> 8, m[d++] = ot, ot = ot >> 8, m[d++] = ot, d;
      }
      function fe(m, p, d, O, H) {
        F(p, O, H, m, d, 7);
        let $ = Number(p & BigInt(4294967295));
        m[d + 7] = $, $ = $ >> 8, m[d + 6] = $, $ = $ >> 8, m[d + 5] = $, $ = $ >> 8, m[d + 4] = $;
        let ot = Number(p >> BigInt(32) & BigInt(4294967295));
        return m[d + 3] = ot, ot = ot >> 8, m[d + 2] = ot, ot = ot >> 8, m[d + 1] = ot, ot = ot >> 8, m[d] = ot, d + 8;
      }
      L.prototype.writeBigUInt64LE = Le(function(p, d = 0) {
        return de(this, p, d, BigInt(0), BigInt("0xffffffffffffffff"));
      }), L.prototype.writeBigUInt64BE = Le(function(p, d = 0) {
        return fe(this, p, d, BigInt(0), BigInt("0xffffffffffffffff"));
      }), L.prototype.writeIntLE = function(p, d, O, H) {
        if (p = +p, d = d >>> 0, !H) {
          const $t = Math.pow(2, 8 * O - 1);
          Qt(this, p, d, O, $t - 1, -$t);
        }
        let $ = 0, ot = 1, Ft = 0;
        for (this[d] = p & 255; ++$ < O && (ot *= 256); )
          p < 0 && Ft === 0 && this[d + $ - 1] !== 0 && (Ft = 1), this[d + $] = (p / ot >> 0) - Ft & 255;
        return d + O;
      }, L.prototype.writeIntBE = function(p, d, O, H) {
        if (p = +p, d = d >>> 0, !H) {
          const $t = Math.pow(2, 8 * O - 1);
          Qt(this, p, d, O, $t - 1, -$t);
        }
        let $ = O - 1, ot = 1, Ft = 0;
        for (this[d + $] = p & 255; --$ >= 0 && (ot *= 256); )
          p < 0 && Ft === 0 && this[d + $ + 1] !== 0 && (Ft = 1), this[d + $] = (p / ot >> 0) - Ft & 255;
        return d + O;
      }, L.prototype.writeInt8 = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 1, 127, -128), p < 0 && (p = 255 + p + 1), this[d] = p & 255, d + 1;
      }, L.prototype.writeInt16LE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 2, 32767, -32768), this[d] = p & 255, this[d + 1] = p >>> 8, d + 2;
      }, L.prototype.writeInt16BE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 2, 32767, -32768), this[d] = p >>> 8, this[d + 1] = p & 255, d + 2;
      }, L.prototype.writeInt32LE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 4, 2147483647, -2147483648), this[d] = p & 255, this[d + 1] = p >>> 8, this[d + 2] = p >>> 16, this[d + 3] = p >>> 24, d + 4;
      }, L.prototype.writeInt32BE = function(p, d, O) {
        return p = +p, d = d >>> 0, O || Qt(this, p, d, 4, 2147483647, -2147483648), p < 0 && (p = 4294967295 + p + 1), this[d] = p >>> 24, this[d + 1] = p >>> 16, this[d + 2] = p >>> 8, this[d + 3] = p & 255, d + 4;
      }, L.prototype.writeBigInt64LE = Le(function(p, d = 0) {
        return de(this, p, d, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      }), L.prototype.writeBigInt64BE = Le(function(p, d = 0) {
        return fe(this, p, d, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function Ee(m, p, d, O, H, $) {
        if (d + O > m.length) throw new RangeError("Index out of range");
        if (d < 0) throw new RangeError("Index out of range");
      }
      function Se(m, p, d, O, H) {
        return p = +p, d = d >>> 0, H || Ee(m, p, d, 4), z.write(m, p, d, O, 23, 4), d + 4;
      }
      L.prototype.writeFloatLE = function(p, d, O) {
        return Se(this, p, d, !0, O);
      }, L.prototype.writeFloatBE = function(p, d, O) {
        return Se(this, p, d, !1, O);
      };
      function ae(m, p, d, O, H) {
        return p = +p, d = d >>> 0, H || Ee(m, p, d, 8), z.write(m, p, d, O, 52, 8), d + 8;
      }
      L.prototype.writeDoubleLE = function(p, d, O) {
        return ae(this, p, d, !0, O);
      }, L.prototype.writeDoubleBE = function(p, d, O) {
        return ae(this, p, d, !1, O);
      }, L.prototype.copy = function(p, d, O, H) {
        if (!L.isBuffer(p)) throw new TypeError("argument should be a Buffer");
        if (O || (O = 0), !H && H !== 0 && (H = this.length), d >= p.length && (d = p.length), d || (d = 0), H > 0 && H < O && (H = O), H === O || p.length === 0 || this.length === 0) return 0;
        if (d < 0)
          throw new RangeError("targetStart out of bounds");
        if (O < 0 || O >= this.length) throw new RangeError("Index out of range");
        if (H < 0) throw new RangeError("sourceEnd out of bounds");
        H > this.length && (H = this.length), p.length - d < H - O && (H = p.length - d + O);
        const $ = H - O;
        return this === p && typeof N.prototype.copyWithin == "function" ? this.copyWithin(d, O, H) : N.prototype.set.call(
          p,
          this.subarray(O, H),
          d
        ), $;
      }, L.prototype.fill = function(p, d, O, H) {
        if (typeof p == "string") {
          if (typeof d == "string" ? (H = d, d = 0, O = this.length) : typeof O == "string" && (H = O, O = this.length), H !== void 0 && typeof H != "string")
            throw new TypeError("encoding must be a string");
          if (typeof H == "string" && !L.isEncoding(H))
            throw new TypeError("Unknown encoding: " + H);
          if (p.length === 1) {
            const ot = p.charCodeAt(0);
            (H === "utf8" && ot < 128 || H === "latin1") && (p = ot);
          }
        } else typeof p == "number" ? p = p & 255 : typeof p == "boolean" && (p = Number(p));
        if (d < 0 || this.length < d || this.length < O)
          throw new RangeError("Out of range index");
        if (O <= d)
          return this;
        d = d >>> 0, O = O === void 0 ? this.length : O >>> 0, p || (p = 0);
        let $;
        if (typeof p == "number")
          for ($ = d; $ < O; ++$)
            this[$] = p;
        else {
          const ot = L.isBuffer(p) ? p : L.from(p, H), Ft = ot.length;
          if (Ft === 0)
            throw new TypeError('The value "' + p + '" is invalid for argument "value"');
          for ($ = 0; $ < O - d; ++$)
            this[$ + d] = ot[$ % Ft];
        }
        return this;
      };
      const Ne = {};
      function b(m, p, d) {
        Ne[m] = class extends d {
          constructor() {
            super(), Object.defineProperty(this, "message", {
              value: p.apply(this, arguments),
              writable: !0,
              configurable: !0
            }), this.name = `${this.name} [${m}]`, this.stack, delete this.name;
          }
          get code() {
            return m;
          }
          set code(H) {
            Object.defineProperty(this, "code", {
              configurable: !0,
              enumerable: !0,
              value: H,
              writable: !0
            });
          }
          toString() {
            return `${this.name} [${m}]: ${this.message}`;
          }
        };
      }
      b(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(m) {
          return m ? `${m} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
        },
        RangeError
      ), b(
        "ERR_INVALID_ARG_TYPE",
        function(m, p) {
          return `The "${m}" argument must be of type number. Received type ${typeof p}`;
        },
        TypeError
      ), b(
        "ERR_OUT_OF_RANGE",
        function(m, p, d) {
          let O = `The value of "${m}" is out of range.`, H = d;
          return Number.isInteger(d) && Math.abs(d) > 2 ** 32 ? H = h(String(d)) : typeof d == "bigint" && (H = String(d), (d > BigInt(2) ** BigInt(32) || d < -(BigInt(2) ** BigInt(32))) && (H = h(H)), H += "n"), O += ` It must be ${p}. Received ${H}`, O;
        },
        RangeError
      );
      function h(m) {
        let p = "", d = m.length;
        const O = m[0] === "-" ? 1 : 0;
        for (; d >= O + 4; d -= 3)
          p = `_${m.slice(d - 3, d)}${p}`;
        return `${m.slice(0, d)}${p}`;
      }
      function w(m, p, d) {
        U(p, "offset"), (m[p] === void 0 || m[p + d] === void 0) && J(p, m.length - (d + 1));
      }
      function F(m, p, d, O, H, $) {
        if (m > d || m < p) {
          const ot = typeof p == "bigint" ? "n" : "";
          let Ft;
          throw p === 0 || p === BigInt(0) ? Ft = `>= 0${ot} and < 2${ot} ** ${($ + 1) * 8}${ot}` : Ft = `>= -(2${ot} ** ${($ + 1) * 8 - 1}${ot}) and < 2 ** ${($ + 1) * 8 - 1}${ot}`, new Ne.ERR_OUT_OF_RANGE("value", Ft, m);
        }
        w(O, H, $);
      }
      function U(m, p) {
        if (typeof m != "number")
          throw new Ne.ERR_INVALID_ARG_TYPE(p, "number", m);
      }
      function J(m, p, d) {
        throw Math.floor(m) !== m ? (U(m, d), new Ne.ERR_OUT_OF_RANGE("offset", "an integer", m)) : p < 0 ? new Ne.ERR_BUFFER_OUT_OF_BOUNDS() : new Ne.ERR_OUT_OF_RANGE(
          "offset",
          `>= 0 and <= ${p}`,
          m
        );
      }
      const st = /[^+/0-9A-Za-z-_]/g;
      function kt(m) {
        if (m = m.split("=")[0], m = m.trim().replace(st, ""), m.length < 2) return "";
        for (; m.length % 4 !== 0; )
          m = m + "=";
        return m;
      }
      function Vt(m, p) {
        p = p || 1 / 0;
        let d;
        const O = m.length;
        let H = null;
        const $ = [];
        for (let ot = 0; ot < O; ++ot) {
          if (d = m.charCodeAt(ot), d > 55295 && d < 57344) {
            if (!H) {
              if (d > 56319) {
                (p -= 3) > -1 && $.push(239, 191, 189);
                continue;
              } else if (ot + 1 === O) {
                (p -= 3) > -1 && $.push(239, 191, 189);
                continue;
              }
              H = d;
              continue;
            }
            if (d < 56320) {
              (p -= 3) > -1 && $.push(239, 191, 189), H = d;
              continue;
            }
            d = (H - 55296 << 10 | d - 56320) + 65536;
          } else H && (p -= 3) > -1 && $.push(239, 191, 189);
          if (H = null, d < 128) {
            if ((p -= 1) < 0) break;
            $.push(d);
          } else if (d < 2048) {
            if ((p -= 2) < 0) break;
            $.push(
              d >> 6 | 192,
              d & 63 | 128
            );
          } else if (d < 65536) {
            if ((p -= 3) < 0) break;
            $.push(
              d >> 12 | 224,
              d >> 6 & 63 | 128,
              d & 63 | 128
            );
          } else if (d < 1114112) {
            if ((p -= 4) < 0) break;
            $.push(
              d >> 18 | 240,
              d >> 12 & 63 | 128,
              d >> 6 & 63 | 128,
              d & 63 | 128
            );
          } else
            throw new Error("Invalid code point");
        }
        return $;
      }
      function qt(m) {
        const p = [];
        for (let d = 0; d < m.length; ++d)
          p.push(m.charCodeAt(d) & 255);
        return p;
      }
      function Kt(m, p) {
        let d, O, H;
        const $ = [];
        for (let ot = 0; ot < m.length && !((p -= 2) < 0); ++ot)
          d = m.charCodeAt(ot), O = d >> 8, H = d % 256, $.push(H), $.push(O);
        return $;
      }
      function Dt(m) {
        return P.toByteArray(kt(m));
      }
      function ei(m, p, d, O) {
        let H;
        for (H = 0; H < O && !(H + d >= p.length || H >= m.length); ++H)
          p[H + d] = m[H];
        return H;
      }
      function Pe(m, p) {
        return m instanceof p || m != null && m.constructor != null && m.constructor.name != null && m.constructor.name === p.name;
      }
      function pi(m) {
        return m !== m;
      }
      const ms = function() {
        const m = "0123456789abcdef", p = new Array(256);
        for (let d = 0; d < 16; ++d) {
          const O = d * 16;
          for (let H = 0; H < 16; ++H)
            p[O + H] = m[d] + m[H];
        }
        return p;
      }();
      function Le(m) {
        return typeof BigInt > "u" ? As : m;
      }
      function As() {
        throw new Error("BigInt not supported");
      }
    })(t);
    const A = t.Buffer;
    n.Blob = t.Blob, n.BlobOptions = t.BlobOptions, n.Buffer = t.Buffer, n.File = t.File, n.FileOptions = t.FileOptions, n.INSPECT_MAX_BYTES = t.INSPECT_MAX_BYTES, n.SlowBuffer = t.SlowBuffer, n.TranscodeEncoding = t.TranscodeEncoding, n.atob = t.atob, n.btoa = t.btoa, n.constants = t.constants, n.default = A, n.isAscii = t.isAscii, n.isUtf8 = t.isUtf8, n.kMaxLength = t.kMaxLength, n.kStringMaxLength = t.kStringMaxLength, n.resolveObjectURL = t.resolveObjectURL, n.transcode = t.transcode;
  }(Ha)), Ha;
}
var Va = {}, qa = {}, Qa, Of;
function sg() {
  return Of || (Of = 1, Qa = function() {
    if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
      return !1;
    if (typeof Symbol.iterator == "symbol")
      return !0;
    var t = {}, e = Symbol("test"), r = Object(e);
    if (typeof e == "string" || Object.prototype.toString.call(e) !== "[object Symbol]" || Object.prototype.toString.call(r) !== "[object Symbol]")
      return !1;
    var i = 42;
    t[e] = i;
    for (var o in t)
      return !1;
    if (typeof Object.keys == "function" && Object.keys(t).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(t).length !== 0)
      return !1;
    var a = Object.getOwnPropertySymbols(t);
    if (a.length !== 1 || a[0] !== e || !Object.prototype.propertyIsEnumerable.call(t, e))
      return !1;
    if (typeof Object.getOwnPropertyDescriptor == "function") {
      var u = (
        /** @type {PropertyDescriptor} */
        Object.getOwnPropertyDescriptor(t, e)
      );
      if (u.value !== i || u.enumerable !== !0)
        return !1;
    }
    return !0;
  }), Qa;
}
var Ka, Tf;
function i_() {
  if (Tf) return Ka;
  Tf = 1;
  var n = sg();
  return Ka = function() {
    return n() && !!Symbol.toStringTag;
  }, Ka;
}
var Wa, Cf;
function og() {
  return Cf || (Cf = 1, Wa = Object), Wa;
}
var Ja, Nf;
function Fm() {
  return Nf || (Nf = 1, Ja = Error), Ja;
}
var $a, Lf;
function Im() {
  return Lf || (Lf = 1, $a = EvalError), $a;
}
var Ya, Df;
function Om() {
  return Df || (Df = 1, Ya = RangeError), Ya;
}
var Za, Uf;
function Tm() {
  return Uf || (Uf = 1, Za = ReferenceError), Za;
}
var Xa, Mf;
function ag() {
  return Mf || (Mf = 1, Xa = SyntaxError), Xa;
}
var tc, jf;
function ta() {
  return jf || (jf = 1, tc = TypeError), tc;
}
var ec, Gf;
function Cm() {
  return Gf || (Gf = 1, ec = URIError), ec;
}
var rc, Hf;
function Nm() {
  return Hf || (Hf = 1, rc = Math.abs), rc;
}
var nc, Vf;
function Lm() {
  return Vf || (Vf = 1, nc = Math.floor), nc;
}
var ic, qf;
function Dm() {
  return qf || (qf = 1, ic = Math.max), ic;
}
var sc, Qf;
function Um() {
  return Qf || (Qf = 1, sc = Math.min), sc;
}
var oc, Kf;
function Mm() {
  return Kf || (Kf = 1, oc = Math.pow), oc;
}
var ac, Wf;
function jm() {
  return Wf || (Wf = 1, ac = Math.round), ac;
}
var cc, Jf;
function Gm() {
  return Jf || (Jf = 1, cc = Number.isNaN || function(t) {
    return t !== t;
  }), cc;
}
var uc, $f;
function Hm() {
  if ($f) return uc;
  $f = 1;
  var n = /* @__PURE__ */ Gm();
  return uc = function(e) {
    return n(e) || e === 0 ? e : e < 0 ? -1 : 1;
  }, uc;
}
var _c, Yf;
function Vm() {
  return Yf || (Yf = 1, _c = Object.getOwnPropertyDescriptor), _c;
}
var fc, Zf;
function Xs() {
  if (Zf) return fc;
  Zf = 1;
  var n = /* @__PURE__ */ Vm();
  if (n)
    try {
      n([], "length");
    } catch {
      n = null;
    }
  return fc = n, fc;
}
var lc, Xf;
function ea() {
  if (Xf) return lc;
  Xf = 1;
  var n = Object.defineProperty || !1;
  if (n)
    try {
      n({}, "a", { value: 1 });
    } catch {
      n = !1;
    }
  return lc = n, lc;
}
var hc, tl;
function qm() {
  if (tl) return hc;
  tl = 1;
  var n = typeof Symbol < "u" && Symbol, t = sg();
  return hc = function() {
    return typeof n != "function" || typeof Symbol != "function" || typeof n("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? !1 : t();
  }, hc;
}
var pc, el;
function cg() {
  return el || (el = 1, pc = typeof Reflect < "u" && Reflect.getPrototypeOf || null), pc;
}
var wc, rl;
function ug() {
  if (rl) return wc;
  rl = 1;
  var n = /* @__PURE__ */ og();
  return wc = n.getPrototypeOf || null, wc;
}
var dc, nl;
function Qm() {
  if (nl) return dc;
  nl = 1;
  var n = "Function.prototype.bind called on incompatible ", t = Object.prototype.toString, e = Math.max, r = "[object Function]", i = function(_, l) {
    for (var f = [], g = 0; g < _.length; g += 1)
      f[g] = _[g];
    for (var y = 0; y < l.length; y += 1)
      f[y + _.length] = l[y];
    return f;
  }, o = function(_, l) {
    for (var f = [], g = l, y = 0; g < _.length; g += 1, y += 1)
      f[y] = _[g];
    return f;
  }, a = function(u, _) {
    for (var l = "", f = 0; f < u.length; f += 1)
      l += u[f], f + 1 < u.length && (l += _);
    return l;
  };
  return dc = function(_) {
    var l = this;
    if (typeof l != "function" || t.apply(l) !== r)
      throw new TypeError(n + l);
    for (var f = o(arguments, 1), g, y = function() {
      if (this instanceof g) {
        var A = l.apply(
          this,
          i(f, arguments)
        );
        return Object(A) === A ? A : this;
      }
      return l.apply(
        _,
        i(f, arguments)
      );
    }, B = e(0, l.length - f.length), I = [], S = 0; S < B; S++)
      I[S] = "$" + S;
    if (g = Function("binder", "return function (" + a(I, ",") + "){ return binder.apply(this,arguments); }")(y), l.prototype) {
      var T = function() {
      };
      T.prototype = l.prototype, g.prototype = new T(), T.prototype = null;
    }
    return g;
  }, dc;
}
var gc, il;
function to() {
  if (il) return gc;
  il = 1;
  var n = Qm();
  return gc = Function.prototype.bind || n, gc;
}
var yc, sl;
function s_() {
  return sl || (sl = 1, yc = Function.prototype.call), yc;
}
var bc, ol;
function o_() {
  return ol || (ol = 1, bc = Function.prototype.apply), bc;
}
var mc, al;
function Km() {
  return al || (al = 1, mc = typeof Reflect < "u" && Reflect && Reflect.apply), mc;
}
var Ac, cl;
function _g() {
  if (cl) return Ac;
  cl = 1;
  var n = to(), t = o_(), e = s_(), r = Km();
  return Ac = r || n.call(e, t), Ac;
}
var Ec, ul;
function a_() {
  if (ul) return Ec;
  ul = 1;
  var n = to(), t = /* @__PURE__ */ ta(), e = s_(), r = _g();
  return Ec = function(o) {
    if (o.length < 1 || typeof o[0] != "function")
      throw new t("a function is required");
    return r(n, e, o);
  }, Ec;
}
var vc, _l;
function Wm() {
  if (_l) return vc;
  _l = 1;
  var n = a_(), t = /* @__PURE__ */ Xs(), e;
  try {
    e = /** @type {{ __proto__?: typeof Array.prototype }} */
    [].__proto__ === Array.prototype;
  } catch (a) {
    if (!a || typeof a != "object" || !("code" in a) || a.code !== "ERR_PROTO_ACCESS")
      throw a;
  }
  var r = !!e && t && t(
    Object.prototype,
    /** @type {keyof typeof Object.prototype} */
    "__proto__"
  ), i = Object, o = i.getPrototypeOf;
  return vc = r && typeof r.get == "function" ? n([r.get]) : typeof o == "function" ? (
    /** @type {import('./get')} */
    function(u) {
      return o(u == null ? u : i(u));
    }
  ) : !1, vc;
}
var xc, fl;
function fg() {
  if (fl) return xc;
  fl = 1;
  var n = cg(), t = ug(), e = /* @__PURE__ */ Wm();
  return xc = n ? function(i) {
    return n(i);
  } : t ? function(i) {
    if (!i || typeof i != "object" && typeof i != "function")
      throw new TypeError("getProto: not an object");
    return t(i);
  } : e ? function(i) {
    return e(i);
  } : null, xc;
}
var Rc, ll;
function Jm() {
  if (ll) return Rc;
  ll = 1;
  var n = Function.prototype.call, t = Object.prototype.hasOwnProperty, e = to();
  return Rc = e.call(n, t), Rc;
}
var zc, hl;
function lg() {
  if (hl) return zc;
  hl = 1;
  var n, t = /* @__PURE__ */ og(), e = /* @__PURE__ */ Fm(), r = /* @__PURE__ */ Im(), i = /* @__PURE__ */ Om(), o = /* @__PURE__ */ Tm(), a = /* @__PURE__ */ ag(), u = /* @__PURE__ */ ta(), _ = /* @__PURE__ */ Cm(), l = /* @__PURE__ */ Nm(), f = /* @__PURE__ */ Lm(), g = /* @__PURE__ */ Dm(), y = /* @__PURE__ */ Um(), B = /* @__PURE__ */ Mm(), I = /* @__PURE__ */ jm(), S = /* @__PURE__ */ Hm(), T = Function, A = function(ct) {
    try {
      return T('"use strict"; return (' + ct + ").constructor;")();
    } catch {
    }
  }, R = /* @__PURE__ */ Xs(), P = /* @__PURE__ */ ea(), z = function() {
    throw new u();
  }, k = R ? function() {
    try {
      return arguments.callee, z;
    } catch {
      try {
        return R(arguments, "callee").get;
      } catch {
        return z;
      }
    }
  }() : z, C = qm()(), N = fg(), D = ug(), Y = cg(), Z = o_(), ft = s_(), L = {}, At = typeof Uint8Array > "u" || !N ? n : N(Uint8Array), Rt = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError > "u" ? n : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer > "u" ? n : ArrayBuffer,
    "%ArrayIteratorPrototype%": C && N ? N([][Symbol.iterator]()) : n,
    "%AsyncFromSyncIteratorPrototype%": n,
    "%AsyncFunction%": L,
    "%AsyncGenerator%": L,
    "%AsyncGeneratorFunction%": L,
    "%AsyncIteratorPrototype%": L,
    "%Atomics%": typeof Atomics > "u" ? n : Atomics,
    "%BigInt%": typeof BigInt > "u" ? n : BigInt,
    "%BigInt64Array%": typeof BigInt64Array > "u" ? n : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array > "u" ? n : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView > "u" ? n : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": e,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": r,
    "%Float16Array%": typeof Float16Array > "u" ? n : Float16Array,
    "%Float32Array%": typeof Float32Array > "u" ? n : Float32Array,
    "%Float64Array%": typeof Float64Array > "u" ? n : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? n : FinalizationRegistry,
    "%Function%": T,
    "%GeneratorFunction%": L,
    "%Int8Array%": typeof Int8Array > "u" ? n : Int8Array,
    "%Int16Array%": typeof Int16Array > "u" ? n : Int16Array,
    "%Int32Array%": typeof Int32Array > "u" ? n : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": C && N ? N(N([][Symbol.iterator]())) : n,
    "%JSON%": typeof JSON == "object" ? JSON : n,
    "%Map%": typeof Map > "u" ? n : Map,
    "%MapIteratorPrototype%": typeof Map > "u" || !C || !N ? n : N((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": t,
    "%Object.getOwnPropertyDescriptor%": R,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise > "u" ? n : Promise,
    "%Proxy%": typeof Proxy > "u" ? n : Proxy,
    "%RangeError%": i,
    "%ReferenceError%": o,
    "%Reflect%": typeof Reflect > "u" ? n : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set > "u" ? n : Set,
    "%SetIteratorPrototype%": typeof Set > "u" || !C || !N ? n : N((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? n : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": C && N ? N(""[Symbol.iterator]()) : n,
    "%Symbol%": C ? Symbol : n,
    "%SyntaxError%": a,
    "%ThrowTypeError%": k,
    "%TypedArray%": At,
    "%TypeError%": u,
    "%Uint8Array%": typeof Uint8Array > "u" ? n : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? n : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array > "u" ? n : Uint16Array,
    "%Uint32Array%": typeof Uint32Array > "u" ? n : Uint32Array,
    "%URIError%": _,
    "%WeakMap%": typeof WeakMap > "u" ? n : WeakMap,
    "%WeakRef%": typeof WeakRef > "u" ? n : WeakRef,
    "%WeakSet%": typeof WeakSet > "u" ? n : WeakSet,
    "%Function.prototype.call%": ft,
    "%Function.prototype.apply%": Z,
    "%Object.defineProperty%": P,
    "%Object.getPrototypeOf%": D,
    "%Math.abs%": l,
    "%Math.floor%": f,
    "%Math.max%": g,
    "%Math.min%": y,
    "%Math.pow%": B,
    "%Math.round%": I,
    "%Math.sign%": S,
    "%Reflect.getPrototypeOf%": Y
  };
  if (N)
    try {
      null.error;
    } catch (ct) {
      var at = N(N(ct));
      Rt["%Error.prototype%"] = at;
    }
  var wt = function ct(ut) {
    var v;
    if (ut === "%AsyncFunction%")
      v = A("async function () {}");
    else if (ut === "%GeneratorFunction%")
      v = A("function* () {}");
    else if (ut === "%AsyncGeneratorFunction%")
      v = A("async function* () {}");
    else if (ut === "%AsyncGenerator%") {
      var x = ct("%AsyncGeneratorFunction%");
      x && (v = x.prototype);
    } else if (ut === "%AsyncIteratorPrototype%") {
      var et = ct("%AsyncGenerator%");
      et && N && (v = N(et.prototype));
    }
    return Rt[ut] = v, v;
  }, Et = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  }, xt = to(), vt = /* @__PURE__ */ Jm(), Bt = xt.call(ft, Array.prototype.concat), jt = xt.call(Z, Array.prototype.splice), W = xt.call(ft, String.prototype.replace), X = xt.call(ft, String.prototype.slice), nt = xt.call(ft, RegExp.prototype.exec), dt = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, G = /\\(\\)?/g, M = function(ut) {
    var v = X(ut, 0, 1), x = X(ut, -1);
    if (v === "%" && x !== "%")
      throw new a("invalid intrinsic syntax, expected closing `%`");
    if (x === "%" && v !== "%")
      throw new a("invalid intrinsic syntax, expected opening `%`");
    var et = [];
    return W(ut, dt, function(lt, St, yt, Pt) {
      et[et.length] = yt ? W(Pt, G, "$1") : St || lt;
    }), et;
  }, tt = function(ut, v) {
    var x = ut, et;
    if (vt(Et, x) && (et = Et[x], x = "%" + et[0] + "%"), vt(Rt, x)) {
      var lt = Rt[x];
      if (lt === L && (lt = wt(x)), typeof lt > "u" && !v)
        throw new u("intrinsic " + ut + " exists, but is not available. Please file an issue!");
      return {
        alias: et,
        name: x,
        value: lt
      };
    }
    throw new a("intrinsic " + ut + " does not exist!");
  };
  return zc = function(ut, v) {
    if (typeof ut != "string" || ut.length === 0)
      throw new u("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof v != "boolean")
      throw new u('"allowMissing" argument must be a boolean');
    if (nt(/^%?[^%]*%?$/, ut) === null)
      throw new a("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var x = M(ut), et = x.length > 0 ? x[0] : "", lt = tt("%" + et + "%", v), St = lt.name, yt = lt.value, Pt = !1, he = lt.alias;
    he && (et = he[0], jt(x, Bt([0, 1], he)));
    for (var it = 1, pe = !0; it < x.length; it += 1) {
      var we = x[it], Gt = X(we, 0, 1), Qt = X(we, -1);
      if ((Gt === '"' || Gt === "'" || Gt === "`" || Qt === '"' || Qt === "'" || Qt === "`") && Gt !== Qt)
        throw new a("property names with quotes must have matching quotes");
      if ((we === "constructor" || !pe) && (Pt = !0), et += "." + we, St = "%" + et + "%", vt(Rt, St))
        yt = Rt[St];
      else if (yt != null) {
        if (!(we in yt)) {
          if (!v)
            throw new u("base intrinsic for " + ut + " exists, but the property is not available.");
          return;
        }
        if (R && it + 1 >= x.length) {
          var de = R(yt, we);
          pe = !!de, pe && "get" in de && !("originalValue" in de.get) ? yt = de.get : yt = yt[we];
        } else
          pe = vt(yt, we), yt = yt[we];
        pe && !Pt && (Rt[St] = yt);
      }
    }
    return yt;
  }, zc;
}
var Bc, pl;
function hg() {
  if (pl) return Bc;
  pl = 1;
  var n = /* @__PURE__ */ lg(), t = a_(), e = t([n("%String.prototype.indexOf%")]);
  return Bc = function(i, o) {
    var a = (
      /** @type {(this: unknown, ...args: unknown[]) => unknown} */
      n(i, !!o)
    );
    return typeof a == "function" && e(i, ".prototype.") > -1 ? t(
      /** @type {const} */
      [a]
    ) : a;
  }, Bc;
}
var Sc, wl;
function $m() {
  if (wl) return Sc;
  wl = 1;
  var n = i_()(), t = /* @__PURE__ */ hg(), e = t("Object.prototype.toString"), r = function(u) {
    return n && u && typeof u == "object" && Symbol.toStringTag in u ? !1 : e(u) === "[object Arguments]";
  }, i = function(u) {
    return r(u) ? !0 : u !== null && typeof u == "object" && "length" in u && typeof u.length == "number" && u.length >= 0 && e(u) !== "[object Array]" && "callee" in u && e(u.callee) === "[object Function]";
  }, o = function() {
    return r(arguments);
  }();
  return r.isLegacyArguments = i, Sc = o ? r : i, Sc;
}
var Pc, dl;
function Ym() {
  if (dl) return Pc;
  dl = 1;
  var n = Object.prototype.toString, t = Function.prototype.toString, e = /^\s*(?:function)?\*/, r = i_()(), i = Object.getPrototypeOf, o = function() {
    if (!r)
      return !1;
    try {
      return Function("return function*() {}")();
    } catch {
    }
  }, a;
  return Pc = function(_) {
    if (typeof _ != "function")
      return !1;
    if (e.test(t.call(_)))
      return !0;
    if (!r) {
      var l = n.call(_);
      return l === "[object GeneratorFunction]";
    }
    if (!i)
      return !1;
    if (typeof a > "u") {
      var f = o();
      a = f ? i(f) : !1;
    }
    return i(_) === a;
  }, Pc;
}
var kc, gl;
function Zm() {
  if (gl) return kc;
  gl = 1;
  var n = Function.prototype.toString, t = typeof Reflect == "object" && Reflect !== null && Reflect.apply, e, r;
  if (typeof t == "function" && typeof Object.defineProperty == "function")
    try {
      e = Object.defineProperty({}, "length", {
        get: function() {
          throw r;
        }
      }), r = {}, t(function() {
        throw 42;
      }, null, e);
    } catch (R) {
      R !== r && (t = null);
    }
  else
    t = null;
  var i = /^\s*class\b/, o = function(P) {
    try {
      var z = n.call(P);
      return i.test(z);
    } catch {
      return !1;
    }
  }, a = function(P) {
    try {
      return o(P) ? !1 : (n.call(P), !0);
    } catch {
      return !1;
    }
  }, u = Object.prototype.toString, _ = "[object Object]", l = "[object Function]", f = "[object GeneratorFunction]", g = "[object HTMLAllCollection]", y = "[object HTML document.all class]", B = "[object HTMLCollection]", I = typeof Symbol == "function" && !!Symbol.toStringTag, S = !(0 in [,]), T = function() {
    return !1;
  };
  if (typeof document == "object") {
    var A = document.all;
    u.call(A) === u.call(document.all) && (T = function(P) {
      if ((S || !P) && (typeof P > "u" || typeof P == "object"))
        try {
          var z = u.call(P);
          return (z === g || z === y || z === B || z === _) && P("") == null;
        } catch {
        }
      return !1;
    });
  }
  return kc = t ? function(P) {
    if (T(P))
      return !0;
    if (!P || typeof P != "function" && typeof P != "object")
      return !1;
    try {
      t(P, null, e);
    } catch (z) {
      if (z !== r)
        return !1;
    }
    return !o(P) && a(P);
  } : function(P) {
    if (T(P))
      return !0;
    if (!P || typeof P != "function" && typeof P != "object")
      return !1;
    if (I)
      return a(P);
    if (o(P))
      return !1;
    var z = u.call(P);
    return z !== l && z !== f && !/^\[object HTML/.test(z) ? !1 : a(P);
  }, kc;
}
var Fc, yl;
function Xm() {
  if (yl) return Fc;
  yl = 1;
  var n = Zm(), t = Object.prototype.toString, e = Object.prototype.hasOwnProperty, r = function(_, l, f) {
    for (var g = 0, y = _.length; g < y; g++)
      e.call(_, g) && (f == null ? l(_[g], g, _) : l.call(f, _[g], g, _));
  }, i = function(_, l, f) {
    for (var g = 0, y = _.length; g < y; g++)
      f == null ? l(_.charAt(g), g, _) : l.call(f, _.charAt(g), g, _);
  }, o = function(_, l, f) {
    for (var g in _)
      e.call(_, g) && (f == null ? l(_[g], g, _) : l.call(f, _[g], g, _));
  };
  function a(u) {
    return t.call(u) === "[object Array]";
  }
  return Fc = function(_, l, f) {
    if (!n(l))
      throw new TypeError("iterator must be a function");
    var g;
    arguments.length >= 3 && (g = f), a(_) ? r(_, l, g) : typeof _ == "string" ? i(_, l, g) : o(_, l, g);
  }, Fc;
}
var Ic, bl;
function t2() {
  return bl || (bl = 1, Ic = [
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
  ]), Ic;
}
var Oc, ml;
function e2() {
  if (ml) return Oc;
  ml = 1;
  var n = /* @__PURE__ */ t2(), t = typeof globalThis > "u" ? li : globalThis;
  return Oc = function() {
    for (var r = [], i = 0; i < n.length; i++)
      typeof t[n[i]] == "function" && (r[r.length] = n[i]);
    return r;
  }, Oc;
}
var Tc = { exports: {} }, Cc, Al;
function r2() {
  if (Al) return Cc;
  Al = 1;
  var n = /* @__PURE__ */ ea(), t = /* @__PURE__ */ ag(), e = /* @__PURE__ */ ta(), r = /* @__PURE__ */ Xs();
  return Cc = function(o, a, u) {
    if (!o || typeof o != "object" && typeof o != "function")
      throw new e("`obj` must be an object or a function`");
    if (typeof a != "string" && typeof a != "symbol")
      throw new e("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] != "boolean" && arguments[3] !== null)
      throw new e("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] != "boolean" && arguments[4] !== null)
      throw new e("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] != "boolean" && arguments[5] !== null)
      throw new e("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] != "boolean")
      throw new e("`loose`, if provided, must be a boolean");
    var _ = arguments.length > 3 ? arguments[3] : null, l = arguments.length > 4 ? arguments[4] : null, f = arguments.length > 5 ? arguments[5] : null, g = arguments.length > 6 ? arguments[6] : !1, y = !!r && r(o, a);
    if (n)
      n(o, a, {
        configurable: f === null && y ? y.configurable : !f,
        enumerable: _ === null && y ? y.enumerable : !_,
        value: u,
        writable: l === null && y ? y.writable : !l
      });
    else if (g || !_ && !l && !f)
      o[a] = u;
    else
      throw new t("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  }, Cc;
}
var Nc, El;
function n2() {
  if (El) return Nc;
  El = 1;
  var n = /* @__PURE__ */ ea(), t = function() {
    return !!n;
  };
  return t.hasArrayLengthDefineBug = function() {
    if (!n)
      return null;
    try {
      return n([], "length", { value: 1 }).length !== 1;
    } catch {
      return !0;
    }
  }, Nc = t, Nc;
}
var Lc, vl;
function i2() {
  if (vl) return Lc;
  vl = 1;
  var n = /* @__PURE__ */ lg(), t = /* @__PURE__ */ r2(), e = /* @__PURE__ */ n2()(), r = /* @__PURE__ */ Xs(), i = /* @__PURE__ */ ta(), o = n("%Math.floor%");
  return Lc = function(u, _) {
    if (typeof u != "function")
      throw new i("`fn` is not a function");
    if (typeof _ != "number" || _ < 0 || _ > 4294967295 || o(_) !== _)
      throw new i("`length` must be a positive 32-bit integer");
    var l = arguments.length > 2 && !!arguments[2], f = !0, g = !0;
    if ("length" in u && r) {
      var y = r(u, "length");
      y && !y.configurable && (f = !1), y && !y.writable && (g = !1);
    }
    return (f || g || !l) && (e ? t(
      /** @type {Parameters<define>[0]} */
      u,
      "length",
      _,
      !0,
      !0
    ) : t(
      /** @type {Parameters<define>[0]} */
      u,
      "length",
      _
    )), u;
  }, Lc;
}
var Dc, xl;
function s2() {
  if (xl) return Dc;
  xl = 1;
  var n = to(), t = o_(), e = _g();
  return Dc = function() {
    return e(n, t, arguments);
  }, Dc;
}
var Rl;
function o2() {
  return Rl || (Rl = 1, function(n) {
    var t = /* @__PURE__ */ i2(), e = /* @__PURE__ */ ea(), r = a_(), i = s2();
    n.exports = function(a) {
      var u = r(arguments), _ = a.length - (arguments.length - 1);
      return t(
        u,
        1 + (_ > 0 ? _ : 0),
        !0
      );
    }, e ? e(n.exports, "apply", { value: i }) : n.exports.apply = i;
  }(Tc)), Tc.exports;
}
var Uc, zl;
function pg() {
  if (zl) return Uc;
  zl = 1;
  var n = Xm(), t = /* @__PURE__ */ e2(), e = o2(), r = /* @__PURE__ */ hg(), i = /* @__PURE__ */ Xs(), o = fg(), a = r("Object.prototype.toString"), u = i_()(), _ = typeof globalThis > "u" ? li : globalThis, l = t(), f = r("String.prototype.slice"), g = r("Array.prototype.indexOf", !0) || function(T, A) {
    for (var R = 0; R < T.length; R += 1)
      if (T[R] === A)
        return R;
    return -1;
  }, y = { __proto__: null };
  u && i && o ? n(l, function(S) {
    var T = new _[S]();
    if (Symbol.toStringTag in T && o) {
      var A = o(T), R = i(A, Symbol.toStringTag);
      if (!R && A) {
        var P = o(A);
        R = i(P, Symbol.toStringTag);
      }
      y["$" + S] = e(R.get);
    }
  }) : n(l, function(S) {
    var T = new _[S](), A = T.slice || T.set;
    A && (y[
      /** @type {`$${import('.').TypedArrayName}`} */
      "$" + S
    ] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */
    // @ts-expect-error TODO FIXME
    e(A));
  });
  var B = function(T) {
    var A = !1;
    return n(
      /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
      y,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(R, P) {
        if (!A)
          try {
            "$" + R(T) === P && (A = /** @type {import('.').TypedArrayName} */
            f(P, 1));
          } catch {
          }
      }
    ), A;
  }, I = function(T) {
    var A = !1;
    return n(
      /** @type {Record<`\$${import('.').TypedArrayName}`, Getter>} */
      y,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(R, P) {
        if (!A)
          try {
            R(T), A = /** @type {import('.').TypedArrayName} */
            f(P, 1);
          } catch {
          }
      }
    ), A;
  };
  return Uc = function(T) {
    if (!T || typeof T != "object")
      return !1;
    if (!u) {
      var A = f(a(T), 8, -1);
      return g(l, A) > -1 ? A : A !== "Object" ? !1 : I(T);
    }
    return i ? B(T) : null;
  }, Uc;
}
var Mc, Bl;
function a2() {
  if (Bl) return Mc;
  Bl = 1;
  var n = /* @__PURE__ */ pg();
  return Mc = function(e) {
    return !!n(e);
  }, Mc;
}
var Sl;
function c2() {
  return Sl || (Sl = 1, function(n) {
    var t = /* @__PURE__ */ $m(), e = Ym(), r = /* @__PURE__ */ pg(), i = /* @__PURE__ */ a2();
    function o(it) {
      return it.call.bind(it);
    }
    var a = typeof BigInt < "u", u = typeof Symbol < "u", _ = o(Object.prototype.toString), l = o(Number.prototype.valueOf), f = o(String.prototype.valueOf), g = o(Boolean.prototype.valueOf);
    if (a)
      var y = o(BigInt.prototype.valueOf);
    if (u)
      var B = o(Symbol.prototype.valueOf);
    function I(it, pe) {
      if (typeof it != "object")
        return !1;
      try {
        return pe(it), !0;
      } catch {
        return !1;
      }
    }
    n.isArgumentsObject = t, n.isGeneratorFunction = e, n.isTypedArray = i;
    function S(it) {
      return typeof Promise < "u" && it instanceof Promise || it !== null && typeof it == "object" && typeof it.then == "function" && typeof it.catch == "function";
    }
    n.isPromise = S;
    function T(it) {
      return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? ArrayBuffer.isView(it) : i(it) || X(it);
    }
    n.isArrayBufferView = T;
    function A(it) {
      return r(it) === "Uint8Array";
    }
    n.isUint8Array = A;
    function R(it) {
      return r(it) === "Uint8ClampedArray";
    }
    n.isUint8ClampedArray = R;
    function P(it) {
      return r(it) === "Uint16Array";
    }
    n.isUint16Array = P;
    function z(it) {
      return r(it) === "Uint32Array";
    }
    n.isUint32Array = z;
    function k(it) {
      return r(it) === "Int8Array";
    }
    n.isInt8Array = k;
    function C(it) {
      return r(it) === "Int16Array";
    }
    n.isInt16Array = C;
    function N(it) {
      return r(it) === "Int32Array";
    }
    n.isInt32Array = N;
    function D(it) {
      return r(it) === "Float32Array";
    }
    n.isFloat32Array = D;
    function Y(it) {
      return r(it) === "Float64Array";
    }
    n.isFloat64Array = Y;
    function Z(it) {
      return r(it) === "BigInt64Array";
    }
    n.isBigInt64Array = Z;
    function ft(it) {
      return r(it) === "BigUint64Array";
    }
    n.isBigUint64Array = ft;
    function L(it) {
      return _(it) === "[object Map]";
    }
    L.working = typeof Map < "u" && L(/* @__PURE__ */ new Map());
    function At(it) {
      return typeof Map > "u" ? !1 : L.working ? L(it) : it instanceof Map;
    }
    n.isMap = At;
    function Rt(it) {
      return _(it) === "[object Set]";
    }
    Rt.working = typeof Set < "u" && Rt(/* @__PURE__ */ new Set());
    function at(it) {
      return typeof Set > "u" ? !1 : Rt.working ? Rt(it) : it instanceof Set;
    }
    n.isSet = at;
    function wt(it) {
      return _(it) === "[object WeakMap]";
    }
    wt.working = typeof WeakMap < "u" && wt(/* @__PURE__ */ new WeakMap());
    function Et(it) {
      return typeof WeakMap > "u" ? !1 : wt.working ? wt(it) : it instanceof WeakMap;
    }
    n.isWeakMap = Et;
    function xt(it) {
      return _(it) === "[object WeakSet]";
    }
    xt.working = typeof WeakSet < "u" && xt(/* @__PURE__ */ new WeakSet());
    function vt(it) {
      return xt(it);
    }
    n.isWeakSet = vt;
    function Bt(it) {
      return _(it) === "[object ArrayBuffer]";
    }
    Bt.working = typeof ArrayBuffer < "u" && Bt(new ArrayBuffer());
    function jt(it) {
      return typeof ArrayBuffer > "u" ? !1 : Bt.working ? Bt(it) : it instanceof ArrayBuffer;
    }
    n.isArrayBuffer = jt;
    function W(it) {
      return _(it) === "[object DataView]";
    }
    W.working = typeof ArrayBuffer < "u" && typeof DataView < "u" && W(new DataView(new ArrayBuffer(1), 0, 1));
    function X(it) {
      return typeof DataView > "u" ? !1 : W.working ? W(it) : it instanceof DataView;
    }
    n.isDataView = X;
    var nt = typeof SharedArrayBuffer < "u" ? SharedArrayBuffer : void 0;
    function dt(it) {
      return _(it) === "[object SharedArrayBuffer]";
    }
    function G(it) {
      return typeof nt > "u" ? !1 : (typeof dt.working > "u" && (dt.working = dt(new nt())), dt.working ? dt(it) : it instanceof nt);
    }
    n.isSharedArrayBuffer = G;
    function M(it) {
      return _(it) === "[object AsyncFunction]";
    }
    n.isAsyncFunction = M;
    function tt(it) {
      return _(it) === "[object Map Iterator]";
    }
    n.isMapIterator = tt;
    function ct(it) {
      return _(it) === "[object Set Iterator]";
    }
    n.isSetIterator = ct;
    function ut(it) {
      return _(it) === "[object Generator]";
    }
    n.isGeneratorObject = ut;
    function v(it) {
      return _(it) === "[object WebAssembly.Module]";
    }
    n.isWebAssemblyCompiledModule = v;
    function x(it) {
      return I(it, l);
    }
    n.isNumberObject = x;
    function et(it) {
      return I(it, f);
    }
    n.isStringObject = et;
    function lt(it) {
      return I(it, g);
    }
    n.isBooleanObject = lt;
    function St(it) {
      return a && I(it, y);
    }
    n.isBigIntObject = St;
    function yt(it) {
      return u && I(it, B);
    }
    n.isSymbolObject = yt;
    function Pt(it) {
      return x(it) || et(it) || lt(it) || St(it) || yt(it);
    }
    n.isBoxedPrimitive = Pt;
    function he(it) {
      return typeof Uint8Array < "u" && (jt(it) || G(it));
    }
    n.isAnyArrayBuffer = he, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(it) {
      Object.defineProperty(n, it, {
        enumerable: !1,
        value: function() {
          throw new Error(it + " is not supported in userland");
        }
      });
    });
  }(qa)), qa;
}
var jc, Pl;
function u2() {
  return Pl || (Pl = 1, jc = function(t) {
    return t && typeof t == "object" && typeof t.copy == "function" && typeof t.fill == "function" && typeof t.readUInt8 == "function";
  }), jc;
}
var po = { exports: {} }, kl;
function gs() {
  return kl || (kl = 1, typeof Object.create == "function" ? po.exports = function(t, e) {
    e && (t.super_ = e, t.prototype = Object.create(e.prototype, {
      constructor: {
        value: t,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }));
  } : po.exports = function(t, e) {
    if (e) {
      t.super_ = e;
      var r = function() {
      };
      r.prototype = e.prototype, t.prototype = new r(), t.prototype.constructor = t;
    }
  }), po.exports;
}
var Fl;
function wg() {
  return Fl || (Fl = 1, function(n) {
    var t = Object.getOwnPropertyDescriptors || function(X) {
      for (var nt = Object.keys(X), dt = {}, G = 0; G < nt.length; G++)
        dt[nt[G]] = Object.getOwnPropertyDescriptor(X, nt[G]);
      return dt;
    }, e = /%[sdj%]/g;
    n.format = function(W) {
      if (!k(W)) {
        for (var X = [], nt = 0; nt < arguments.length; nt++)
          X.push(a(arguments[nt]));
        return X.join(" ");
      }
      for (var nt = 1, dt = arguments, G = dt.length, M = String(W).replace(e, function(ct) {
        if (ct === "%%") return "%";
        if (nt >= G) return ct;
        switch (ct) {
          case "%s":
            return String(dt[nt++]);
          case "%d":
            return Number(dt[nt++]);
          case "%j":
            try {
              return JSON.stringify(dt[nt++]);
            } catch {
              return "[Circular]";
            }
          default:
            return ct;
        }
      }), tt = dt[nt]; nt < G; tt = dt[++nt])
        R(tt) || !Y(tt) ? M += " " + tt : M += " " + a(tt);
      return M;
    }, n.deprecate = function(W, X) {
      if (typeof Ct < "u" && Ct.noDeprecation === !0)
        return W;
      if (typeof Ct > "u")
        return function() {
          return n.deprecate(W, X).apply(this, arguments);
        };
      var nt = !1;
      function dt() {
        if (!nt) {
          if (Ct.throwDeprecation)
            throw new Error(X);
          Ct.traceDeprecation ? console.trace(X) : console.error(X), nt = !0;
        }
        return W.apply(this, arguments);
      }
      return dt;
    };
    var r = {}, i = /^$/;
    if (Ct.env.NODE_DEBUG) {
      var o = Ct.env.NODE_DEBUG;
      o = o.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), i = new RegExp("^" + o + "$", "i");
    }
    n.debuglog = function(W) {
      if (W = W.toUpperCase(), !r[W])
        if (i.test(W)) {
          var X = Ct.pid;
          r[W] = function() {
            var nt = n.format.apply(n, arguments);
            console.error("%s %d: %s", W, X, nt);
          };
        } else
          r[W] = function() {
          };
      return r[W];
    };
    function a(W, X) {
      var nt = {
        seen: [],
        stylize: _
      };
      return arguments.length >= 3 && (nt.depth = arguments[2]), arguments.length >= 4 && (nt.colors = arguments[3]), A(X) ? nt.showHidden = X : X && n._extend(nt, X), N(nt.showHidden) && (nt.showHidden = !1), N(nt.depth) && (nt.depth = 2), N(nt.colors) && (nt.colors = !1), N(nt.customInspect) && (nt.customInspect = !0), nt.colors && (nt.stylize = u), f(nt, W, nt.depth);
    }
    n.inspect = a, a.colors = {
      bold: [1, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      white: [37, 39],
      grey: [90, 39],
      black: [30, 39],
      blue: [34, 39],
      cyan: [36, 39],
      green: [32, 39],
      magenta: [35, 39],
      red: [31, 39],
      yellow: [33, 39]
    }, a.styles = {
      special: "cyan",
      number: "yellow",
      boolean: "yellow",
      undefined: "grey",
      null: "bold",
      string: "green",
      date: "magenta",
      // "name": intentionally not styling
      regexp: "red"
    };
    function u(W, X) {
      var nt = a.styles[X];
      return nt ? "\x1B[" + a.colors[nt][0] + "m" + W + "\x1B[" + a.colors[nt][1] + "m" : W;
    }
    function _(W, X) {
      return W;
    }
    function l(W) {
      var X = {};
      return W.forEach(function(nt, dt) {
        X[nt] = !0;
      }), X;
    }
    function f(W, X, nt) {
      if (W.customInspect && X && L(X.inspect) && // Filter out the util module, it's inspect function is special
      X.inspect !== n.inspect && // Also filter out any prototype objects using the circular check.
      !(X.constructor && X.constructor.prototype === X)) {
        var dt = X.inspect(nt, W);
        return k(dt) || (dt = f(W, dt, nt)), dt;
      }
      var G = g(W, X);
      if (G)
        return G;
      var M = Object.keys(X), tt = l(M);
      if (W.showHidden && (M = Object.getOwnPropertyNames(X)), ft(X) && (M.indexOf("message") >= 0 || M.indexOf("description") >= 0))
        return y(X);
      if (M.length === 0) {
        if (L(X)) {
          var ct = X.name ? ": " + X.name : "";
          return W.stylize("[Function" + ct + "]", "special");
        }
        if (D(X))
          return W.stylize(RegExp.prototype.toString.call(X), "regexp");
        if (Z(X))
          return W.stylize(Date.prototype.toString.call(X), "date");
        if (ft(X))
          return y(X);
      }
      var ut = "", v = !1, x = ["{", "}"];
      if (T(X) && (v = !0, x = ["[", "]"]), L(X)) {
        var et = X.name ? ": " + X.name : "";
        ut = " [Function" + et + "]";
      }
      if (D(X) && (ut = " " + RegExp.prototype.toString.call(X)), Z(X) && (ut = " " + Date.prototype.toUTCString.call(X)), ft(X) && (ut = " " + y(X)), M.length === 0 && (!v || X.length == 0))
        return x[0] + ut + x[1];
      if (nt < 0)
        return D(X) ? W.stylize(RegExp.prototype.toString.call(X), "regexp") : W.stylize("[Object]", "special");
      W.seen.push(X);
      var lt;
      return v ? lt = B(W, X, nt, tt, M) : lt = M.map(function(St) {
        return I(W, X, nt, tt, St, v);
      }), W.seen.pop(), S(lt, ut, x);
    }
    function g(W, X) {
      if (N(X))
        return W.stylize("undefined", "undefined");
      if (k(X)) {
        var nt = "'" + JSON.stringify(X).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return W.stylize(nt, "string");
      }
      if (z(X))
        return W.stylize("" + X, "number");
      if (A(X))
        return W.stylize("" + X, "boolean");
      if (R(X))
        return W.stylize("null", "null");
    }
    function y(W) {
      return "[" + Error.prototype.toString.call(W) + "]";
    }
    function B(W, X, nt, dt, G) {
      for (var M = [], tt = 0, ct = X.length; tt < ct; ++tt)
        xt(X, String(tt)) ? M.push(I(
          W,
          X,
          nt,
          dt,
          String(tt),
          !0
        )) : M.push("");
      return G.forEach(function(ut) {
        ut.match(/^\d+$/) || M.push(I(
          W,
          X,
          nt,
          dt,
          ut,
          !0
        ));
      }), M;
    }
    function I(W, X, nt, dt, G, M) {
      var tt, ct, ut;
      if (ut = Object.getOwnPropertyDescriptor(X, G) || { value: X[G] }, ut.get ? ut.set ? ct = W.stylize("[Getter/Setter]", "special") : ct = W.stylize("[Getter]", "special") : ut.set && (ct = W.stylize("[Setter]", "special")), xt(dt, G) || (tt = "[" + G + "]"), ct || (W.seen.indexOf(ut.value) < 0 ? (R(nt) ? ct = f(W, ut.value, null) : ct = f(W, ut.value, nt - 1), ct.indexOf(`
`) > -1 && (M ? ct = ct.split(`
`).map(function(v) {
        return "  " + v;
      }).join(`
`).slice(2) : ct = `
` + ct.split(`
`).map(function(v) {
        return "   " + v;
      }).join(`
`))) : ct = W.stylize("[Circular]", "special")), N(tt)) {
        if (M && G.match(/^\d+$/))
          return ct;
        tt = JSON.stringify("" + G), tt.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (tt = tt.slice(1, -1), tt = W.stylize(tt, "name")) : (tt = tt.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), tt = W.stylize(tt, "string"));
      }
      return tt + ": " + ct;
    }
    function S(W, X, nt) {
      var dt = W.reduce(function(G, M) {
        return M.indexOf(`
`) >= 0, G + M.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      return dt > 60 ? nt[0] + (X === "" ? "" : X + `
 `) + " " + W.join(`,
  `) + " " + nt[1] : nt[0] + X + " " + W.join(", ") + " " + nt[1];
    }
    n.types = c2();
    function T(W) {
      return Array.isArray(W);
    }
    n.isArray = T;
    function A(W) {
      return typeof W == "boolean";
    }
    n.isBoolean = A;
    function R(W) {
      return W === null;
    }
    n.isNull = R;
    function P(W) {
      return W == null;
    }
    n.isNullOrUndefined = P;
    function z(W) {
      return typeof W == "number";
    }
    n.isNumber = z;
    function k(W) {
      return typeof W == "string";
    }
    n.isString = k;
    function C(W) {
      return typeof W == "symbol";
    }
    n.isSymbol = C;
    function N(W) {
      return W === void 0;
    }
    n.isUndefined = N;
    function D(W) {
      return Y(W) && Rt(W) === "[object RegExp]";
    }
    n.isRegExp = D, n.types.isRegExp = D;
    function Y(W) {
      return typeof W == "object" && W !== null;
    }
    n.isObject = Y;
    function Z(W) {
      return Y(W) && Rt(W) === "[object Date]";
    }
    n.isDate = Z, n.types.isDate = Z;
    function ft(W) {
      return Y(W) && (Rt(W) === "[object Error]" || W instanceof Error);
    }
    n.isError = ft, n.types.isNativeError = ft;
    function L(W) {
      return typeof W == "function";
    }
    n.isFunction = L;
    function At(W) {
      return W === null || typeof W == "boolean" || typeof W == "number" || typeof W == "string" || typeof W == "symbol" || // ES6 symbol
      typeof W > "u";
    }
    n.isPrimitive = At, n.isBuffer = u2();
    function Rt(W) {
      return Object.prototype.toString.call(W);
    }
    function at(W) {
      return W < 10 ? "0" + W.toString(10) : W.toString(10);
    }
    var wt = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function Et() {
      var W = /* @__PURE__ */ new Date(), X = [
        at(W.getHours()),
        at(W.getMinutes()),
        at(W.getSeconds())
      ].join(":");
      return [W.getDate(), wt[W.getMonth()], X].join(" ");
    }
    n.log = function() {
      console.log("%s - %s", Et(), n.format.apply(n, arguments));
    }, n.inherits = gs(), n._extend = function(W, X) {
      if (!X || !Y(X)) return W;
      for (var nt = Object.keys(X), dt = nt.length; dt--; )
        W[nt[dt]] = X[nt[dt]];
      return W;
    };
    function xt(W, X) {
      return Object.prototype.hasOwnProperty.call(W, X);
    }
    var vt = typeof Symbol < "u" ? Symbol("util.promisify.custom") : void 0;
    n.promisify = function(X) {
      if (typeof X != "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (vt && X[vt]) {
        var nt = X[vt];
        if (typeof nt != "function")
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        return Object.defineProperty(nt, vt, {
          value: nt,
          enumerable: !1,
          writable: !1,
          configurable: !0
        }), nt;
      }
      function nt() {
        for (var dt, G, M = new Promise(function(ut, v) {
          dt = ut, G = v;
        }), tt = [], ct = 0; ct < arguments.length; ct++)
          tt.push(arguments[ct]);
        tt.push(function(ut, v) {
          ut ? G(ut) : dt(v);
        });
        try {
          X.apply(this, tt);
        } catch (ut) {
          G(ut);
        }
        return M;
      }
      return Object.setPrototypeOf(nt, Object.getPrototypeOf(X)), vt && Object.defineProperty(nt, vt, {
        value: nt,
        enumerable: !1,
        writable: !1,
        configurable: !0
      }), Object.defineProperties(
        nt,
        t(X)
      );
    }, n.promisify.custom = vt;
    function Bt(W, X) {
      if (!W) {
        var nt = new Error("Promise was rejected with a falsy value");
        nt.reason = W, W = nt;
      }
      return X(W);
    }
    function jt(W) {
      if (typeof W != "function")
        throw new TypeError('The "original" argument must be of type Function');
      function X() {
        for (var nt = [], dt = 0; dt < arguments.length; dt++)
          nt.push(arguments[dt]);
        var G = nt.pop();
        if (typeof G != "function")
          throw new TypeError("The last argument must be of type Function");
        var M = this, tt = function() {
          return G.apply(M, arguments);
        };
        W.apply(this, nt).then(
          function(ct) {
            Ct.nextTick(tt.bind(null, null, ct));
          },
          function(ct) {
            Ct.nextTick(Bt.bind(null, ct, tt));
          }
        );
      }
      return Object.setPrototypeOf(X, Object.getPrototypeOf(W)), Object.defineProperties(
        X,
        t(W)
      ), X;
    }
    n.callbackify = jt;
  }(Va)), Va;
}
var Gc, Il;
function _2() {
  if (Il) return Gc;
  Il = 1;
  function n(I, S) {
    var T = Object.keys(I);
    if (Object.getOwnPropertySymbols) {
      var A = Object.getOwnPropertySymbols(I);
      S && (A = A.filter(function(R) {
        return Object.getOwnPropertyDescriptor(I, R).enumerable;
      })), T.push.apply(T, A);
    }
    return T;
  }
  function t(I) {
    for (var S = 1; S < arguments.length; S++) {
      var T = arguments[S] != null ? arguments[S] : {};
      S % 2 ? n(Object(T), !0).forEach(function(A) {
        e(I, A, T[A]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(I, Object.getOwnPropertyDescriptors(T)) : n(Object(T)).forEach(function(A) {
        Object.defineProperty(I, A, Object.getOwnPropertyDescriptor(T, A));
      });
    }
    return I;
  }
  function e(I, S, T) {
    return S = a(S), S in I ? Object.defineProperty(I, S, { value: T, enumerable: !0, configurable: !0, writable: !0 }) : I[S] = T, I;
  }
  function r(I, S) {
    if (!(I instanceof S))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(I, S) {
    for (var T = 0; T < S.length; T++) {
      var A = S[T];
      A.enumerable = A.enumerable || !1, A.configurable = !0, "value" in A && (A.writable = !0), Object.defineProperty(I, a(A.key), A);
    }
  }
  function o(I, S, T) {
    return S && i(I.prototype, S), Object.defineProperty(I, "prototype", { writable: !1 }), I;
  }
  function a(I) {
    var S = u(I, "string");
    return typeof S == "symbol" ? S : String(S);
  }
  function u(I, S) {
    if (typeof I != "object" || I === null) return I;
    var T = I[Symbol.toPrimitive];
    if (T !== void 0) {
      var A = T.call(I, S);
      if (typeof A != "object") return A;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return String(I);
  }
  var _ = Xo(), l = _.Buffer, f = wg(), g = f.inspect, y = g && g.custom || "inspect";
  function B(I, S, T) {
    l.prototype.copy.call(I, S, T);
  }
  return Gc = /* @__PURE__ */ function() {
    function I() {
      r(this, I), this.head = null, this.tail = null, this.length = 0;
    }
    return o(I, [{
      key: "push",
      value: function(T) {
        var A = {
          data: T,
          next: null
        };
        this.length > 0 ? this.tail.next = A : this.head = A, this.tail = A, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(T) {
        var A = {
          data: T,
          next: this.head
        };
        this.length === 0 && (this.tail = A), this.head = A, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var T = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, T;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(T) {
        if (this.length === 0) return "";
        for (var A = this.head, R = "" + A.data; A = A.next; ) R += T + A.data;
        return R;
      }
    }, {
      key: "concat",
      value: function(T) {
        if (this.length === 0) return l.alloc(0);
        for (var A = l.allocUnsafe(T >>> 0), R = this.head, P = 0; R; )
          B(R.data, A, P), P += R.data.length, R = R.next;
        return A;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function(T, A) {
        var R;
        return T < this.head.data.length ? (R = this.head.data.slice(0, T), this.head.data = this.head.data.slice(T)) : T === this.head.data.length ? R = this.shift() : R = A ? this._getString(T) : this._getBuffer(T), R;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function(T) {
        var A = this.head, R = 1, P = A.data;
        for (T -= P.length; A = A.next; ) {
          var z = A.data, k = T > z.length ? z.length : T;
          if (k === z.length ? P += z : P += z.slice(0, T), T -= k, T === 0) {
            k === z.length ? (++R, A.next ? this.head = A.next : this.head = this.tail = null) : (this.head = A, A.data = z.slice(k));
            break;
          }
          ++R;
        }
        return this.length -= R, P;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function(T) {
        var A = l.allocUnsafe(T), R = this.head, P = 1;
        for (R.data.copy(A), T -= R.data.length; R = R.next; ) {
          var z = R.data, k = T > z.length ? z.length : T;
          if (z.copy(A, A.length - T, 0, k), T -= k, T === 0) {
            k === z.length ? (++P, R.next ? this.head = R.next : this.head = this.tail = null) : (this.head = R, R.data = z.slice(k));
            break;
          }
          ++P;
        }
        return this.length -= P, A;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: y,
      value: function(T, A) {
        return g(this, t(t({}, A), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: !1
        }));
      }
    }]), I;
  }(), Gc;
}
var Hc, Ol;
function dg() {
  if (Ol) return Hc;
  Ol = 1;
  function n(a, u) {
    var _ = this, l = this._readableState && this._readableState.destroyed, f = this._writableState && this._writableState.destroyed;
    return l || f ? (u ? u(a) : a && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, Ct.nextTick(i, this, a)) : Ct.nextTick(i, this, a)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(a || null, function(g) {
      !u && g ? _._writableState ? _._writableState.errorEmitted ? Ct.nextTick(e, _) : (_._writableState.errorEmitted = !0, Ct.nextTick(t, _, g)) : Ct.nextTick(t, _, g) : u ? (Ct.nextTick(e, _), u(g)) : Ct.nextTick(e, _);
    }), this);
  }
  function t(a, u) {
    i(a, u), e(a);
  }
  function e(a) {
    a._writableState && !a._writableState.emitClose || a._readableState && !a._readableState.emitClose || a.emit("close");
  }
  function r() {
    this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
  }
  function i(a, u) {
    a.emit("error", u);
  }
  function o(a, u) {
    var _ = a._readableState, l = a._writableState;
    _ && _.autoDestroy || l && l.autoDestroy ? a.destroy(u) : a.emit("error", u);
  }
  return Hc = {
    destroy: n,
    undestroy: r,
    errorOrDestroy: o
  }, Hc;
}
var Vc = {}, Tl;
function ys() {
  if (Tl) return Vc;
  Tl = 1;
  function n(u, _) {
    u.prototype = Object.create(_.prototype), u.prototype.constructor = u, u.__proto__ = _;
  }
  var t = {};
  function e(u, _, l) {
    l || (l = Error);
    function f(y, B, I) {
      return typeof _ == "string" ? _ : _(y, B, I);
    }
    var g = /* @__PURE__ */ function(y) {
      n(B, y);
      function B(I, S, T) {
        return y.call(this, f(I, S, T)) || this;
      }
      return B;
    }(l);
    g.prototype.name = l.name, g.prototype.code = u, t[u] = g;
  }
  function r(u, _) {
    if (Array.isArray(u)) {
      var l = u.length;
      return u = u.map(function(f) {
        return String(f);
      }), l > 2 ? "one of ".concat(_, " ").concat(u.slice(0, l - 1).join(", "), ", or ") + u[l - 1] : l === 2 ? "one of ".concat(_, " ").concat(u[0], " or ").concat(u[1]) : "of ".concat(_, " ").concat(u[0]);
    } else
      return "of ".concat(_, " ").concat(String(u));
  }
  function i(u, _, l) {
    return u.substr(0, _.length) === _;
  }
  function o(u, _, l) {
    return (l === void 0 || l > u.length) && (l = u.length), u.substring(l - _.length, l) === _;
  }
  function a(u, _, l) {
    return typeof l != "number" && (l = 0), l + _.length > u.length ? !1 : u.indexOf(_, l) !== -1;
  }
  return e("ERR_INVALID_OPT_VALUE", function(u, _) {
    return 'The value "' + _ + '" is invalid for option "' + u + '"';
  }, TypeError), e("ERR_INVALID_ARG_TYPE", function(u, _, l) {
    var f;
    typeof _ == "string" && i(_, "not ") ? (f = "must not be", _ = _.replace(/^not /, "")) : f = "must be";
    var g;
    if (o(u, " argument"))
      g = "The ".concat(u, " ").concat(f, " ").concat(r(_, "type"));
    else {
      var y = a(u, ".") ? "property" : "argument";
      g = 'The "'.concat(u, '" ').concat(y, " ").concat(f, " ").concat(r(_, "type"));
    }
    return g += ". Received type ".concat(typeof l), g;
  }, TypeError), e("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), e("ERR_METHOD_NOT_IMPLEMENTED", function(u) {
    return "The " + u + " method is not implemented";
  }), e("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), e("ERR_STREAM_DESTROYED", function(u) {
    return "Cannot call " + u + " after a stream was destroyed";
  }), e("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), e("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), e("ERR_STREAM_WRITE_AFTER_END", "write after end"), e("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), e("ERR_UNKNOWN_ENCODING", function(u) {
    return "Unknown encoding: " + u;
  }, TypeError), e("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), Vc.codes = t, Vc;
}
var qc, Cl;
function gg() {
  if (Cl) return qc;
  Cl = 1;
  var n = ys().codes.ERR_INVALID_OPT_VALUE;
  function t(r, i, o) {
    return r.highWaterMark != null ? r.highWaterMark : i ? r[o] : null;
  }
  function e(r, i, o, a) {
    var u = t(i, a, o);
    if (u != null) {
      if (!(isFinite(u) && Math.floor(u) === u) || u < 0) {
        var _ = a ? o : "highWaterMark";
        throw new n(_, u);
      }
      return Math.floor(u);
    }
    return r.objectMode ? 16 : 16 * 1024;
  }
  return qc = {
    getHighWaterMark: e
  }, qc;
}
var Qc, Nl;
function f2() {
  if (Nl) return Qc;
  Nl = 1, Qc = n;
  function n(e, r) {
    if (t("noDeprecation"))
      return e;
    var i = !1;
    function o() {
      if (!i) {
        if (t("throwDeprecation"))
          throw new Error(r);
        t("traceDeprecation") ? console.trace(r) : console.warn(r), i = !0;
      }
      return e.apply(this, arguments);
    }
    return o;
  }
  function t(e) {
    try {
      if (!li.localStorage) return !1;
    } catch {
      return !1;
    }
    var r = li.localStorage[e];
    return r == null ? !1 : String(r).toLowerCase() === "true";
  }
  return Qc;
}
var Kc, Ll;
function yg() {
  if (Ll) return Kc;
  Ll = 1, Kc = D;
  function n(G) {
    var M = this;
    this.next = null, this.entry = null, this.finish = function() {
      dt(M, G);
    };
  }
  var t;
  D.WritableState = C;
  var e = {
    deprecate: f2()
  }, r = ig(), i = Xo().Buffer, o = (typeof li < "u" ? li : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function a(G) {
    return i.from(G);
  }
  function u(G) {
    return i.isBuffer(G) || G instanceof o;
  }
  var _ = dg(), l = gg(), f = l.getHighWaterMark, g = ys().codes, y = g.ERR_INVALID_ARG_TYPE, B = g.ERR_METHOD_NOT_IMPLEMENTED, I = g.ERR_MULTIPLE_CALLBACK, S = g.ERR_STREAM_CANNOT_PIPE, T = g.ERR_STREAM_DESTROYED, A = g.ERR_STREAM_NULL_VALUES, R = g.ERR_STREAM_WRITE_AFTER_END, P = g.ERR_UNKNOWN_ENCODING, z = _.errorOrDestroy;
  gs()(D, r);
  function k() {
  }
  function C(G, M, tt) {
    t = t || fs(), G = G || {}, typeof tt != "boolean" && (tt = M instanceof t), this.objectMode = !!G.objectMode, tt && (this.objectMode = this.objectMode || !!G.writableObjectMode), this.highWaterMark = f(this, G, "writableHighWaterMark", tt), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
    var ct = G.decodeStrings === !1;
    this.decodeStrings = !ct, this.defaultEncoding = G.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(ut) {
      wt(M, ut);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = G.emitClose !== !1, this.autoDestroy = !!G.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new n(this);
  }
  C.prototype.getBuffer = function() {
    for (var M = this.bufferedRequest, tt = []; M; )
      tt.push(M), M = M.next;
    return tt;
  }, function() {
    try {
      Object.defineProperty(C.prototype, "buffer", {
        get: e.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var N;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (N = Function.prototype[Symbol.hasInstance], Object.defineProperty(D, Symbol.hasInstance, {
    value: function(M) {
      return N.call(this, M) ? !0 : this !== D ? !1 : M && M._writableState instanceof C;
    }
  })) : N = function(M) {
    return M instanceof this;
  };
  function D(G) {
    t = t || fs();
    var M = this instanceof t;
    if (!M && !N.call(D, this)) return new D(G);
    this._writableState = new C(G, this, M), this.writable = !0, G && (typeof G.write == "function" && (this._write = G.write), typeof G.writev == "function" && (this._writev = G.writev), typeof G.destroy == "function" && (this._destroy = G.destroy), typeof G.final == "function" && (this._final = G.final)), r.call(this);
  }
  D.prototype.pipe = function() {
    z(this, new S());
  };
  function Y(G, M) {
    var tt = new R();
    z(G, tt), Ct.nextTick(M, tt);
  }
  function Z(G, M, tt, ct) {
    var ut;
    return tt === null ? ut = new A() : typeof tt != "string" && !M.objectMode && (ut = new y("chunk", ["string", "Buffer"], tt)), ut ? (z(G, ut), Ct.nextTick(ct, ut), !1) : !0;
  }
  D.prototype.write = function(G, M, tt) {
    var ct = this._writableState, ut = !1, v = !ct.objectMode && u(G);
    return v && !i.isBuffer(G) && (G = a(G)), typeof M == "function" && (tt = M, M = null), v ? M = "buffer" : M || (M = ct.defaultEncoding), typeof tt != "function" && (tt = k), ct.ending ? Y(this, tt) : (v || Z(this, ct, G, tt)) && (ct.pendingcb++, ut = L(this, ct, v, G, M, tt)), ut;
  }, D.prototype.cork = function() {
    this._writableState.corked++;
  }, D.prototype.uncork = function() {
    var G = this._writableState;
    G.corked && (G.corked--, !G.writing && !G.corked && !G.bufferProcessing && G.bufferedRequest && vt(this, G));
  }, D.prototype.setDefaultEncoding = function(M) {
    if (typeof M == "string" && (M = M.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((M + "").toLowerCase()) > -1)) throw new P(M);
    return this._writableState.defaultEncoding = M, this;
  }, Object.defineProperty(D.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function ft(G, M, tt) {
    return !G.objectMode && G.decodeStrings !== !1 && typeof M == "string" && (M = i.from(M, tt)), M;
  }
  Object.defineProperty(D.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function L(G, M, tt, ct, ut, v) {
    if (!tt) {
      var x = ft(M, ct, ut);
      ct !== x && (tt = !0, ut = "buffer", ct = x);
    }
    var et = M.objectMode ? 1 : ct.length;
    M.length += et;
    var lt = M.length < M.highWaterMark;
    if (lt || (M.needDrain = !0), M.writing || M.corked) {
      var St = M.lastBufferedRequest;
      M.lastBufferedRequest = {
        chunk: ct,
        encoding: ut,
        isBuf: tt,
        callback: v,
        next: null
      }, St ? St.next = M.lastBufferedRequest : M.bufferedRequest = M.lastBufferedRequest, M.bufferedRequestCount += 1;
    } else
      At(G, M, !1, et, ct, ut, v);
    return lt;
  }
  function At(G, M, tt, ct, ut, v, x) {
    M.writelen = ct, M.writecb = x, M.writing = !0, M.sync = !0, M.destroyed ? M.onwrite(new T("write")) : tt ? G._writev(ut, M.onwrite) : G._write(ut, v, M.onwrite), M.sync = !1;
  }
  function Rt(G, M, tt, ct, ut) {
    --M.pendingcb, tt ? (Ct.nextTick(ut, ct), Ct.nextTick(X, G, M), G._writableState.errorEmitted = !0, z(G, ct)) : (ut(ct), G._writableState.errorEmitted = !0, z(G, ct), X(G, M));
  }
  function at(G) {
    G.writing = !1, G.writecb = null, G.length -= G.writelen, G.writelen = 0;
  }
  function wt(G, M) {
    var tt = G._writableState, ct = tt.sync, ut = tt.writecb;
    if (typeof ut != "function") throw new I();
    if (at(tt), M) Rt(G, tt, ct, M, ut);
    else {
      var v = Bt(tt) || G.destroyed;
      !v && !tt.corked && !tt.bufferProcessing && tt.bufferedRequest && vt(G, tt), ct ? Ct.nextTick(Et, G, tt, v, ut) : Et(G, tt, v, ut);
    }
  }
  function Et(G, M, tt, ct) {
    tt || xt(G, M), M.pendingcb--, ct(), X(G, M);
  }
  function xt(G, M) {
    M.length === 0 && M.needDrain && (M.needDrain = !1, G.emit("drain"));
  }
  function vt(G, M) {
    M.bufferProcessing = !0;
    var tt = M.bufferedRequest;
    if (G._writev && tt && tt.next) {
      var ct = M.bufferedRequestCount, ut = new Array(ct), v = M.corkedRequestsFree;
      v.entry = tt;
      for (var x = 0, et = !0; tt; )
        ut[x] = tt, tt.isBuf || (et = !1), tt = tt.next, x += 1;
      ut.allBuffers = et, At(G, M, !0, M.length, ut, "", v.finish), M.pendingcb++, M.lastBufferedRequest = null, v.next ? (M.corkedRequestsFree = v.next, v.next = null) : M.corkedRequestsFree = new n(M), M.bufferedRequestCount = 0;
    } else {
      for (; tt; ) {
        var lt = tt.chunk, St = tt.encoding, yt = tt.callback, Pt = M.objectMode ? 1 : lt.length;
        if (At(G, M, !1, Pt, lt, St, yt), tt = tt.next, M.bufferedRequestCount--, M.writing)
          break;
      }
      tt === null && (M.lastBufferedRequest = null);
    }
    M.bufferedRequest = tt, M.bufferProcessing = !1;
  }
  D.prototype._write = function(G, M, tt) {
    tt(new B("_write()"));
  }, D.prototype._writev = null, D.prototype.end = function(G, M, tt) {
    var ct = this._writableState;
    return typeof G == "function" ? (tt = G, G = null, M = null) : typeof M == "function" && (tt = M, M = null), G != null && this.write(G, M), ct.corked && (ct.corked = 1, this.uncork()), ct.ending || nt(this, ct, tt), this;
  }, Object.defineProperty(D.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function Bt(G) {
    return G.ending && G.length === 0 && G.bufferedRequest === null && !G.finished && !G.writing;
  }
  function jt(G, M) {
    G._final(function(tt) {
      M.pendingcb--, tt && z(G, tt), M.prefinished = !0, G.emit("prefinish"), X(G, M);
    });
  }
  function W(G, M) {
    !M.prefinished && !M.finalCalled && (typeof G._final == "function" && !M.destroyed ? (M.pendingcb++, M.finalCalled = !0, Ct.nextTick(jt, G, M)) : (M.prefinished = !0, G.emit("prefinish")));
  }
  function X(G, M) {
    var tt = Bt(M);
    if (tt && (W(G, M), M.pendingcb === 0 && (M.finished = !0, G.emit("finish"), M.autoDestroy))) {
      var ct = G._readableState;
      (!ct || ct.autoDestroy && ct.endEmitted) && G.destroy();
    }
    return tt;
  }
  function nt(G, M, tt) {
    M.ending = !0, X(G, M), tt && (M.finished ? Ct.nextTick(tt) : G.once("finish", tt)), M.ended = !0, G.writable = !1;
  }
  function dt(G, M, tt) {
    var ct = G.entry;
    for (G.entry = null; ct; ) {
      var ut = ct.callback;
      M.pendingcb--, ut(tt), ct = ct.next;
    }
    M.corkedRequestsFree.next = G;
  }
  return Object.defineProperty(D.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState === void 0 ? !1 : this._writableState.destroyed;
    },
    set: function(M) {
      this._writableState && (this._writableState.destroyed = M);
    }
  }), D.prototype.destroy = _.destroy, D.prototype._undestroy = _.undestroy, D.prototype._destroy = function(G, M) {
    M(G);
  }, Kc;
}
var Wc, Dl;
function fs() {
  if (Dl) return Wc;
  Dl = 1;
  var n = Object.keys || function(l) {
    var f = [];
    for (var g in l) f.push(g);
    return f;
  };
  Wc = a;
  var t = bg(), e = yg();
  gs()(a, t);
  for (var r = n(e.prototype), i = 0; i < r.length; i++) {
    var o = r[i];
    a.prototype[o] || (a.prototype[o] = e.prototype[o]);
  }
  function a(l) {
    if (!(this instanceof a)) return new a(l);
    t.call(this, l), e.call(this, l), this.allowHalfOpen = !0, l && (l.readable === !1 && (this.readable = !1), l.writable === !1 && (this.writable = !1), l.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", u)));
  }
  Object.defineProperty(a.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  }), Object.defineProperty(a.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  }), Object.defineProperty(a.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function u() {
    this._writableState.ended || Ct.nextTick(_, this);
  }
  function _(l) {
    l.end();
  }
  return Object.defineProperty(a.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(f) {
      this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = f, this._writableState.destroyed = f);
    }
  }), Wc;
}
var Jc = {}, wo = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var Ul;
function l2() {
  return Ul || (Ul = 1, function(n, t) {
    var e = Xo(), r = e.Buffer;
    function i(a, u) {
      for (var _ in a)
        u[_] = a[_];
    }
    r.from && r.alloc && r.allocUnsafe && r.allocUnsafeSlow ? n.exports = e : (i(e, t), t.Buffer = o);
    function o(a, u, _) {
      return r(a, u, _);
    }
    o.prototype = Object.create(r.prototype), i(r, o), o.from = function(a, u, _) {
      if (typeof a == "number")
        throw new TypeError("Argument must not be a number");
      return r(a, u, _);
    }, o.alloc = function(a, u, _) {
      if (typeof a != "number")
        throw new TypeError("Argument must be a number");
      var l = r(a);
      return u !== void 0 ? typeof _ == "string" ? l.fill(u, _) : l.fill(u) : l.fill(0), l;
    }, o.allocUnsafe = function(a) {
      if (typeof a != "number")
        throw new TypeError("Argument must be a number");
      return r(a);
    }, o.allocUnsafeSlow = function(a) {
      if (typeof a != "number")
        throw new TypeError("Argument must be a number");
      return e.SlowBuffer(a);
    };
  }(wo, wo.exports)), wo.exports;
}
var Ml;
function jl() {
  if (Ml) return Jc;
  Ml = 1;
  var n = l2().Buffer, t = n.isEncoding || function(A) {
    switch (A = "" + A, A && A.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return !0;
      default:
        return !1;
    }
  };
  function e(A) {
    if (!A) return "utf8";
    for (var R; ; )
      switch (A) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return A;
        default:
          if (R) return;
          A = ("" + A).toLowerCase(), R = !0;
      }
  }
  function r(A) {
    var R = e(A);
    if (typeof R != "string" && (n.isEncoding === t || !t(A))) throw new Error("Unknown encoding: " + A);
    return R || A;
  }
  Jc.StringDecoder = i;
  function i(A) {
    this.encoding = r(A);
    var R;
    switch (this.encoding) {
      case "utf16le":
        this.text = g, this.end = y, R = 4;
        break;
      case "utf8":
        this.fillLast = _, R = 4;
        break;
      case "base64":
        this.text = B, this.end = I, R = 3;
        break;
      default:
        this.write = S, this.end = T;
        return;
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(R);
  }
  i.prototype.write = function(A) {
    if (A.length === 0) return "";
    var R, P;
    if (this.lastNeed) {
      if (R = this.fillLast(A), R === void 0) return "";
      P = this.lastNeed, this.lastNeed = 0;
    } else
      P = 0;
    return P < A.length ? R ? R + this.text(A, P) : this.text(A, P) : R || "";
  }, i.prototype.end = f, i.prototype.text = l, i.prototype.fillLast = function(A) {
    if (this.lastNeed <= A.length)
      return A.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    A.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, A.length), this.lastNeed -= A.length;
  };
  function o(A) {
    return A <= 127 ? 0 : A >> 5 === 6 ? 2 : A >> 4 === 14 ? 3 : A >> 3 === 30 ? 4 : A >> 6 === 2 ? -1 : -2;
  }
  function a(A, R, P) {
    var z = R.length - 1;
    if (z < P) return 0;
    var k = o(R[z]);
    return k >= 0 ? (k > 0 && (A.lastNeed = k - 1), k) : --z < P || k === -2 ? 0 : (k = o(R[z]), k >= 0 ? (k > 0 && (A.lastNeed = k - 2), k) : --z < P || k === -2 ? 0 : (k = o(R[z]), k >= 0 ? (k > 0 && (k === 2 ? k = 0 : A.lastNeed = k - 3), k) : 0));
  }
  function u(A, R, P) {
    if ((R[0] & 192) !== 128)
      return A.lastNeed = 0, "�";
    if (A.lastNeed > 1 && R.length > 1) {
      if ((R[1] & 192) !== 128)
        return A.lastNeed = 1, "�";
      if (A.lastNeed > 2 && R.length > 2 && (R[2] & 192) !== 128)
        return A.lastNeed = 2, "�";
    }
  }
  function _(A) {
    var R = this.lastTotal - this.lastNeed, P = u(this, A);
    if (P !== void 0) return P;
    if (this.lastNeed <= A.length)
      return A.copy(this.lastChar, R, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    A.copy(this.lastChar, R, 0, A.length), this.lastNeed -= A.length;
  }
  function l(A, R) {
    var P = a(this, A, R);
    if (!this.lastNeed) return A.toString("utf8", R);
    this.lastTotal = P;
    var z = A.length - (P - this.lastNeed);
    return A.copy(this.lastChar, 0, z), A.toString("utf8", R, z);
  }
  function f(A) {
    var R = A && A.length ? this.write(A) : "";
    return this.lastNeed ? R + "�" : R;
  }
  function g(A, R) {
    if ((A.length - R) % 2 === 0) {
      var P = A.toString("utf16le", R);
      if (P) {
        var z = P.charCodeAt(P.length - 1);
        if (z >= 55296 && z <= 56319)
          return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = A[A.length - 2], this.lastChar[1] = A[A.length - 1], P.slice(0, -1);
      }
      return P;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = A[A.length - 1], A.toString("utf16le", R, A.length - 1);
  }
  function y(A) {
    var R = A && A.length ? this.write(A) : "";
    if (this.lastNeed) {
      var P = this.lastTotal - this.lastNeed;
      return R + this.lastChar.toString("utf16le", 0, P);
    }
    return R;
  }
  function B(A, R) {
    var P = (A.length - R) % 3;
    return P === 0 ? A.toString("base64", R) : (this.lastNeed = 3 - P, this.lastTotal = 3, P === 1 ? this.lastChar[0] = A[A.length - 1] : (this.lastChar[0] = A[A.length - 2], this.lastChar[1] = A[A.length - 1]), A.toString("base64", R, A.length - P));
  }
  function I(A) {
    var R = A && A.length ? this.write(A) : "";
    return this.lastNeed ? R + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : R;
  }
  function S(A) {
    return A.toString(this.encoding);
  }
  function T(A) {
    return A && A.length ? this.write(A) : "";
  }
  return Jc;
}
var $c, Gl;
function c_() {
  if (Gl) return $c;
  Gl = 1;
  var n = ys().codes.ERR_STREAM_PREMATURE_CLOSE;
  function t(o) {
    var a = !1;
    return function() {
      if (!a) {
        a = !0;
        for (var u = arguments.length, _ = new Array(u), l = 0; l < u; l++)
          _[l] = arguments[l];
        o.apply(this, _);
      }
    };
  }
  function e() {
  }
  function r(o) {
    return o.setHeader && typeof o.abort == "function";
  }
  function i(o, a, u) {
    if (typeof a == "function") return i(o, null, a);
    a || (a = {}), u = t(u || e);
    var _ = a.readable || a.readable !== !1 && o.readable, l = a.writable || a.writable !== !1 && o.writable, f = function() {
      o.writable || y();
    }, g = o._writableState && o._writableState.finished, y = function() {
      l = !1, g = !0, _ || u.call(o);
    }, B = o._readableState && o._readableState.endEmitted, I = function() {
      _ = !1, B = !0, l || u.call(o);
    }, S = function(P) {
      u.call(o, P);
    }, T = function() {
      var P;
      if (_ && !B)
        return (!o._readableState || !o._readableState.ended) && (P = new n()), u.call(o, P);
      if (l && !g)
        return (!o._writableState || !o._writableState.ended) && (P = new n()), u.call(o, P);
    }, A = function() {
      o.req.on("finish", y);
    };
    return r(o) ? (o.on("complete", y), o.on("abort", T), o.req ? A() : o.on("request", A)) : l && !o._writableState && (o.on("end", f), o.on("close", f)), o.on("end", I), o.on("finish", y), a.error !== !1 && o.on("error", S), o.on("close", T), function() {
      o.removeListener("complete", y), o.removeListener("abort", T), o.removeListener("request", A), o.req && o.req.removeListener("finish", y), o.removeListener("end", f), o.removeListener("close", f), o.removeListener("finish", y), o.removeListener("end", I), o.removeListener("error", S), o.removeListener("close", T);
    };
  }
  return $c = i, $c;
}
var Yc, Hl;
function h2() {
  if (Hl) return Yc;
  Hl = 1;
  var n;
  function t(P, z, k) {
    return z = e(z), z in P ? Object.defineProperty(P, z, { value: k, enumerable: !0, configurable: !0, writable: !0 }) : P[z] = k, P;
  }
  function e(P) {
    var z = r(P, "string");
    return typeof z == "symbol" ? z : String(z);
  }
  function r(P, z) {
    if (typeof P != "object" || P === null) return P;
    var k = P[Symbol.toPrimitive];
    if (k !== void 0) {
      var C = k.call(P, z);
      if (typeof C != "object") return C;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (z === "string" ? String : Number)(P);
  }
  var i = c_(), o = Symbol("lastResolve"), a = Symbol("lastReject"), u = Symbol("error"), _ = Symbol("ended"), l = Symbol("lastPromise"), f = Symbol("handlePromise"), g = Symbol("stream");
  function y(P, z) {
    return {
      value: P,
      done: z
    };
  }
  function B(P) {
    var z = P[o];
    if (z !== null) {
      var k = P[g].read();
      k !== null && (P[l] = null, P[o] = null, P[a] = null, z(y(k, !1)));
    }
  }
  function I(P) {
    Ct.nextTick(B, P);
  }
  function S(P, z) {
    return function(k, C) {
      P.then(function() {
        if (z[_]) {
          k(y(void 0, !0));
          return;
        }
        z[f](k, C);
      }, C);
    };
  }
  var T = Object.getPrototypeOf(function() {
  }), A = Object.setPrototypeOf((n = {
    get stream() {
      return this[g];
    },
    next: function() {
      var z = this, k = this[u];
      if (k !== null)
        return Promise.reject(k);
      if (this[_])
        return Promise.resolve(y(void 0, !0));
      if (this[g].destroyed)
        return new Promise(function(Y, Z) {
          Ct.nextTick(function() {
            z[u] ? Z(z[u]) : Y(y(void 0, !0));
          });
        });
      var C = this[l], N;
      if (C)
        N = new Promise(S(C, this));
      else {
        var D = this[g].read();
        if (D !== null)
          return Promise.resolve(y(D, !1));
        N = new Promise(this[f]);
      }
      return this[l] = N, N;
    }
  }, t(n, Symbol.asyncIterator, function() {
    return this;
  }), t(n, "return", function() {
    var z = this;
    return new Promise(function(k, C) {
      z[g].destroy(null, function(N) {
        if (N) {
          C(N);
          return;
        }
        k(y(void 0, !0));
      });
    });
  }), n), T), R = function(z) {
    var k, C = Object.create(A, (k = {}, t(k, g, {
      value: z,
      writable: !0
    }), t(k, o, {
      value: null,
      writable: !0
    }), t(k, a, {
      value: null,
      writable: !0
    }), t(k, u, {
      value: null,
      writable: !0
    }), t(k, _, {
      value: z._readableState.endEmitted,
      writable: !0
    }), t(k, f, {
      value: function(D, Y) {
        var Z = C[g].read();
        Z ? (C[l] = null, C[o] = null, C[a] = null, D(y(Z, !1))) : (C[o] = D, C[a] = Y);
      },
      writable: !0
    }), k));
    return C[l] = null, i(z, function(N) {
      if (N && N.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var D = C[a];
        D !== null && (C[l] = null, C[o] = null, C[a] = null, D(N)), C[u] = N;
        return;
      }
      var Y = C[o];
      Y !== null && (C[l] = null, C[o] = null, C[a] = null, Y(y(void 0, !0))), C[_] = !0;
    }), z.on("readable", I.bind(null, C)), C;
  };
  return Yc = R, Yc;
}
var Zc, Vl;
function p2() {
  return Vl || (Vl = 1, Zc = function() {
    throw new Error("Readable.from is not available in the browser");
  }), Zc;
}
var Xc, ql;
function bg() {
  if (ql) return Xc;
  ql = 1, Xc = Y;
  var n;
  Y.ReadableState = D, ng().EventEmitter;
  var t = function(x, et) {
    return x.listeners(et).length;
  }, e = ig(), r = Xo().Buffer, i = (typeof li < "u" ? li : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function o(v) {
    return r.from(v);
  }
  function a(v) {
    return r.isBuffer(v) || v instanceof i;
  }
  var u = wg(), _;
  u && u.debuglog ? _ = u.debuglog("stream") : _ = function() {
  };
  var l = _2(), f = dg(), g = gg(), y = g.getHighWaterMark, B = ys().codes, I = B.ERR_INVALID_ARG_TYPE, S = B.ERR_STREAM_PUSH_AFTER_EOF, T = B.ERR_METHOD_NOT_IMPLEMENTED, A = B.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, R, P, z;
  gs()(Y, e);
  var k = f.errorOrDestroy, C = ["error", "close", "destroy", "pause", "resume"];
  function N(v, x, et) {
    if (typeof v.prependListener == "function") return v.prependListener(x, et);
    !v._events || !v._events[x] ? v.on(x, et) : Array.isArray(v._events[x]) ? v._events[x].unshift(et) : v._events[x] = [et, v._events[x]];
  }
  function D(v, x, et) {
    n = n || fs(), v = v || {}, typeof et != "boolean" && (et = x instanceof n), this.objectMode = !!v.objectMode, et && (this.objectMode = this.objectMode || !!v.readableObjectMode), this.highWaterMark = y(this, v, "readableHighWaterMark", et), this.buffer = new l(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = v.emitClose !== !1, this.autoDestroy = !!v.autoDestroy, this.destroyed = !1, this.defaultEncoding = v.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, v.encoding && (R || (R = jl().StringDecoder), this.decoder = new R(v.encoding), this.encoding = v.encoding);
  }
  function Y(v) {
    if (n = n || fs(), !(this instanceof Y)) return new Y(v);
    var x = this instanceof n;
    this._readableState = new D(v, this, x), this.readable = !0, v && (typeof v.read == "function" && (this._read = v.read), typeof v.destroy == "function" && (this._destroy = v.destroy)), e.call(this);
  }
  Object.defineProperty(Y.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 ? !1 : this._readableState.destroyed;
    },
    set: function(x) {
      this._readableState && (this._readableState.destroyed = x);
    }
  }), Y.prototype.destroy = f.destroy, Y.prototype._undestroy = f.undestroy, Y.prototype._destroy = function(v, x) {
    x(v);
  }, Y.prototype.push = function(v, x) {
    var et = this._readableState, lt;
    return et.objectMode ? lt = !0 : typeof v == "string" && (x = x || et.defaultEncoding, x !== et.encoding && (v = r.from(v, x), x = ""), lt = !0), Z(this, v, x, !1, lt);
  }, Y.prototype.unshift = function(v) {
    return Z(this, v, null, !0, !1);
  };
  function Z(v, x, et, lt, St) {
    _("readableAddChunk", x);
    var yt = v._readableState;
    if (x === null)
      yt.reading = !1, wt(v, yt);
    else {
      var Pt;
      if (St || (Pt = L(yt, x)), Pt)
        k(v, Pt);
      else if (yt.objectMode || x && x.length > 0)
        if (typeof x != "string" && !yt.objectMode && Object.getPrototypeOf(x) !== r.prototype && (x = o(x)), lt)
          yt.endEmitted ? k(v, new A()) : ft(v, yt, x, !0);
        else if (yt.ended)
          k(v, new S());
        else {
          if (yt.destroyed)
            return !1;
          yt.reading = !1, yt.decoder && !et ? (x = yt.decoder.write(x), yt.objectMode || x.length !== 0 ? ft(v, yt, x, !1) : vt(v, yt)) : ft(v, yt, x, !1);
        }
      else lt || (yt.reading = !1, vt(v, yt));
    }
    return !yt.ended && (yt.length < yt.highWaterMark || yt.length === 0);
  }
  function ft(v, x, et, lt) {
    x.flowing && x.length === 0 && !x.sync ? (x.awaitDrain = 0, v.emit("data", et)) : (x.length += x.objectMode ? 1 : et.length, lt ? x.buffer.unshift(et) : x.buffer.push(et), x.needReadable && Et(v)), vt(v, x);
  }
  function L(v, x) {
    var et;
    return !a(x) && typeof x != "string" && x !== void 0 && !v.objectMode && (et = new I("chunk", ["string", "Buffer", "Uint8Array"], x)), et;
  }
  Y.prototype.isPaused = function() {
    return this._readableState.flowing === !1;
  }, Y.prototype.setEncoding = function(v) {
    R || (R = jl().StringDecoder);
    var x = new R(v);
    this._readableState.decoder = x, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var et = this._readableState.buffer.head, lt = ""; et !== null; )
      lt += x.write(et.data), et = et.next;
    return this._readableState.buffer.clear(), lt !== "" && this._readableState.buffer.push(lt), this._readableState.length = lt.length, this;
  };
  var At = 1073741824;
  function Rt(v) {
    return v >= At ? v = At : (v--, v |= v >>> 1, v |= v >>> 2, v |= v >>> 4, v |= v >>> 8, v |= v >>> 16, v++), v;
  }
  function at(v, x) {
    return v <= 0 || x.length === 0 && x.ended ? 0 : x.objectMode ? 1 : v !== v ? x.flowing && x.length ? x.buffer.head.data.length : x.length : (v > x.highWaterMark && (x.highWaterMark = Rt(v)), v <= x.length ? v : x.ended ? x.length : (x.needReadable = !0, 0));
  }
  Y.prototype.read = function(v) {
    _("read", v), v = parseInt(v, 10);
    var x = this._readableState, et = v;
    if (v !== 0 && (x.emittedReadable = !1), v === 0 && x.needReadable && ((x.highWaterMark !== 0 ? x.length >= x.highWaterMark : x.length > 0) || x.ended))
      return _("read: emitReadable", x.length, x.ended), x.length === 0 && x.ended ? tt(this) : Et(this), null;
    if (v = at(v, x), v === 0 && x.ended)
      return x.length === 0 && tt(this), null;
    var lt = x.needReadable;
    _("need readable", lt), (x.length === 0 || x.length - v < x.highWaterMark) && (lt = !0, _("length less than watermark", lt)), x.ended || x.reading ? (lt = !1, _("reading or ended", lt)) : lt && (_("do read"), x.reading = !0, x.sync = !0, x.length === 0 && (x.needReadable = !0), this._read(x.highWaterMark), x.sync = !1, x.reading || (v = at(et, x)));
    var St;
    return v > 0 ? St = M(v, x) : St = null, St === null ? (x.needReadable = x.length <= x.highWaterMark, v = 0) : (x.length -= v, x.awaitDrain = 0), x.length === 0 && (x.ended || (x.needReadable = !0), et !== v && x.ended && tt(this)), St !== null && this.emit("data", St), St;
  };
  function wt(v, x) {
    if (_("onEofChunk"), !x.ended) {
      if (x.decoder) {
        var et = x.decoder.end();
        et && et.length && (x.buffer.push(et), x.length += x.objectMode ? 1 : et.length);
      }
      x.ended = !0, x.sync ? Et(v) : (x.needReadable = !1, x.emittedReadable || (x.emittedReadable = !0, xt(v)));
    }
  }
  function Et(v) {
    var x = v._readableState;
    _("emitReadable", x.needReadable, x.emittedReadable), x.needReadable = !1, x.emittedReadable || (_("emitReadable", x.flowing), x.emittedReadable = !0, Ct.nextTick(xt, v));
  }
  function xt(v) {
    var x = v._readableState;
    _("emitReadable_", x.destroyed, x.length, x.ended), !x.destroyed && (x.length || x.ended) && (v.emit("readable"), x.emittedReadable = !1), x.needReadable = !x.flowing && !x.ended && x.length <= x.highWaterMark, G(v);
  }
  function vt(v, x) {
    x.readingMore || (x.readingMore = !0, Ct.nextTick(Bt, v, x));
  }
  function Bt(v, x) {
    for (; !x.reading && !x.ended && (x.length < x.highWaterMark || x.flowing && x.length === 0); ) {
      var et = x.length;
      if (_("maybeReadMore read 0"), v.read(0), et === x.length)
        break;
    }
    x.readingMore = !1;
  }
  Y.prototype._read = function(v) {
    k(this, new T("_read()"));
  }, Y.prototype.pipe = function(v, x) {
    var et = this, lt = this._readableState;
    switch (lt.pipesCount) {
      case 0:
        lt.pipes = v;
        break;
      case 1:
        lt.pipes = [lt.pipes, v];
        break;
      default:
        lt.pipes.push(v);
        break;
    }
    lt.pipesCount += 1, _("pipe count=%d opts=%j", lt.pipesCount, x);
    var St = (!x || x.end !== !1) && v !== Ct.stdout && v !== Ct.stderr, yt = St ? he : Ee;
    lt.endEmitted ? Ct.nextTick(yt) : et.once("end", yt), v.on("unpipe", Pt);
    function Pt(Se, ae) {
      _("onunpipe"), Se === et && ae && ae.hasUnpiped === !1 && (ae.hasUnpiped = !0, we());
    }
    function he() {
      _("onend"), v.end();
    }
    var it = jt(et);
    v.on("drain", it);
    var pe = !1;
    function we() {
      _("cleanup"), v.removeListener("close", de), v.removeListener("finish", fe), v.removeListener("drain", it), v.removeListener("error", Qt), v.removeListener("unpipe", Pt), et.removeListener("end", he), et.removeListener("end", Ee), et.removeListener("data", Gt), pe = !0, lt.awaitDrain && (!v._writableState || v._writableState.needDrain) && it();
    }
    et.on("data", Gt);
    function Gt(Se) {
      _("ondata");
      var ae = v.write(Se);
      _("dest.write", ae), ae === !1 && ((lt.pipesCount === 1 && lt.pipes === v || lt.pipesCount > 1 && ut(lt.pipes, v) !== -1) && !pe && (_("false write response, pause", lt.awaitDrain), lt.awaitDrain++), et.pause());
    }
    function Qt(Se) {
      _("onerror", Se), Ee(), v.removeListener("error", Qt), t(v, "error") === 0 && k(v, Se);
    }
    N(v, "error", Qt);
    function de() {
      v.removeListener("finish", fe), Ee();
    }
    v.once("close", de);
    function fe() {
      _("onfinish"), v.removeListener("close", de), Ee();
    }
    v.once("finish", fe);
    function Ee() {
      _("unpipe"), et.unpipe(v);
    }
    return v.emit("pipe", et), lt.flowing || (_("pipe resume"), et.resume()), v;
  };
  function jt(v) {
    return function() {
      var et = v._readableState;
      _("pipeOnDrain", et.awaitDrain), et.awaitDrain && et.awaitDrain--, et.awaitDrain === 0 && t(v, "data") && (et.flowing = !0, G(v));
    };
  }
  Y.prototype.unpipe = function(v) {
    var x = this._readableState, et = {
      hasUnpiped: !1
    };
    if (x.pipesCount === 0) return this;
    if (x.pipesCount === 1)
      return v && v !== x.pipes ? this : (v || (v = x.pipes), x.pipes = null, x.pipesCount = 0, x.flowing = !1, v && v.emit("unpipe", this, et), this);
    if (!v) {
      var lt = x.pipes, St = x.pipesCount;
      x.pipes = null, x.pipesCount = 0, x.flowing = !1;
      for (var yt = 0; yt < St; yt++) lt[yt].emit("unpipe", this, {
        hasUnpiped: !1
      });
      return this;
    }
    var Pt = ut(x.pipes, v);
    return Pt === -1 ? this : (x.pipes.splice(Pt, 1), x.pipesCount -= 1, x.pipesCount === 1 && (x.pipes = x.pipes[0]), v.emit("unpipe", this, et), this);
  }, Y.prototype.on = function(v, x) {
    var et = e.prototype.on.call(this, v, x), lt = this._readableState;
    return v === "data" ? (lt.readableListening = this.listenerCount("readable") > 0, lt.flowing !== !1 && this.resume()) : v === "readable" && !lt.endEmitted && !lt.readableListening && (lt.readableListening = lt.needReadable = !0, lt.flowing = !1, lt.emittedReadable = !1, _("on readable", lt.length, lt.reading), lt.length ? Et(this) : lt.reading || Ct.nextTick(X, this)), et;
  }, Y.prototype.addListener = Y.prototype.on, Y.prototype.removeListener = function(v, x) {
    var et = e.prototype.removeListener.call(this, v, x);
    return v === "readable" && Ct.nextTick(W, this), et;
  }, Y.prototype.removeAllListeners = function(v) {
    var x = e.prototype.removeAllListeners.apply(this, arguments);
    return (v === "readable" || v === void 0) && Ct.nextTick(W, this), x;
  };
  function W(v) {
    var x = v._readableState;
    x.readableListening = v.listenerCount("readable") > 0, x.resumeScheduled && !x.paused ? x.flowing = !0 : v.listenerCount("data") > 0 && v.resume();
  }
  function X(v) {
    _("readable nexttick read 0"), v.read(0);
  }
  Y.prototype.resume = function() {
    var v = this._readableState;
    return v.flowing || (_("resume"), v.flowing = !v.readableListening, nt(this, v)), v.paused = !1, this;
  };
  function nt(v, x) {
    x.resumeScheduled || (x.resumeScheduled = !0, Ct.nextTick(dt, v, x));
  }
  function dt(v, x) {
    _("resume", x.reading), x.reading || v.read(0), x.resumeScheduled = !1, v.emit("resume"), G(v), x.flowing && !x.reading && v.read(0);
  }
  Y.prototype.pause = function() {
    return _("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (_("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
  };
  function G(v) {
    var x = v._readableState;
    for (_("flow", x.flowing); x.flowing && v.read() !== null; ) ;
  }
  Y.prototype.wrap = function(v) {
    var x = this, et = this._readableState, lt = !1;
    v.on("end", function() {
      if (_("wrapped end"), et.decoder && !et.ended) {
        var Pt = et.decoder.end();
        Pt && Pt.length && x.push(Pt);
      }
      x.push(null);
    }), v.on("data", function(Pt) {
      if (_("wrapped data"), et.decoder && (Pt = et.decoder.write(Pt)), !(et.objectMode && Pt == null) && !(!et.objectMode && (!Pt || !Pt.length))) {
        var he = x.push(Pt);
        he || (lt = !0, v.pause());
      }
    });
    for (var St in v)
      this[St] === void 0 && typeof v[St] == "function" && (this[St] = /* @__PURE__ */ function(he) {
        return function() {
          return v[he].apply(v, arguments);
        };
      }(St));
    for (var yt = 0; yt < C.length; yt++)
      v.on(C[yt], this.emit.bind(this, C[yt]));
    return this._read = function(Pt) {
      _("wrapped _read", Pt), lt && (lt = !1, v.resume());
    }, this;
  }, typeof Symbol == "function" && (Y.prototype[Symbol.asyncIterator] = function() {
    return P === void 0 && (P = h2()), P(this);
  }), Object.defineProperty(Y.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), Object.defineProperty(Y.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState && this._readableState.buffer;
    }
  }), Object.defineProperty(Y.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.flowing;
    },
    set: function(x) {
      this._readableState && (this._readableState.flowing = x);
    }
  }), Y._fromList = M, Object.defineProperty(Y.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.length;
    }
  });
  function M(v, x) {
    if (x.length === 0) return null;
    var et;
    return x.objectMode ? et = x.buffer.shift() : !v || v >= x.length ? (x.decoder ? et = x.buffer.join("") : x.buffer.length === 1 ? et = x.buffer.first() : et = x.buffer.concat(x.length), x.buffer.clear()) : et = x.buffer.consume(v, x.decoder), et;
  }
  function tt(v) {
    var x = v._readableState;
    _("endReadable", x.endEmitted), x.endEmitted || (x.ended = !0, Ct.nextTick(ct, x, v));
  }
  function ct(v, x) {
    if (_("endReadableNT", v.endEmitted, v.length), !v.endEmitted && v.length === 0 && (v.endEmitted = !0, x.readable = !1, x.emit("end"), v.autoDestroy)) {
      var et = x._writableState;
      (!et || et.autoDestroy && et.finished) && x.destroy();
    }
  }
  typeof Symbol == "function" && (Y.from = function(v, x) {
    return z === void 0 && (z = p2()), z(Y, v, x);
  });
  function ut(v, x) {
    for (var et = 0, lt = v.length; et < lt; et++)
      if (v[et] === x) return et;
    return -1;
  }
  return Xc;
}
var tu, Ql;
function mg() {
  if (Ql) return tu;
  Ql = 1, tu = u;
  var n = ys().codes, t = n.ERR_METHOD_NOT_IMPLEMENTED, e = n.ERR_MULTIPLE_CALLBACK, r = n.ERR_TRANSFORM_ALREADY_TRANSFORMING, i = n.ERR_TRANSFORM_WITH_LENGTH_0, o = fs();
  gs()(u, o);
  function a(f, g) {
    var y = this._transformState;
    y.transforming = !1;
    var B = y.writecb;
    if (B === null)
      return this.emit("error", new e());
    y.writechunk = null, y.writecb = null, g != null && this.push(g), B(f);
    var I = this._readableState;
    I.reading = !1, (I.needReadable || I.length < I.highWaterMark) && this._read(I.highWaterMark);
  }
  function u(f) {
    if (!(this instanceof u)) return new u(f);
    o.call(this, f), this._transformState = {
      afterTransform: a.bind(this),
      needTransform: !1,
      transforming: !1,
      writecb: null,
      writechunk: null,
      writeencoding: null
    }, this._readableState.needReadable = !0, this._readableState.sync = !1, f && (typeof f.transform == "function" && (this._transform = f.transform), typeof f.flush == "function" && (this._flush = f.flush)), this.on("prefinish", _);
  }
  function _() {
    var f = this;
    typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(g, y) {
      l(f, g, y);
    }) : l(this, null, null);
  }
  u.prototype.push = function(f, g) {
    return this._transformState.needTransform = !1, o.prototype.push.call(this, f, g);
  }, u.prototype._transform = function(f, g, y) {
    y(new t("_transform()"));
  }, u.prototype._write = function(f, g, y) {
    var B = this._transformState;
    if (B.writecb = y, B.writechunk = f, B.writeencoding = g, !B.transforming) {
      var I = this._readableState;
      (B.needTransform || I.needReadable || I.length < I.highWaterMark) && this._read(I.highWaterMark);
    }
  }, u.prototype._read = function(f) {
    var g = this._transformState;
    g.writechunk !== null && !g.transforming ? (g.transforming = !0, this._transform(g.writechunk, g.writeencoding, g.afterTransform)) : g.needTransform = !0;
  }, u.prototype._destroy = function(f, g) {
    o.prototype._destroy.call(this, f, function(y) {
      g(y);
    });
  };
  function l(f, g, y) {
    if (g) return f.emit("error", g);
    if (y != null && f.push(y), f._writableState.length) throw new i();
    if (f._transformState.transforming) throw new r();
    return f.push(null);
  }
  return tu;
}
var eu, Kl;
function w2() {
  if (Kl) return eu;
  Kl = 1, eu = t;
  var n = mg();
  gs()(t, n);
  function t(e) {
    if (!(this instanceof t)) return new t(e);
    n.call(this, e);
  }
  return t.prototype._transform = function(e, r, i) {
    i(null, e);
  }, eu;
}
var ru, Wl;
function d2() {
  if (Wl) return ru;
  Wl = 1;
  var n;
  function t(y) {
    var B = !1;
    return function() {
      B || (B = !0, y.apply(void 0, arguments));
    };
  }
  var e = ys().codes, r = e.ERR_MISSING_ARGS, i = e.ERR_STREAM_DESTROYED;
  function o(y) {
    if (y) throw y;
  }
  function a(y) {
    return y.setHeader && typeof y.abort == "function";
  }
  function u(y, B, I, S) {
    S = t(S);
    var T = !1;
    y.on("close", function() {
      T = !0;
    }), n === void 0 && (n = c_()), n(y, {
      readable: B,
      writable: I
    }, function(R) {
      if (R) return S(R);
      T = !0, S();
    });
    var A = !1;
    return function(R) {
      if (!T && !A) {
        if (A = !0, a(y)) return y.abort();
        if (typeof y.destroy == "function") return y.destroy();
        S(R || new i("pipe"));
      }
    };
  }
  function _(y) {
    y();
  }
  function l(y, B) {
    return y.pipe(B);
  }
  function f(y) {
    return !y.length || typeof y[y.length - 1] != "function" ? o : y.pop();
  }
  function g() {
    for (var y = arguments.length, B = new Array(y), I = 0; I < y; I++)
      B[I] = arguments[I];
    var S = f(B);
    if (Array.isArray(B[0]) && (B = B[0]), B.length < 2)
      throw new r("streams");
    var T, A = B.map(function(R, P) {
      var z = P < B.length - 1, k = P > 0;
      return u(R, z, k, function(C) {
        T || (T = C), C && A.forEach(_), !z && (A.forEach(_), S(T));
      });
    });
    return B.reduce(l);
  }
  return ru = g, ru;
}
var Jl;
function Ag() {
  return Jl || (Jl = 1, function(n, t) {
    t = n.exports = bg(), t.Stream = t, t.Readable = t, t.Writable = yg(), t.Duplex = fs(), t.Transform = mg(), t.PassThrough = w2(), t.finished = c_(), t.pipeline = d2();
  }(lo, lo.exports)), lo.exports;
}
var nu, $l;
function g2() {
  if ($l) return nu;
  $l = 1;
  const { Transform: n } = Ag();
  return nu = (t) => class Eg extends n {
    constructor(r, i, o, a, u) {
      super(u), this._rate = r, this._capacity = i, this._delimitedSuffix = o, this._hashBitLength = a, this._options = u, this._state = new t(), this._state.initialize(r, i), this._finalized = !1;
    }
    _transform(r, i, o) {
      let a = null;
      try {
        this.update(r, i);
      } catch (u) {
        a = u;
      }
      o(a);
    }
    _flush(r) {
      let i = null;
      try {
        this.push(this.digest());
      } catch (o) {
        i = o;
      }
      r(i);
    }
    update(r, i) {
      if (!Ye.isBuffer(r) && typeof r != "string") throw new TypeError("Data must be a string or a buffer");
      if (this._finalized) throw new Error("Digest already called");
      return Ye.isBuffer(r) || (r = Ye.from(r, i)), this._state.absorb(r), this;
    }
    digest(r) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = !0, this._delimitedSuffix && this._state.absorbLastFewBits(this._delimitedSuffix);
      let i = this._state.squeeze(this._hashBitLength / 8);
      return r !== void 0 && (i = i.toString(r)), this._resetState(), i;
    }
    // remove result from memory
    _resetState() {
      return this._state.initialize(this._rate, this._capacity), this;
    }
    // because sometimes we need hash right now and little later
    _clone() {
      const r = new Eg(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
      return this._state.copy(r._state), r._finalized = this._finalized, r;
    }
  }, nu;
}
var iu, Yl;
function y2() {
  if (Yl) return iu;
  Yl = 1;
  const { Transform: n } = Ag();
  return iu = (t) => class vg extends n {
    constructor(r, i, o, a) {
      super(a), this._rate = r, this._capacity = i, this._delimitedSuffix = o, this._options = a, this._state = new t(), this._state.initialize(r, i), this._finalized = !1;
    }
    _transform(r, i, o) {
      let a = null;
      try {
        this.update(r, i);
      } catch (u) {
        a = u;
      }
      o(a);
    }
    _flush() {
    }
    _read(r) {
      this.push(this.squeeze(r));
    }
    update(r, i) {
      if (!Ye.isBuffer(r) && typeof r != "string") throw new TypeError("Data must be a string or a buffer");
      if (this._finalized) throw new Error("Squeeze already called");
      return Ye.isBuffer(r) || (r = Ye.from(r, i)), this._state.absorb(r), this;
    }
    squeeze(r, i) {
      this._finalized || (this._finalized = !0, this._state.absorbLastFewBits(this._delimitedSuffix));
      let o = this._state.squeeze(r);
      return i !== void 0 && (o = o.toString(i)), o;
    }
    _resetState() {
      return this._state.initialize(this._rate, this._capacity), this;
    }
    _clone() {
      const r = new vg(this._rate, this._capacity, this._delimitedSuffix, this._options);
      return this._state.copy(r._state), r._finalized = this._finalized, r;
    }
  }, iu;
}
var su, Zl;
function b2() {
  if (Zl) return su;
  Zl = 1;
  const n = g2(), t = y2();
  return su = function(e) {
    const r = n(e), i = t(e);
    return function(o, a) {
      switch (typeof o == "string" ? o.toLowerCase() : o) {
        case "keccak224":
          return new r(1152, 448, null, 224, a);
        case "keccak256":
          return new r(1088, 512, null, 256, a);
        case "keccak384":
          return new r(832, 768, null, 384, a);
        case "keccak512":
          return new r(576, 1024, null, 512, a);
        case "sha3-224":
          return new r(1152, 448, 6, 224, a);
        case "sha3-256":
          return new r(1088, 512, 6, 256, a);
        case "sha3-384":
          return new r(832, 768, 6, 384, a);
        case "sha3-512":
          return new r(576, 1024, 6, 512, a);
        case "shake128":
          return new i(1344, 256, 31, a);
        case "shake256":
          return new i(1088, 512, 31, a);
        default:
          throw new Error("Invald algorithm: " + o);
      }
    };
  }, su;
}
var ou = {}, Xl;
function m2() {
  if (Xl) return ou;
  Xl = 1;
  const n = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  return ou.p1600 = function(t) {
    for (let e = 0; e < 24; ++e) {
      const r = t[0] ^ t[10] ^ t[20] ^ t[30] ^ t[40], i = t[1] ^ t[11] ^ t[21] ^ t[31] ^ t[41], o = t[2] ^ t[12] ^ t[22] ^ t[32] ^ t[42], a = t[3] ^ t[13] ^ t[23] ^ t[33] ^ t[43], u = t[4] ^ t[14] ^ t[24] ^ t[34] ^ t[44], _ = t[5] ^ t[15] ^ t[25] ^ t[35] ^ t[45], l = t[6] ^ t[16] ^ t[26] ^ t[36] ^ t[46], f = t[7] ^ t[17] ^ t[27] ^ t[37] ^ t[47], g = t[8] ^ t[18] ^ t[28] ^ t[38] ^ t[48], y = t[9] ^ t[19] ^ t[29] ^ t[39] ^ t[49];
      let B = g ^ (o << 1 | a >>> 31), I = y ^ (a << 1 | o >>> 31);
      const S = t[0] ^ B, T = t[1] ^ I, A = t[10] ^ B, R = t[11] ^ I, P = t[20] ^ B, z = t[21] ^ I, k = t[30] ^ B, C = t[31] ^ I, N = t[40] ^ B, D = t[41] ^ I;
      B = r ^ (u << 1 | _ >>> 31), I = i ^ (_ << 1 | u >>> 31);
      const Y = t[2] ^ B, Z = t[3] ^ I, ft = t[12] ^ B, L = t[13] ^ I, At = t[22] ^ B, Rt = t[23] ^ I, at = t[32] ^ B, wt = t[33] ^ I, Et = t[42] ^ B, xt = t[43] ^ I;
      B = o ^ (l << 1 | f >>> 31), I = a ^ (f << 1 | l >>> 31);
      const vt = t[4] ^ B, Bt = t[5] ^ I, jt = t[14] ^ B, W = t[15] ^ I, X = t[24] ^ B, nt = t[25] ^ I, dt = t[34] ^ B, G = t[35] ^ I, M = t[44] ^ B, tt = t[45] ^ I;
      B = u ^ (g << 1 | y >>> 31), I = _ ^ (y << 1 | g >>> 31);
      const ct = t[6] ^ B, ut = t[7] ^ I, v = t[16] ^ B, x = t[17] ^ I, et = t[26] ^ B, lt = t[27] ^ I, St = t[36] ^ B, yt = t[37] ^ I, Pt = t[46] ^ B, he = t[47] ^ I;
      B = l ^ (r << 1 | i >>> 31), I = f ^ (i << 1 | r >>> 31);
      const it = t[8] ^ B, pe = t[9] ^ I, we = t[18] ^ B, Gt = t[19] ^ I, Qt = t[28] ^ B, de = t[29] ^ I, fe = t[38] ^ B, Ee = t[39] ^ I, Se = t[48] ^ B, ae = t[49] ^ I, Ne = S, b = T, h = R << 4 | A >>> 28, w = A << 4 | R >>> 28, F = P << 3 | z >>> 29, U = z << 3 | P >>> 29, J = C << 9 | k >>> 23, st = k << 9 | C >>> 23, kt = N << 18 | D >>> 14, Vt = D << 18 | N >>> 14, qt = Y << 1 | Z >>> 31, Kt = Z << 1 | Y >>> 31, Dt = L << 12 | ft >>> 20, ei = ft << 12 | L >>> 20, Pe = At << 10 | Rt >>> 22, pi = Rt << 10 | At >>> 22, ms = wt << 13 | at >>> 19, Le = at << 13 | wt >>> 19, As = Et << 2 | xt >>> 30, m = xt << 2 | Et >>> 30, p = Bt << 30 | vt >>> 2, d = vt << 30 | Bt >>> 2, O = jt << 6 | W >>> 26, H = W << 6 | jt >>> 26, $ = nt << 11 | X >>> 21, ot = X << 11 | nt >>> 21, Ft = dt << 15 | G >>> 17, $t = G << 15 | dt >>> 17, Wt = tt << 29 | M >>> 3, Yt = M << 29 | tt >>> 3, Ht = ct << 28 | ut >>> 4, sa = ut << 28 | ct >>> 4, oa = x << 23 | v >>> 9, aa = v << 23 | x >>> 9, ca = et << 25 | lt >>> 7, ua = lt << 25 | et >>> 7, _a = St << 21 | yt >>> 11, fa = yt << 21 | St >>> 11, la = he << 24 | Pt >>> 8, ha = Pt << 24 | he >>> 8, pa = it << 27 | pe >>> 5, wa = pe << 27 | it >>> 5, da = we << 20 | Gt >>> 12, ga = Gt << 20 | we >>> 12, ya = de << 7 | Qt >>> 25, ba = Qt << 7 | de >>> 25, ma = fe << 8 | Ee >>> 24, Aa = Ee << 8 | fe >>> 24, Ea = Se << 14 | ae >>> 18, va = ae << 14 | Se >>> 18;
      t[0] = Ne ^ ~Dt & $, t[1] = b ^ ~ei & ot, t[10] = Ht ^ ~da & F, t[11] = sa ^ ~ga & U, t[20] = qt ^ ~O & ca, t[21] = Kt ^ ~H & ua, t[30] = pa ^ ~h & Pe, t[31] = wa ^ ~w & pi, t[40] = p ^ ~oa & ya, t[41] = d ^ ~aa & ba, t[2] = Dt ^ ~$ & _a, t[3] = ei ^ ~ot & fa, t[12] = da ^ ~F & ms, t[13] = ga ^ ~U & Le, t[22] = O ^ ~ca & ma, t[23] = H ^ ~ua & Aa, t[32] = h ^ ~Pe & Ft, t[33] = w ^ ~pi & $t, t[42] = oa ^ ~ya & J, t[43] = aa ^ ~ba & st, t[4] = $ ^ ~_a & Ea, t[5] = ot ^ ~fa & va, t[14] = F ^ ~ms & Wt, t[15] = U ^ ~Le & Yt, t[24] = ca ^ ~ma & kt, t[25] = ua ^ ~Aa & Vt, t[34] = Pe ^ ~Ft & la, t[35] = pi ^ ~$t & ha, t[44] = ya ^ ~J & As, t[45] = ba ^ ~st & m, t[6] = _a ^ ~Ea & Ne, t[7] = fa ^ ~va & b, t[16] = ms ^ ~Wt & Ht, t[17] = Le ^ ~Yt & sa, t[26] = ma ^ ~kt & qt, t[27] = Aa ^ ~Vt & Kt, t[36] = Ft ^ ~la & pa, t[37] = $t ^ ~ha & wa, t[46] = J ^ ~As & p, t[47] = st ^ ~m & d, t[8] = Ea ^ ~Ne & Dt, t[9] = va ^ ~b & ei, t[18] = Wt ^ ~Ht & da, t[19] = Yt ^ ~sa & ga, t[28] = kt ^ ~qt & O, t[29] = Vt ^ ~Kt & H, t[38] = la ^ ~pa & h, t[39] = ha ^ ~wa & w, t[48] = As ^ ~p & oa, t[49] = m ^ ~d & aa, t[0] ^= n[e * 2], t[1] ^= n[e * 2 + 1];
    }
  }, ou;
}
var au, th;
function A2() {
  if (th) return au;
  th = 1;
  const n = m2();
  function t() {
    this.state = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ], this.blockSize = null, this.count = 0, this.squeezing = !1;
  }
  return t.prototype.initialize = function(e, r) {
    for (let i = 0; i < 50; ++i) this.state[i] = 0;
    this.blockSize = e / 8, this.count = 0, this.squeezing = !1;
  }, t.prototype.absorb = function(e) {
    for (let r = 0; r < e.length; ++r)
      this.state[~~(this.count / 4)] ^= e[r] << 8 * (this.count % 4), this.count += 1, this.count === this.blockSize && (n.p1600(this.state), this.count = 0);
  }, t.prototype.absorbLastFewBits = function(e) {
    this.state[~~(this.count / 4)] ^= e << 8 * (this.count % 4), (e & 128) !== 0 && this.count === this.blockSize - 1 && n.p1600(this.state), this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4), n.p1600(this.state), this.count = 0, this.squeezing = !0;
  }, t.prototype.squeeze = function(e) {
    this.squeezing || this.absorbLastFewBits(1);
    const r = Ye.alloc(e);
    for (let i = 0; i < e; ++i)
      r[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255, this.count += 1, this.count === this.blockSize && (n.p1600(this.state), this.count = 0);
    return r;
  }, t.prototype.copy = function(e) {
    for (let r = 0; r < 50; ++r) e.state[r] = this.state[r];
    e.blockSize = this.blockSize, e.count = this.count, e.squeezing = this.squeezing;
  }, au = t, au;
}
var cu, eh;
function E2() {
  return eh || (eh = 1, cu = b2()(A2())), cu;
}
var v2 = E2();
const rh = /* @__PURE__ */ Zd(v2);
var Eo = { exports: {} }, x2 = Eo.exports, nh;
function R2() {
  return nh || (nh = 1, function(n, t) {
    (function(e, r) {
      n.exports = r();
    })(x2, function() {
      var e = function(o, a) {
        if (a = a || {}, typeof o != "function")
          throw new i("fetch must be a function");
        if (typeof a != "object")
          throw new i("defaults must be an object");
        if (a.retries !== void 0 && !r(a.retries))
          throw new i("retries must be a positive integer");
        if (a.retryDelay !== void 0 && !r(a.retryDelay) && typeof a.retryDelay != "function")
          throw new i("retryDelay must be a positive integer or a function returning a positive integer");
        if (a.retryOn !== void 0 && !Array.isArray(a.retryOn) && typeof a.retryOn != "function")
          throw new i("retryOn property expects an array or function");
        var u = {
          retries: 3,
          retryDelay: 1e3,
          retryOn: []
        };
        return a = Object.assign(u, a), function(l, f) {
          var g = a.retries, y = a.retryDelay, B = a.retryOn;
          if (f && f.retries !== void 0)
            if (r(f.retries))
              g = f.retries;
            else
              throw new i("retries must be a positive integer");
          if (f && f.retryDelay !== void 0)
            if (r(f.retryDelay) || typeof f.retryDelay == "function")
              y = f.retryDelay;
            else
              throw new i("retryDelay must be a positive integer or a function returning a positive integer");
          if (f && f.retryOn)
            if (Array.isArray(f.retryOn) || typeof f.retryOn == "function")
              B = f.retryOn;
            else
              throw new i("retryOn property expects an array or function");
          return new Promise(function(I, S) {
            var T = function(R) {
              var P = typeof Request < "u" && l instanceof Request ? l.clone() : l;
              o(P, f).then(function(z) {
                if (Array.isArray(B) && B.indexOf(z.status) === -1)
                  I(z);
                else if (typeof B == "function")
                  try {
                    return Promise.resolve(B(R, null, z)).then(function(k) {
                      k ? A(R, null, z) : I(z);
                    }).catch(S);
                  } catch (k) {
                    S(k);
                  }
                else
                  R < g ? A(R, null, z) : I(z);
              }).catch(function(z) {
                if (typeof B == "function")
                  try {
                    Promise.resolve(B(R, z, null)).then(function(k) {
                      k ? A(R, z, null) : S(z);
                    }).catch(function(k) {
                      S(k);
                    });
                  } catch (k) {
                    S(k);
                  }
                else R < g ? A(R, z, null) : S(z);
              });
            };
            function A(R, P, z) {
              var k = typeof y == "function" ? y(R, P, z) : y;
              setTimeout(function() {
                T(++R);
              }, k);
            }
            T(0);
          });
        };
      };
      function r(o) {
        return Number.isInteger(o) && o >= 0;
      }
      function i(o) {
        this.name = "ArgumentError", this.message = o;
      }
      return e;
    });
  }(Eo)), Eo.exports;
}
var z2 = R2();
const B2 = /* @__PURE__ */ Zd(z2), S2 = () => (async (n) => {
  try {
    return typeof MessageChannel < "u" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(n);
  } catch {
    return !1;
  }
})(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
var Co = typeof ns < "u" ? ns : typeof self < "u" ? self : typeof window < "u" ? window : {};
function xg(n, t) {
  return new Promise((e) => {
    n.addEventListener("message", function r({ data: i }) {
      i?.type === t && (n.removeEventListener("message", r), e(i));
    });
  });
}
xg(self, "wasm_bindgen_worker_init").then(async ({ init: n, receiver: t }) => {
  const e = await Promise.resolve().then(function() {
    return N2;
  });
  await e.default(n), postMessage({ type: "wasm_bindgen_worker_ready" }), e.wbg_rayon_start_worker(t);
});
async function P2(n, t, e) {
  if (e.numThreads() === 0)
    throw new Error("num_threads must be > 0.");
  const r = {
    type: "wasm_bindgen_worker_init",
    init: { module_or_path: n, memory: t },
    receiver: e.receiver()
  };
  await Promise.all(
    Array.from({ length: e.numThreads() }, async () => {
      let i;
      try {
        i = new Worker(
          new URL(
            /* @vite-ignore */
            "/workerHelpers.js",
            import.meta.url
          ),
          {
            type: "module"
          }
        );
      } catch {
        const u = await (await fetch("/workerHelpers.js")).blob(), _ = URL.createObjectURL(u);
        i = new Worker(_);
      }
      return i.postMessage(r), await xg(i, "wasm_bindgen_worker_ready"), i;
    })
  ), e.build();
}
let s;
function Ps(n) {
  const t = s.__externref_table_alloc();
  return s.__wbindgen_export_2.set(t, n), t;
}
function Vi(n, t) {
  try {
    return n.apply(this, t);
  } catch (e) {
    const r = Ps(e);
    s.__wbindgen_exn_store(r);
  }
}
const Rg = typeof TextDecoder < "u" ? new TextDecoder("utf-8", { ignoreBOM: !0, fatal: !0 }) : { decode: () => {
  throw Error("TextDecoder not available");
} };
typeof TextDecoder < "u" && Rg.decode();
let ks = null;
function ts() {
  return (ks === null || ks.buffer !== s.memory.buffer) && (ks = new Uint8Array(s.memory.buffer)), ks;
}
function xs(n, t) {
  return n = n >>> 0, Rg.decode(ts().slice(n, n + t));
}
let j = 0;
const zg = typeof TextEncoder < "u" ? new TextEncoder("utf-8") : { encode: () => {
  throw Error("TextEncoder not available");
} }, k2 = function(n, t) {
  const e = zg.encode(n);
  return t.set(e), {
    read: n.length,
    written: e.length
  };
};
function go(n, t, e) {
  if (e === void 0) {
    const u = zg.encode(n), _ = t(u.length, 1) >>> 0;
    return ts().subarray(_, _ + u.length).set(u), j = u.length, _;
  }
  let r = n.length, i = t(r, 1) >>> 0;
  const o = ts();
  let a = 0;
  for (; a < r; a++) {
    const u = n.charCodeAt(a);
    if (u > 127) break;
    o[i + a] = u;
  }
  if (a !== r) {
    a !== 0 && (n = n.slice(a)), i = e(i, r, r = a + n.length * 3, 1) >>> 0;
    const u = ts().subarray(i + a, i + r), _ = k2(n, u);
    a += _.written, i = e(i, r, a, 1) >>> 0;
  }
  return j = a, i;
}
let Fs = null;
function nr() {
  return (Fs === null || Fs.buffer !== s.memory.buffer) && (Fs = new DataView(s.memory.buffer)), Fs;
}
function di(n) {
  return n == null;
}
function Tu(n) {
  const t = typeof n;
  if (t == "number" || t == "boolean" || n == null)
    return `${n}`;
  if (t == "string")
    return `"${n}"`;
  if (t == "symbol") {
    const i = n.description;
    return i == null ? "Symbol" : `Symbol(${i})`;
  }
  if (t == "function") {
    const i = n.name;
    return typeof i == "string" && i.length > 0 ? `Function(${i})` : "Function";
  }
  if (Array.isArray(n)) {
    const i = n.length;
    let o = "[";
    i > 0 && (o += Tu(n[0]));
    for (let a = 1; a < i; a++)
      o += ", " + Tu(n[a]);
    return o += "]", o;
  }
  const e = /\[object ([^\]]+)\]/.exec(toString.call(n));
  let r;
  if (e && e.length > 1)
    r = e[1];
  else
    return toString.call(n);
  if (r == "Object")
    try {
      return "Object(" + JSON.stringify(n) + ")";
    } catch {
      return "Object";
    }
  return n instanceof Error ? `${n.name}: ${n.message}
${n.stack}` : r;
}
function E(n, t) {
  if (!(n instanceof t))
    throw new Error(`expected instance of ${t.name}`);
}
function c(n) {
  const t = s.__wbindgen_export_2.get(n);
  return s.__externref_table_dealloc(n), t;
}
function Q(n, t) {
  return n = n >>> 0, ts().subarray(n / 1, n / 1 + t);
}
function q(n, t) {
  const e = t(n.length * 1, 1) >>> 0;
  return ts().set(n, e / 1), j = n.length, e;
}
function u_() {
  s.init_panic_hook();
}
function __(n) {
  return s.initThreadPool(n);
}
function F2(n) {
  s.wbg_rayon_start_worker(n);
}
const Bg = Object.freeze({
  Proof: 0,
  0: "Proof",
  Verify: 1,
  1: "Verify"
});
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_boolean_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleanciphertext_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleanclientkey_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleancompressedciphertext_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleancompressedserverkey_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleannoisedistribution_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleanparameters_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_booleanpublickey_free(n >>> 0, 1));
const ih = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_compactciphertextlist_free(n >>> 0, 1));
class ui {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ui.prototype);
    return e.__wbg_ptr = t, ih.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ih.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_compactciphertextlist_free(t, 0);
  }
  /**
   * @param {TfheCompactPublicKey} public_key
   * @returns {CompactCiphertextListBuilder}
   */
  static builder(t) {
    E(t, $e);
    const e = s.compactciphertextlist_builder(t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return eo.__wrap(e[0]);
  }
  /**
   * @returns {number}
   */
  len() {
    return s.compactciphertextlist_len(this.__wbg_ptr) >>> 0;
  }
  /**
   * @returns {boolean}
   */
  is_empty() {
    return s.compactciphertextlist_is_empty(this.__wbg_ptr) !== 0;
  }
  /**
   * @param {number} index
   * @returns {FheTypes | undefined}
   */
  get_kind_of(t) {
    const e = s.compactciphertextlist_get_kind_of(this.__wbg_ptr, t);
    return e === 84 ? void 0 : e;
  }
  /**
   * @returns {CompactCiphertextListExpander}
   */
  expand() {
    const t = s.compactciphertextlist_expand(this.__wbg_ptr);
    if (t[2])
      throw c(t[1]);
    return ls.__wrap(t[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.compactciphertextlist_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {CompactCiphertextList}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.compactciphertextlist_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return ui.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.compactciphertextlist_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {CompactCiphertextList}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.compactciphertextlist_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return ui.__wrap(o[0]);
  }
}
const sh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_compactciphertextlistbuilder_free(n >>> 0, 1));
class eo {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(eo.prototype);
    return e.__wbg_ptr = t, sh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, sh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_compactciphertextlistbuilder_free(t, 0);
  }
  /**
   * @param {number} value
   */
  push_u24(t) {
    const e = s.compactciphertextlistbuilder_push_u24(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_u40(t) {
    const e = s.compactciphertextlistbuilder_push_u40(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_u48(t) {
    const e = s.compactciphertextlistbuilder_push_u48(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_u56(t) {
    const e = s.compactciphertextlistbuilder_push_u56(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u2(t) {
    const e = s.compactciphertextlistbuilder_push_u2(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u4(t) {
    const e = s.compactciphertextlistbuilder_push_u4(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u6(t) {
    const e = s.compactciphertextlistbuilder_push_u6(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u8(t) {
    const e = s.compactciphertextlistbuilder_push_u8(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u10(t) {
    const e = s.compactciphertextlistbuilder_push_u10(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u12(t) {
    const e = s.compactciphertextlistbuilder_push_u12(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u14(t) {
    const e = s.compactciphertextlistbuilder_push_u14(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u16(t) {
    const e = s.compactciphertextlistbuilder_push_u16(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_u32(t) {
    const e = s.compactciphertextlistbuilder_push_u32(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_u64(t) {
    const e = s.compactciphertextlistbuilder_push_u64(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i24(t) {
    const e = s.compactciphertextlistbuilder_push_i24(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_i40(t) {
    const e = s.compactciphertextlistbuilder_push_i40(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_i48(t) {
    const e = s.compactciphertextlistbuilder_push_i48(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_i56(t) {
    const e = s.compactciphertextlistbuilder_push_i56(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i2(t) {
    const e = s.compactciphertextlistbuilder_push_i2(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i4(t) {
    const e = s.compactciphertextlistbuilder_push_i4(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i6(t) {
    const e = s.compactciphertextlistbuilder_push_i6(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i8(t) {
    const e = s.compactciphertextlistbuilder_push_i8(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i10(t) {
    const e = s.compactciphertextlistbuilder_push_i10(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i12(t) {
    const e = s.compactciphertextlistbuilder_push_i12(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i14(t) {
    const e = s.compactciphertextlistbuilder_push_i14(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i16(t) {
    const e = s.compactciphertextlistbuilder_push_i16(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {number} value
   */
  push_i32(t) {
    const e = s.compactciphertextlistbuilder_push_i32(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {bigint} value
   */
  push_i64(t) {
    const e = s.compactciphertextlistbuilder_push_i64(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u128(t) {
    const e = s.compactciphertextlistbuilder_push_u128(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u160(t) {
    const e = s.compactciphertextlistbuilder_push_u160(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u256(t) {
    const e = s.compactciphertextlistbuilder_push_u256(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u512(t) {
    const e = s.compactciphertextlistbuilder_push_u512(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u1024(t) {
    const e = s.compactciphertextlistbuilder_push_u1024(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u2048(t) {
    const e = s.compactciphertextlistbuilder_push_u2048(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i128(t) {
    const e = s.compactciphertextlistbuilder_push_i128(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i160(t) {
    const e = s.compactciphertextlistbuilder_push_i160(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i256(t) {
    const e = s.compactciphertextlistbuilder_push_i256(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i512(t) {
    const e = s.compactciphertextlistbuilder_push_i512(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i1024(t) {
    const e = s.compactciphertextlistbuilder_push_i1024(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i2048(t) {
    const e = s.compactciphertextlistbuilder_push_i2048(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {boolean} value
   */
  push_boolean(t) {
    const e = s.compactciphertextlistbuilder_push_boolean(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @returns {CompactCiphertextList}
   */
  build() {
    const t = s.compactciphertextlistbuilder_build(this.__wbg_ptr);
    if (t[2])
      throw c(t[1]);
    return ui.__wrap(t[0]);
  }
  /**
   * @returns {CompactCiphertextList}
   */
  build_packed() {
    const t = s.compactciphertextlistbuilder_build_packed(this.__wbg_ptr);
    if (t[2])
      throw c(t[1]);
    return ui.__wrap(t[0]);
  }
  /**
   * @param {CompactPkeCrs} crs
   * @param {Uint8Array} metadata
   * @param {ZkComputeLoad} compute_load
   * @returns {ProvenCompactCiphertextList}
   */
  build_with_proof_packed(t, e, r) {
    E(t, We);
    const i = q(e, s.__wbindgen_malloc), o = j, a = s.compactciphertextlistbuilder_build_with_proof_packed(this.__wbg_ptr, t.__wbg_ptr, i, o, r);
    if (a[2])
      throw c(a[1]);
    return es.__wrap(a[0]);
  }
  /**
   * @param {any} value
   */
  push_u72(t) {
    const e = s.compactciphertextlistbuilder_push_u72(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u80(t) {
    const e = s.compactciphertextlistbuilder_push_u80(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u88(t) {
    const e = s.compactciphertextlistbuilder_push_u88(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u96(t) {
    const e = s.compactciphertextlistbuilder_push_u96(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u104(t) {
    const e = s.compactciphertextlistbuilder_push_u104(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u112(t) {
    const e = s.compactciphertextlistbuilder_push_u112(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u120(t) {
    const e = s.compactciphertextlistbuilder_push_u120(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u136(t) {
    const e = s.compactciphertextlistbuilder_push_u136(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u144(t) {
    const e = s.compactciphertextlistbuilder_push_u144(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u152(t) {
    const e = s.compactciphertextlistbuilder_push_u152(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u168(t) {
    const e = s.compactciphertextlistbuilder_push_u168(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u176(t) {
    const e = s.compactciphertextlistbuilder_push_u176(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u184(t) {
    const e = s.compactciphertextlistbuilder_push_u184(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u192(t) {
    const e = s.compactciphertextlistbuilder_push_u192(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u200(t) {
    const e = s.compactciphertextlistbuilder_push_u200(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u208(t) {
    const e = s.compactciphertextlistbuilder_push_u208(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u216(t) {
    const e = s.compactciphertextlistbuilder_push_u216(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u224(t) {
    const e = s.compactciphertextlistbuilder_push_u224(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u232(t) {
    const e = s.compactciphertextlistbuilder_push_u232(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u240(t) {
    const e = s.compactciphertextlistbuilder_push_u240(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_u248(t) {
    const e = s.compactciphertextlistbuilder_push_u248(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i72(t) {
    const e = s.compactciphertextlistbuilder_push_i72(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i80(t) {
    const e = s.compactciphertextlistbuilder_push_i80(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i88(t) {
    const e = s.compactciphertextlistbuilder_push_i88(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i96(t) {
    const e = s.compactciphertextlistbuilder_push_i96(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i104(t) {
    const e = s.compactciphertextlistbuilder_push_i104(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i112(t) {
    const e = s.compactciphertextlistbuilder_push_i112(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i120(t) {
    const e = s.compactciphertextlistbuilder_push_i120(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i136(t) {
    const e = s.compactciphertextlistbuilder_push_i136(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i144(t) {
    const e = s.compactciphertextlistbuilder_push_i144(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i152(t) {
    const e = s.compactciphertextlistbuilder_push_i152(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i168(t) {
    const e = s.compactciphertextlistbuilder_push_i168(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i176(t) {
    const e = s.compactciphertextlistbuilder_push_i176(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i184(t) {
    const e = s.compactciphertextlistbuilder_push_i184(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i192(t) {
    const e = s.compactciphertextlistbuilder_push_i192(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i200(t) {
    const e = s.compactciphertextlistbuilder_push_i200(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i208(t) {
    const e = s.compactciphertextlistbuilder_push_i208(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i216(t) {
    const e = s.compactciphertextlistbuilder_push_i216(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i224(t) {
    const e = s.compactciphertextlistbuilder_push_i224(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i232(t) {
    const e = s.compactciphertextlistbuilder_push_i232(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i240(t) {
    const e = s.compactciphertextlistbuilder_push_i240(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
  /**
   * @param {any} value
   */
  push_i248(t) {
    const e = s.compactciphertextlistbuilder_push_i248(this.__wbg_ptr, t);
    if (e[1])
      throw c(e[0]);
  }
}
const oh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_compactciphertextlistexpander_free(n >>> 0, 1));
class ls {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ls.prototype);
    return e.__wbg_ptr = t, oh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, oh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_compactciphertextlistexpander_free(t, 0);
  }
  /**
   * @param {number} index
   * @returns {FheUint24}
   */
  get_uint24(t) {
    const e = s.compactciphertextlistexpander_get_uint24(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Bn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint40}
   */
  get_uint40(t) {
    const e = s.compactciphertextlistexpander_get_uint40(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return On.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint48}
   */
  get_uint48(t) {
    const e = s.compactciphertextlistexpander_get_uint48(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Tn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint56}
   */
  get_uint56(t) {
    const e = s.compactciphertextlistexpander_get_uint56(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Nn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint72}
   */
  get_uint72(t) {
    const e = s.compactciphertextlistexpander_get_uint72(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Un.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint80}
   */
  get_uint80(t) {
    const e = s.compactciphertextlistexpander_get_uint80(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return jn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint88}
   */
  get_uint88(t) {
    const e = s.compactciphertextlistexpander_get_uint88(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Gn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint96}
   */
  get_uint96(t) {
    const e = s.compactciphertextlistexpander_get_uint96(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Hn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint104}
   */
  get_uint104(t) {
    const e = s.compactciphertextlistexpander_get_uint104(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return sn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint112}
   */
  get_uint112(t) {
    const e = s.compactciphertextlistexpander_get_uint112(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return on.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint120}
   */
  get_uint120(t) {
    const e = s.compactciphertextlistexpander_get_uint120(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return cn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint136}
   */
  get_uint136(t) {
    const e = s.compactciphertextlistexpander_get_uint136(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return _n.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint144}
   */
  get_uint144(t) {
    const e = s.compactciphertextlistexpander_get_uint144(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return ln.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint152}
   */
  get_uint152(t) {
    const e = s.compactciphertextlistexpander_get_uint152(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return hn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint168}
   */
  get_uint168(t) {
    const e = s.compactciphertextlistexpander_get_uint168(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return dn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint176}
   */
  get_uint176(t) {
    const e = s.compactciphertextlistexpander_get_uint176(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return gn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint184}
   */
  get_uint184(t) {
    const e = s.compactciphertextlistexpander_get_uint184(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return yn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint192}
   */
  get_uint192(t) {
    const e = s.compactciphertextlistexpander_get_uint192(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return bn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint200}
   */
  get_uint200(t) {
    const e = s.compactciphertextlistexpander_get_uint200(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return An.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint208}
   */
  get_uint208(t) {
    const e = s.compactciphertextlistexpander_get_uint208(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return vn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint216}
   */
  get_uint216(t) {
    const e = s.compactciphertextlistexpander_get_uint216(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return xn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint224}
   */
  get_uint224(t) {
    const e = s.compactciphertextlistexpander_get_uint224(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Rn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint232}
   */
  get_uint232(t) {
    const e = s.compactciphertextlistexpander_get_uint232(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return zn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint240}
   */
  get_uint240(t) {
    const e = s.compactciphertextlistexpander_get_uint240(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Sn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint248}
   */
  get_uint248(t) {
    const e = s.compactciphertextlistexpander_get_uint248(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Pn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint256}
   */
  get_uint256(t) {
    const e = s.compactciphertextlistexpander_get_uint256(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return kn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint2}
   */
  get_uint2(t) {
    const e = s.compactciphertextlistexpander_get_uint2(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return mn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint4}
   */
  get_uint4(t) {
    const e = s.compactciphertextlistexpander_get_uint4(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return In.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint6}
   */
  get_uint6(t) {
    const e = s.compactciphertextlistexpander_get_uint6(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Ln.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint8}
   */
  get_uint8(t) {
    const e = s.compactciphertextlistexpander_get_uint8(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Mn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint10}
   */
  get_uint10(t) {
    const e = s.compactciphertextlistexpander_get_uint10(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return rn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint12}
   */
  get_uint12(t) {
    const e = s.compactciphertextlistexpander_get_uint12(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return an.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint14}
   */
  get_uint14(t) {
    const e = s.compactciphertextlistexpander_get_uint14(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return fn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint16}
   */
  get_uint16(t) {
    const e = s.compactciphertextlistexpander_get_uint16(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return pn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint32}
   */
  get_uint32(t) {
    const e = s.compactciphertextlistexpander_get_uint32(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Fn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint64}
   */
  get_uint64(t) {
    const e = s.compactciphertextlistexpander_get_uint64(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Dn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint128}
   */
  get_uint128(t) {
    const e = s.compactciphertextlistexpander_get_uint128(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return un.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint160}
   */
  get_uint160(t) {
    const e = s.compactciphertextlistexpander_get_uint160(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return wn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint512}
   */
  get_uint512(t) {
    const e = s.compactciphertextlistexpander_get_uint512(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Cn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint1024}
   */
  get_uint1024(t) {
    const e = s.compactciphertextlistexpander_get_uint1024(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return nn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheUint2048}
   */
  get_uint2048(t) {
    const e = s.compactciphertextlistexpander_get_uint2048(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return En.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt24}
   */
  get_int24(t) {
    const e = s.compactciphertextlistexpander_get_int24(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Ur.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt40}
   */
  get_int40(t) {
    const e = s.compactciphertextlistexpander_get_int40(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return qr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt48}
   */
  get_int48(t) {
    const e = s.compactciphertextlistexpander_get_int48(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Qr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt56}
   */
  get_int56(t) {
    const e = s.compactciphertextlistexpander_get_int56(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Wr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt72}
   */
  get_int72(t) {
    const e = s.compactciphertextlistexpander_get_int72(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Yr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt80}
   */
  get_int80(t) {
    const e = s.compactciphertextlistexpander_get_int80(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Xr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt88}
   */
  get_int88(t) {
    const e = s.compactciphertextlistexpander_get_int88(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return tn.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt96}
   */
  get_int96(t) {
    const e = s.compactciphertextlistexpander_get_int96(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return en.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt104}
   */
  get_int104(t) {
    const e = s.compactciphertextlistexpander_get_int104(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return gr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt112}
   */
  get_int112(t) {
    const e = s.compactciphertextlistexpander_get_int112(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return yr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt120}
   */
  get_int120(t) {
    const e = s.compactciphertextlistexpander_get_int120(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return mr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt136}
   */
  get_int136(t) {
    const e = s.compactciphertextlistexpander_get_int136(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Er.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt144}
   */
  get_int144(t) {
    const e = s.compactciphertextlistexpander_get_int144(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return xr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt152}
   */
  get_int152(t) {
    const e = s.compactciphertextlistexpander_get_int152(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Rr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt168}
   */
  get_int168(t) {
    const e = s.compactciphertextlistexpander_get_int168(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Sr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt176}
   */
  get_int176(t) {
    const e = s.compactciphertextlistexpander_get_int176(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Pr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt184}
   */
  get_int184(t) {
    const e = s.compactciphertextlistexpander_get_int184(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return kr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt192}
   */
  get_int192(t) {
    const e = s.compactciphertextlistexpander_get_int192(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Fr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt200}
   */
  get_int200(t) {
    const e = s.compactciphertextlistexpander_get_int200(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Or.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt208}
   */
  get_int208(t) {
    const e = s.compactciphertextlistexpander_get_int208(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Cr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt216}
   */
  get_int216(t) {
    const e = s.compactciphertextlistexpander_get_int216(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Nr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt224}
   */
  get_int224(t) {
    const e = s.compactciphertextlistexpander_get_int224(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Lr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt232}
   */
  get_int232(t) {
    const e = s.compactciphertextlistexpander_get_int232(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Dr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt240}
   */
  get_int240(t) {
    const e = s.compactciphertextlistexpander_get_int240(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Mr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt248}
   */
  get_int248(t) {
    const e = s.compactciphertextlistexpander_get_int248(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return jr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt2}
   */
  get_int2(t) {
    const e = s.compactciphertextlistexpander_get_int2(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Ir.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt4}
   */
  get_int4(t) {
    const e = s.compactciphertextlistexpander_get_int4(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Vr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt6}
   */
  get_int6(t) {
    const e = s.compactciphertextlistexpander_get_int6(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Jr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt8}
   */
  get_int8(t) {
    const e = s.compactciphertextlistexpander_get_int8(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Zr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt10}
   */
  get_int10(t) {
    const e = s.compactciphertextlistexpander_get_int10(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return wr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt12}
   */
  get_int12(t) {
    const e = s.compactciphertextlistexpander_get_int12(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return br.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt14}
   */
  get_int14(t) {
    const e = s.compactciphertextlistexpander_get_int14(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return vr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt16}
   */
  get_int16(t) {
    const e = s.compactciphertextlistexpander_get_int16(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return zr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt32}
   */
  get_int32(t) {
    const e = s.compactciphertextlistexpander_get_int32(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Hr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt64}
   */
  get_int64(t) {
    const e = s.compactciphertextlistexpander_get_int64(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return $r.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt128}
   */
  get_int128(t) {
    const e = s.compactciphertextlistexpander_get_int128(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Ar.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt160}
   */
  get_int160(t) {
    const e = s.compactciphertextlistexpander_get_int160(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Br.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt256}
   */
  get_int256(t) {
    const e = s.compactciphertextlistexpander_get_int256(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Gr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt512}
   */
  get_int512(t) {
    const e = s.compactciphertextlistexpander_get_int512(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Kr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt1024}
   */
  get_int1024(t) {
    const e = s.compactciphertextlistexpander_get_int1024(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return dr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheInt2048}
   */
  get_int2048(t) {
    const e = s.compactciphertextlistexpander_get_int2048(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return Tr.__wrap(e[0]);
  }
  /**
   * @param {number} index
   * @returns {FheBool}
   */
  get_bool(t) {
    const e = s.compactciphertextlistexpander_get_bool(this.__wbg_ptr, t);
    if (e[2])
      throw c(e[1]);
    return pr.__wrap(e[0]);
  }
  /**
   * @returns {number}
   */
  len() {
    return s.compactciphertextlistexpander_len(this.__wbg_ptr) >>> 0;
  }
  /**
   * @returns {boolean}
   */
  is_empty() {
    return s.compactciphertextlistexpander_is_empty(this.__wbg_ptr) !== 0;
  }
  /**
   * @param {number} index
   * @returns {FheTypes | undefined}
   */
  get_kind_of(t) {
    const e = s.compactciphertextlistexpander_get_kind_of(this.__wbg_ptr, t);
    return e === 84 ? void 0 : e;
  }
}
const ah = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_compactpkecrs_free(n >>> 0, 1));
class We {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(We.prototype);
    return e.__wbg_ptr = t, ah.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ah.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_compactpkecrs_free(t, 0);
  }
  /**
   * @param {boolean} compress
   * @returns {Uint8Array}
   */
  serialize(t) {
    const e = s.compactpkecrs_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {CompactPkeCrs}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.compactpkecrs_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return We.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.compactpkecrs_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {CompactPkeCrs}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.compactpkecrs_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return We.__wrap(o[0]);
  }
  /**
   * @param {TfheConfig} config
   * @param {number} max_num_bits
   * @returns {CompactPkeCrs}
   */
  static from_config(t, e) {
    E(t, hs);
    const r = s.compactpkecrs_from_config(t.__wbg_ptr, e);
    if (r[2])
      throw c(r[1]);
    return We.__wrap(r[0]);
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {CompactPkeCrs}
   */
  static deserialize_from_public_params(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.compactpkecrs_deserialize_from_public_params(e, r);
    if (i[2])
      throw c(i[1]);
    return We.__wrap(i[0]);
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {CompactPkeCrs}
   */
  static safe_deserialize_from_public_params(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.compactpkecrs_safe_deserialize_from_public_params(r, i, e);
    if (o[2])
      throw c(o[1]);
    return We.__wrap(o[0]);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfhebool_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint10_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint1024_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint104_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint112_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint12_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint120_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint128_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint136_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint14_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint144_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint152_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint16_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint160_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint168_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint176_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint184_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint192_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint2_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint200_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint2048_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint208_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint216_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint224_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint232_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint24_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint240_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint248_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint256_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint32_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint4_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint40_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint48_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint512_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint56_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint6_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint64_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint72_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint8_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint80_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint88_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheint96_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint10_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint1024_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint104_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint112_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint12_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint120_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint128_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint136_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint14_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint144_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint152_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint16_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint160_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint168_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint176_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint184_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint192_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint2_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint200_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint2048_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint208_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint216_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint224_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint232_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint24_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint240_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint248_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint256_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint32_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint4_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint40_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint48_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint512_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint56_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint6_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint64_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint72_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint8_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint80_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint88_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_compressedfheuint96_free(n >>> 0, 1));
const ch = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fhebool_free(n >>> 0, 1));
class pr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(pr.prototype);
    return e.__wbg_ptr = t, ch.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ch.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fhebool_free(t, 0);
  }
  /**
   * @param {boolean} value
   * @param {TfheClientKey} client_key
   * @returns {FheBool}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fhebool_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return pr.__wrap(r[0]);
  }
  /**
   * @param {boolean} value
   * @param {TfhePublicKey} public_key
   * @returns {FheBool}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fhebool_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return pr.__wrap(r[0]);
  }
  /**
   * @param {boolean} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheBool}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fhebool_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return pr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {boolean}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fhebool_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0] !== 0;
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fhebool_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheBool}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fhebool_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return pr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fhebool_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheBool}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fhebool_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return pr.__wrap(o[0]);
  }
}
const uh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint10_free(n >>> 0, 1));
class wr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(wr.prototype);
    return e.__wbg_ptr = t, uh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, uh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint10_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt10}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint10_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return wr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt10}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint10_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return wr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt10}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint10_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return wr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint10_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint10_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt10}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint10_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return wr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint10_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt10}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint10_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return wr.__wrap(o[0]);
  }
}
const _h = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint1024_free(n >>> 0, 1));
class dr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(dr.prototype);
    return e.__wbg_ptr = t, _h.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, _h.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint1024_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt1024}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint1024_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return dr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt1024}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint1024_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return dr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt1024}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint1024_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return dr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint1024_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint1024_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt1024}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint1024_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return dr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint1024_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt1024}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint1024_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return dr.__wrap(o[0]);
  }
}
const fh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint104_free(n >>> 0, 1));
class gr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(gr.prototype);
    return e.__wbg_ptr = t, fh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, fh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint104_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt104}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint104_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return gr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt104}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint104_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return gr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt104}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint104_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return gr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint104_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint104_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt104}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint104_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return gr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint104_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt104}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint104_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return gr.__wrap(o[0]);
  }
}
const lh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint112_free(n >>> 0, 1));
class yr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(yr.prototype);
    return e.__wbg_ptr = t, lh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, lh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint112_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt112}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint112_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return yr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt112}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint112_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return yr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt112}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint112_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return yr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint112_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint112_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt112}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint112_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return yr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint112_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt112}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint112_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return yr.__wrap(o[0]);
  }
}
const hh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint12_free(n >>> 0, 1));
class br {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(br.prototype);
    return e.__wbg_ptr = t, hh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, hh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint12_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt12}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint12_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return br.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt12}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint12_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return br.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt12}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint12_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return br.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint12_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint12_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt12}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint12_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return br.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint12_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt12}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint12_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return br.__wrap(o[0]);
  }
}
const ph = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint120_free(n >>> 0, 1));
class mr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(mr.prototype);
    return e.__wbg_ptr = t, ph.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ph.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint120_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt120}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint120_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return mr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt120}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint120_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return mr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt120}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint120_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return mr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint120_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint120_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt120}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint120_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return mr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint120_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt120}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint120_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return mr.__wrap(o[0]);
  }
}
const wh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint128_free(n >>> 0, 1));
class Ar {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Ar.prototype);
    return e.__wbg_ptr = t, wh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, wh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint128_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt128}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint128_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ar.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt128}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint128_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ar.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt128}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint128_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ar.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint128_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint128_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt128}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint128_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Ar.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint128_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt128}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint128_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Ar.__wrap(o[0]);
  }
}
const dh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint136_free(n >>> 0, 1));
class Er {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Er.prototype);
    return e.__wbg_ptr = t, dh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, dh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint136_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt136}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint136_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Er.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt136}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint136_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Er.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt136}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint136_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Er.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint136_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint136_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt136}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint136_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Er.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint136_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt136}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint136_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Er.__wrap(o[0]);
  }
}
const gh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint14_free(n >>> 0, 1));
class vr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(vr.prototype);
    return e.__wbg_ptr = t, gh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, gh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint14_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt14}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint14_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return vr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt14}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint14_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return vr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt14}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint14_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return vr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint14_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint14_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt14}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint14_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return vr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint14_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt14}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint14_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return vr.__wrap(o[0]);
  }
}
const yh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint144_free(n >>> 0, 1));
class xr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(xr.prototype);
    return e.__wbg_ptr = t, yh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, yh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint144_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt144}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint144_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return xr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt144}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint144_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return xr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt144}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint144_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return xr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint144_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint144_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt144}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint144_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return xr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint144_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt144}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint144_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return xr.__wrap(o[0]);
  }
}
const bh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint152_free(n >>> 0, 1));
class Rr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Rr.prototype);
    return e.__wbg_ptr = t, bh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, bh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint152_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt152}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint152_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Rr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt152}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint152_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Rr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt152}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint152_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Rr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint152_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint152_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt152}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint152_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Rr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint152_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt152}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint152_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Rr.__wrap(o[0]);
  }
}
const mh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint16_free(n >>> 0, 1));
class zr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(zr.prototype);
    return e.__wbg_ptr = t, mh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, mh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint16_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt16}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint16_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return zr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt16}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint16_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return zr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt16}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint16_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return zr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint16_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint16_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt16}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint16_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return zr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint16_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt16}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint16_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return zr.__wrap(o[0]);
  }
}
const Ah = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint160_free(n >>> 0, 1));
class Br {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Br.prototype);
    return e.__wbg_ptr = t, Ah.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ah.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint160_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt160}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint160_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Br.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt160}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint160_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Br.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt160}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint160_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Br.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint160_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint160_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt160}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint160_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Br.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint160_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt160}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint160_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Br.__wrap(o[0]);
  }
}
const Eh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint168_free(n >>> 0, 1));
class Sr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Sr.prototype);
    return e.__wbg_ptr = t, Eh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Eh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint168_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt168}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint168_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Sr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt168}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint168_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Sr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt168}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint168_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Sr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint168_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint168_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt168}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint168_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Sr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint168_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt168}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint168_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Sr.__wrap(o[0]);
  }
}
const vh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint176_free(n >>> 0, 1));
class Pr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Pr.prototype);
    return e.__wbg_ptr = t, vh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, vh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint176_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt176}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint176_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Pr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt176}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint176_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Pr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt176}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint176_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Pr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint176_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint176_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt176}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint176_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Pr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint176_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt176}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint176_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Pr.__wrap(o[0]);
  }
}
const xh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint184_free(n >>> 0, 1));
class kr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(kr.prototype);
    return e.__wbg_ptr = t, xh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, xh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint184_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt184}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint184_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return kr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt184}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint184_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return kr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt184}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint184_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return kr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint184_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint184_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt184}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint184_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return kr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint184_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt184}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint184_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return kr.__wrap(o[0]);
  }
}
const Rh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint192_free(n >>> 0, 1));
class Fr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Fr.prototype);
    return e.__wbg_ptr = t, Rh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Rh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint192_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt192}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint192_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Fr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt192}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint192_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Fr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt192}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint192_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Fr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint192_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint192_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt192}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint192_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Fr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint192_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt192}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint192_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Fr.__wrap(o[0]);
  }
}
const zh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint2_free(n >>> 0, 1));
class Ir {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Ir.prototype);
    return e.__wbg_ptr = t, zh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, zh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint2_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt2}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint2_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ir.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt2}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint2_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ir.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt2}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint2_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ir.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint2_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint2_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt2}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint2_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Ir.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint2_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt2}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint2_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Ir.__wrap(o[0]);
  }
}
const Bh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint200_free(n >>> 0, 1));
class Or {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Or.prototype);
    return e.__wbg_ptr = t, Bh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Bh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint200_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt200}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint200_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Or.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt200}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint200_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Or.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt200}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint200_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Or.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint200_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint200_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt200}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint200_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Or.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint200_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt200}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint200_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Or.__wrap(o[0]);
  }
}
const Sh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint2048_free(n >>> 0, 1));
class Tr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Tr.prototype);
    return e.__wbg_ptr = t, Sh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Sh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint2048_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt2048}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint2048_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Tr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt2048}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint2048_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Tr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt2048}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint2048_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Tr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint2048_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint2048_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt2048}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint2048_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Tr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint2048_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt2048}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint2048_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Tr.__wrap(o[0]);
  }
}
const Ph = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint208_free(n >>> 0, 1));
class Cr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Cr.prototype);
    return e.__wbg_ptr = t, Ph.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ph.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint208_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt208}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint208_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Cr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt208}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint208_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Cr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt208}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint208_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Cr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint208_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint208_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt208}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint208_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Cr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint208_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt208}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint208_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Cr.__wrap(o[0]);
  }
}
const kh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint216_free(n >>> 0, 1));
class Nr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Nr.prototype);
    return e.__wbg_ptr = t, kh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, kh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint216_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt216}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint216_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Nr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt216}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint216_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Nr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt216}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint216_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Nr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint216_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint216_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt216}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint216_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Nr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint216_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt216}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint216_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Nr.__wrap(o[0]);
  }
}
const Fh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint224_free(n >>> 0, 1));
class Lr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Lr.prototype);
    return e.__wbg_ptr = t, Fh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Fh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint224_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt224}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint224_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Lr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt224}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint224_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Lr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt224}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint224_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Lr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint224_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint224_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt224}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint224_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Lr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint224_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt224}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint224_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Lr.__wrap(o[0]);
  }
}
const Ih = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint232_free(n >>> 0, 1));
class Dr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Dr.prototype);
    return e.__wbg_ptr = t, Ih.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ih.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint232_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt232}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint232_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Dr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt232}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint232_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Dr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt232}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint232_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Dr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint232_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint232_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt232}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint232_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Dr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint232_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt232}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint232_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Dr.__wrap(o[0]);
  }
}
const Oh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint24_free(n >>> 0, 1));
class Ur {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Ur.prototype);
    return e.__wbg_ptr = t, Oh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Oh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint24_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt24}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint24_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ur.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt24}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint24_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ur.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt24}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint24_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ur.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint24_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint24_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt24}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint24_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Ur.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint24_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt24}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint24_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Ur.__wrap(o[0]);
  }
}
const Th = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint240_free(n >>> 0, 1));
class Mr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Mr.prototype);
    return e.__wbg_ptr = t, Th.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Th.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint240_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt240}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint240_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Mr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt240}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint240_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Mr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt240}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint240_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Mr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint240_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint240_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt240}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint240_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Mr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint240_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt240}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint240_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Mr.__wrap(o[0]);
  }
}
const Ch = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint248_free(n >>> 0, 1));
class jr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(jr.prototype);
    return e.__wbg_ptr = t, Ch.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ch.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint248_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt248}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint248_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return jr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt248}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint248_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return jr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt248}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint248_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return jr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint248_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint248_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt248}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint248_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return jr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint248_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt248}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint248_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return jr.__wrap(o[0]);
  }
}
const Nh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint256_free(n >>> 0, 1));
class Gr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Gr.prototype);
    return e.__wbg_ptr = t, Nh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Nh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint256_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt256}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint256_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Gr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt256}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint256_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Gr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt256}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint256_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Gr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint256_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint256_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt256}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint256_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Gr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint256_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt256}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint256_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Gr.__wrap(o[0]);
  }
}
const Lh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint32_free(n >>> 0, 1));
class Hr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Hr.prototype);
    return e.__wbg_ptr = t, Lh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Lh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint32_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt32}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint32_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Hr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt32}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint32_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Hr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt32}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint32_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Hr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint32_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint32_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt32}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint32_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Hr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint32_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt32}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint32_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Hr.__wrap(o[0]);
  }
}
const Dh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint4_free(n >>> 0, 1));
class Vr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Vr.prototype);
    return e.__wbg_ptr = t, Dh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Dh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint4_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt4}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint4_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Vr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt4}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint4_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Vr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt4}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint4_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Vr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint4_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint4_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt4}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint4_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Vr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint4_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt4}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint4_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Vr.__wrap(o[0]);
  }
}
const Uh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint40_free(n >>> 0, 1));
class qr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(qr.prototype);
    return e.__wbg_ptr = t, Uh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Uh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint40_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt40}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint40_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return qr.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt40}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint40_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return qr.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt40}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint40_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return qr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint40_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint40_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt40}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint40_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return qr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint40_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt40}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint40_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return qr.__wrap(o[0]);
  }
}
const Mh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint48_free(n >>> 0, 1));
class Qr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Qr.prototype);
    return e.__wbg_ptr = t, Mh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Mh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint48_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt48}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint48_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Qr.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt48}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint48_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Qr.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt48}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint48_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Qr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint48_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint48_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt48}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint48_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Qr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint48_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt48}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint48_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Qr.__wrap(o[0]);
  }
}
const jh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint512_free(n >>> 0, 1));
class Kr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Kr.prototype);
    return e.__wbg_ptr = t, jh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, jh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint512_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt512}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint512_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Kr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt512}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint512_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Kr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt512}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint512_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Kr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint512_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint512_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt512}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint512_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Kr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint512_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt512}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint512_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Kr.__wrap(o[0]);
  }
}
const Gh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint56_free(n >>> 0, 1));
class Wr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Wr.prototype);
    return e.__wbg_ptr = t, Gh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Gh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint56_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt56}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint56_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Wr.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt56}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint56_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Wr.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt56}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint56_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Wr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint56_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint56_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt56}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint56_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Wr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint56_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt56}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint56_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Wr.__wrap(o[0]);
  }
}
const Hh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint6_free(n >>> 0, 1));
class Jr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Jr.prototype);
    return e.__wbg_ptr = t, Hh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Hh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint6_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt6}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint6_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Jr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt6}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint6_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Jr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt6}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint6_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Jr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint6_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint6_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt6}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint6_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Jr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint6_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt6}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint6_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Jr.__wrap(o[0]);
  }
}
const Vh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint64_free(n >>> 0, 1));
class $r {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create($r.prototype);
    return e.__wbg_ptr = t, Vh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Vh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint64_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt64}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint64_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return $r.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt64}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint64_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return $r.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt64}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint64_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return $r.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint64_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint64_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt64}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint64_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return $r.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint64_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt64}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint64_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return $r.__wrap(o[0]);
  }
}
const qh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint72_free(n >>> 0, 1));
class Yr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Yr.prototype);
    return e.__wbg_ptr = t, qh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, qh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint72_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt72}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint72_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Yr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt72}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint72_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Yr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt72}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint72_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Yr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint72_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint72_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt72}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint72_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Yr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint72_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt72}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint72_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Yr.__wrap(o[0]);
  }
}
const Qh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint8_free(n >>> 0, 1));
class Zr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Zr.prototype);
    return e.__wbg_ptr = t, Qh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Qh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint8_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt8}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint8_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Zr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt8}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint8_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Zr.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt8}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint8_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Zr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint8_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint8_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt8}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint8_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Zr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint8_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt8}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint8_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Zr.__wrap(o[0]);
  }
}
const Kh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint80_free(n >>> 0, 1));
class Xr {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Xr.prototype);
    return e.__wbg_ptr = t, Kh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Kh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint80_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt80}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint80_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Xr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt80}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint80_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Xr.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt80}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint80_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Xr.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint80_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint80_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt80}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint80_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Xr.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint80_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt80}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint80_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Xr.__wrap(o[0]);
  }
}
const Wh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint88_free(n >>> 0, 1));
class tn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(tn.prototype);
    return e.__wbg_ptr = t, Wh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Wh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint88_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt88}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint88_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return tn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt88}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint88_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return tn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt88}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint88_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return tn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint88_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint88_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt88}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint88_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return tn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint88_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt88}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint88_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return tn.__wrap(o[0]);
  }
}
const Jh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheint96_free(n >>> 0, 1));
class en {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(en.prototype);
    return e.__wbg_ptr = t, Jh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Jh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheint96_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheInt96}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheint96_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return en.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheInt96}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheint96_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return en.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheInt96}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheint96_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return en.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheint96_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheint96_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheInt96}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheint96_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return en.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheint96_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheInt96}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheint96_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return en.__wrap(o[0]);
  }
}
const $h = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint10_free(n >>> 0, 1));
class rn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(rn.prototype);
    return e.__wbg_ptr = t, $h.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, $h.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint10_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint10}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint10_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return rn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint10}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint10_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return rn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint10}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint10_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return rn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint10_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint10_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint10}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint10_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return rn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint10_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint10}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint10_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return rn.__wrap(o[0]);
  }
}
const Yh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint1024_free(n >>> 0, 1));
class nn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(nn.prototype);
    return e.__wbg_ptr = t, Yh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Yh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint1024_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint1024}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint1024_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return nn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint1024}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint1024_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return nn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint1024}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint1024_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return nn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint1024_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint1024_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint1024}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint1024_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return nn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint1024_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint1024}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint1024_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return nn.__wrap(o[0]);
  }
}
const Zh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint104_free(n >>> 0, 1));
class sn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(sn.prototype);
    return e.__wbg_ptr = t, Zh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Zh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint104_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint104}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint104_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return sn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint104}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint104_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return sn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint104}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint104_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return sn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint104_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint104_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint104}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint104_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return sn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint104_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint104}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint104_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return sn.__wrap(o[0]);
  }
}
const Xh = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint112_free(n >>> 0, 1));
class on {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(on.prototype);
    return e.__wbg_ptr = t, Xh.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Xh.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint112_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint112}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint112_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return on.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint112}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint112_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return on.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint112}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint112_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return on.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint112_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint112_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint112}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint112_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return on.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint112_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint112}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint112_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return on.__wrap(o[0]);
  }
}
const tp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint12_free(n >>> 0, 1));
class an {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(an.prototype);
    return e.__wbg_ptr = t, tp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, tp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint12_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint12}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint12_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return an.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint12}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint12_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return an.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint12}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint12_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return an.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint12_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint12_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint12}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint12_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return an.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint12_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint12}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint12_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return an.__wrap(o[0]);
  }
}
const ep = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint120_free(n >>> 0, 1));
class cn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(cn.prototype);
    return e.__wbg_ptr = t, ep.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ep.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint120_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint120}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint120_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return cn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint120}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint120_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return cn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint120}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint120_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return cn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint120_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint120_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint120}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint120_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return cn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint120_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint120}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint120_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return cn.__wrap(o[0]);
  }
}
const rp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint128_free(n >>> 0, 1));
class un {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(un.prototype);
    return e.__wbg_ptr = t, rp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, rp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint128_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint128}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint128_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return un.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint128}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint128_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return un.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint128}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint128_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return un.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint128_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint128_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint128}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint128_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return un.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint128_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint128}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint128_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return un.__wrap(o[0]);
  }
}
const np = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint136_free(n >>> 0, 1));
class _n {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(_n.prototype);
    return e.__wbg_ptr = t, np.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, np.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint136_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint136}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint136_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return _n.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint136}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint136_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return _n.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint136}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint136_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return _n.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint136_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint136_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint136}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint136_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return _n.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint136_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint136}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint136_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return _n.__wrap(o[0]);
  }
}
const ip = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint14_free(n >>> 0, 1));
class fn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(fn.prototype);
    return e.__wbg_ptr = t, ip.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ip.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint14_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint14}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint14_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return fn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint14}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint14_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return fn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint14}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint14_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return fn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint14_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint14_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint14}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint14_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return fn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint14_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint14}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint14_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return fn.__wrap(o[0]);
  }
}
const sp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint144_free(n >>> 0, 1));
class ln {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ln.prototype);
    return e.__wbg_ptr = t, sp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, sp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint144_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint144}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint144_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return ln.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint144}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint144_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return ln.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint144}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint144_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return ln.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint144_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint144_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint144}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint144_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return ln.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint144_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint144}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint144_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return ln.__wrap(o[0]);
  }
}
const op = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint152_free(n >>> 0, 1));
class hn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(hn.prototype);
    return e.__wbg_ptr = t, op.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, op.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint152_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint152}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint152_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return hn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint152}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint152_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return hn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint152}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint152_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return hn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint152_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint152_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint152}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint152_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return hn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint152_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint152}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint152_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return hn.__wrap(o[0]);
  }
}
const ap = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint16_free(n >>> 0, 1));
class pn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(pn.prototype);
    return e.__wbg_ptr = t, ap.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, ap.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint16_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint16}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint16_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return pn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint16}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint16_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return pn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint16}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint16_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return pn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint16_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint16_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint16}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint16_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return pn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint16_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint16}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint16_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return pn.__wrap(o[0]);
  }
}
const cp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint160_free(n >>> 0, 1));
class wn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(wn.prototype);
    return e.__wbg_ptr = t, cp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, cp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint160_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint160}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint160_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return wn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint160}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint160_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return wn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint160}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint160_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return wn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint160_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint160_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint160}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint160_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return wn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint160_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint160}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint160_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return wn.__wrap(o[0]);
  }
}
const up = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint168_free(n >>> 0, 1));
class dn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(dn.prototype);
    return e.__wbg_ptr = t, up.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, up.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint168_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint168}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint168_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return dn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint168}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint168_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return dn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint168}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint168_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return dn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint168_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint168_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint168}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint168_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return dn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint168_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint168}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint168_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return dn.__wrap(o[0]);
  }
}
const _p = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint176_free(n >>> 0, 1));
class gn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(gn.prototype);
    return e.__wbg_ptr = t, _p.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, _p.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint176_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint176}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint176_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return gn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint176}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint176_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return gn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint176}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint176_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return gn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint176_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint176_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint176}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint176_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return gn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint176_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint176}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint176_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return gn.__wrap(o[0]);
  }
}
const fp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint184_free(n >>> 0, 1));
class yn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(yn.prototype);
    return e.__wbg_ptr = t, fp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, fp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint184_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint184}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint184_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return yn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint184}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint184_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return yn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint184}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint184_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return yn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint184_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint184_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint184}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint184_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return yn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint184_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint184}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint184_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return yn.__wrap(o[0]);
  }
}
const lp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint192_free(n >>> 0, 1));
class bn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(bn.prototype);
    return e.__wbg_ptr = t, lp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, lp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint192_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint192}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint192_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return bn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint192}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint192_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return bn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint192}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint192_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return bn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint192_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint192_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint192}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint192_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return bn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint192_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint192}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint192_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return bn.__wrap(o[0]);
  }
}
const hp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint2_free(n >>> 0, 1));
class mn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(mn.prototype);
    return e.__wbg_ptr = t, hp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, hp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint2_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint2}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint2_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return mn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint2}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint2_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return mn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint2}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint2_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return mn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint2_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint2_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint2}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint2_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return mn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint2_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint2}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint2_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return mn.__wrap(o[0]);
  }
}
const pp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint200_free(n >>> 0, 1));
class An {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(An.prototype);
    return e.__wbg_ptr = t, pp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, pp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint200_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint200}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint200_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return An.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint200}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint200_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return An.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint200}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint200_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return An.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint200_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint200_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint200}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint200_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return An.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint200_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint200}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint200_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return An.__wrap(o[0]);
  }
}
const wp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint2048_free(n >>> 0, 1));
class En {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(En.prototype);
    return e.__wbg_ptr = t, wp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, wp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint2048_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint2048}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint2048_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return En.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint2048}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint2048_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return En.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint2048}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint2048_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return En.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint2048_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint2048_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint2048}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint2048_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return En.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint2048_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint2048}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint2048_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return En.__wrap(o[0]);
  }
}
const dp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint208_free(n >>> 0, 1));
class vn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(vn.prototype);
    return e.__wbg_ptr = t, dp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, dp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint208_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint208}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint208_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return vn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint208}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint208_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return vn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint208}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint208_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return vn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint208_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint208_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint208}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint208_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return vn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint208_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint208}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint208_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return vn.__wrap(o[0]);
  }
}
const gp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint216_free(n >>> 0, 1));
class xn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(xn.prototype);
    return e.__wbg_ptr = t, gp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, gp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint216_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint216}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint216_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return xn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint216}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint216_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return xn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint216}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint216_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return xn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint216_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint216_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint216}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint216_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return xn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint216_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint216}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint216_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return xn.__wrap(o[0]);
  }
}
const yp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint224_free(n >>> 0, 1));
class Rn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Rn.prototype);
    return e.__wbg_ptr = t, yp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, yp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint224_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint224}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint224_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Rn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint224}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint224_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Rn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint224}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint224_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Rn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint224_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint224_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint224}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint224_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Rn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint224_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint224}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint224_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Rn.__wrap(o[0]);
  }
}
const bp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint232_free(n >>> 0, 1));
class zn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(zn.prototype);
    return e.__wbg_ptr = t, bp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, bp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint232_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint232}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint232_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return zn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint232}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint232_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return zn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint232}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint232_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return zn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint232_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint232_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint232}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint232_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return zn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint232_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint232}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint232_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return zn.__wrap(o[0]);
  }
}
const mp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint24_free(n >>> 0, 1));
class Bn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Bn.prototype);
    return e.__wbg_ptr = t, mp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, mp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint24_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint24}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint24_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Bn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint24}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint24_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Bn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint24}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint24_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Bn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint24_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0] >>> 0;
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint24_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint24}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint24_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Bn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint24_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint24}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint24_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Bn.__wrap(o[0]);
  }
}
const Ap = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint240_free(n >>> 0, 1));
class Sn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Sn.prototype);
    return e.__wbg_ptr = t, Ap.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ap.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint240_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint240}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint240_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Sn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint240}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint240_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Sn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint240}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint240_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Sn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint240_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint240_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint240}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint240_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Sn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint240_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint240}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint240_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Sn.__wrap(o[0]);
  }
}
const Ep = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint248_free(n >>> 0, 1));
class Pn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Pn.prototype);
    return e.__wbg_ptr = t, Ep.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ep.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint248_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint248}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint248_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Pn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint248}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint248_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Pn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint248}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint248_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Pn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint248_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint248_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint248}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint248_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Pn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint248_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint248}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint248_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Pn.__wrap(o[0]);
  }
}
const vp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint256_free(n >>> 0, 1));
class kn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(kn.prototype);
    return e.__wbg_ptr = t, vp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, vp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint256_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint256}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint256_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return kn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint256}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint256_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return kn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint256}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint256_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return kn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint256_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint256_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint256}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint256_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return kn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint256_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint256}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint256_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return kn.__wrap(o[0]);
  }
}
const xp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint32_free(n >>> 0, 1));
class Fn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Fn.prototype);
    return e.__wbg_ptr = t, xp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, xp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint32_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint32}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint32_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Fn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint32}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint32_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Fn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint32}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint32_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Fn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint32_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0] >>> 0;
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint32_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint32}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint32_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Fn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint32_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint32}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint32_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Fn.__wrap(o[0]);
  }
}
const Rp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint4_free(n >>> 0, 1));
class In {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(In.prototype);
    return e.__wbg_ptr = t, Rp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Rp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint4_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint4}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint4_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return In.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint4}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint4_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return In.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint4}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint4_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return In.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint4_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint4_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint4}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint4_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return In.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint4_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint4}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint4_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return In.__wrap(o[0]);
  }
}
const zp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint40_free(n >>> 0, 1));
class On {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(On.prototype);
    return e.__wbg_ptr = t, zp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, zp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint40_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint40}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint40_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return On.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint40}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint40_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return On.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint40}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint40_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return On.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint40_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return BigInt.asUintN(64, e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint40_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint40}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint40_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return On.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint40_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint40}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint40_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return On.__wrap(o[0]);
  }
}
const Bp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint48_free(n >>> 0, 1));
class Tn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Tn.prototype);
    return e.__wbg_ptr = t, Bp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Bp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint48_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint48}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint48_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Tn.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint48}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint48_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Tn.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint48}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint48_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Tn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint48_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return BigInt.asUintN(64, e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint48_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint48}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint48_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Tn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint48_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint48}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint48_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Tn.__wrap(o[0]);
  }
}
const Sp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint512_free(n >>> 0, 1));
class Cn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Cn.prototype);
    return e.__wbg_ptr = t, Sp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Sp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint512_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint512}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint512_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Cn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint512}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint512_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Cn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint512}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint512_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Cn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint512_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint512_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint512}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint512_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Cn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint512_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint512}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint512_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Cn.__wrap(o[0]);
  }
}
const Pp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint56_free(n >>> 0, 1));
class Nn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Nn.prototype);
    return e.__wbg_ptr = t, Pp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Pp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint56_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint56}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint56_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Nn.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint56}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint56_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Nn.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint56}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint56_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Nn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint56_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return BigInt.asUintN(64, e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint56_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint56}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint56_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Nn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint56_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint56}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint56_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Nn.__wrap(o[0]);
  }
}
const kp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint6_free(n >>> 0, 1));
class Ln {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Ln.prototype);
    return e.__wbg_ptr = t, kp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, kp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint6_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint6}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint6_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ln.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint6}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint6_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ln.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint6}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint6_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Ln.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint6_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint6_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint6}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint6_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Ln.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint6_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint6}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint6_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Ln.__wrap(o[0]);
  }
}
const Fp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint64_free(n >>> 0, 1));
class Dn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Dn.prototype);
    return e.__wbg_ptr = t, Fp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Fp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint64_free(t, 0);
  }
  /**
   * @param {bigint} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint64}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint64_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Dn.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint64}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint64_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Dn.__wrap(r[0]);
  }
  /**
   * @param {bigint} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint64}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint64_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Dn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {bigint}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint64_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return BigInt.asUintN(64, e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint64_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint64}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint64_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Dn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint64_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint64}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint64_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Dn.__wrap(o[0]);
  }
}
const Ip = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint72_free(n >>> 0, 1));
class Un {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Un.prototype);
    return e.__wbg_ptr = t, Ip.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Ip.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint72_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint72}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint72_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Un.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint72}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint72_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Un.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint72}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint72_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Un.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint72_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint72_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint72}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint72_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Un.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint72_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint72}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint72_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Un.__wrap(o[0]);
  }
}
const Op = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint8_free(n >>> 0, 1));
class Mn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Mn.prototype);
    return e.__wbg_ptr = t, Op.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Op.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint8_free(t, 0);
  }
  /**
   * @param {number} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint8}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint8_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Mn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint8}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint8_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Mn.__wrap(r[0]);
  }
  /**
   * @param {number} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint8}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint8_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Mn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {number}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint8_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return e[0];
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint8_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint8}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint8_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Mn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint8_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint8}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint8_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Mn.__wrap(o[0]);
  }
}
const Tp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint80_free(n >>> 0, 1));
class jn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(jn.prototype);
    return e.__wbg_ptr = t, Tp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Tp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint80_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint80}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint80_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return jn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint80}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint80_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return jn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint80}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint80_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return jn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint80_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint80_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint80}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint80_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return jn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint80_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint80}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint80_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return jn.__wrap(o[0]);
  }
}
const Cp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint88_free(n >>> 0, 1));
class Gn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Gn.prototype);
    return e.__wbg_ptr = t, Cp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Cp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint88_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint88}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint88_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Gn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint88}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint88_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Gn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint88}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint88_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Gn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint88_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint88_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint88}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint88_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Gn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint88_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint88}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint88_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Gn.__wrap(o[0]);
  }
}
const Np = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_fheuint96_free(n >>> 0, 1));
class Hn {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Hn.prototype);
    return e.__wbg_ptr = t, Np.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Np.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_fheuint96_free(t, 0);
  }
  /**
   * @param {any} value
   * @param {TfheClientKey} client_key
   * @returns {FheUint96}
   */
  static encrypt_with_client_key(t, e) {
    E(e, K);
    const r = s.fheuint96_encrypt_with_client_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Hn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfhePublicKey} public_key
   * @returns {FheUint96}
   */
  static encrypt_with_public_key(t, e) {
    E(e, ht);
    const r = s.fheuint96_encrypt_with_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Hn.__wrap(r[0]);
  }
  /**
   * @param {any} value
   * @param {TfheCompressedPublicKey} compressed_public_key
   * @returns {FheUint96}
   */
  static encrypt_with_compressed_public_key(t, e) {
    E(e, pt);
    const r = s.fheuint96_encrypt_with_compressed_public_key(t, e.__wbg_ptr);
    if (r[2])
      throw c(r[1]);
    return Hn.__wrap(r[0]);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {any}
   */
  decrypt(t) {
    E(t, K);
    const e = s.fheuint96_decrypt(this.__wbg_ptr, t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return c(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.fheuint96_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {FheUint96}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.fheuint96_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return Hn.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.fheuint96_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {FheUint96}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.fheuint96_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return Hn.__wrap(o[0]);
  }
}
const Lp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_provencompactciphertextlist_free(n >>> 0, 1));
class es {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(es.prototype);
    return e.__wbg_ptr = t, Lp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Lp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_provencompactciphertextlist_free(t, 0);
  }
  /**
   * @param {TfheCompactPublicKey} public_key
   * @returns {CompactCiphertextListBuilder}
   */
  static builder(t) {
    E(t, $e);
    const e = s.provencompactciphertextlist_builder(t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return eo.__wrap(e[0]);
  }
  /**
   * @returns {number}
   */
  len() {
    return s.compactciphertextlistexpander_len(this.__wbg_ptr) >>> 0;
  }
  /**
   * @returns {boolean}
   */
  is_empty() {
    return s.compactciphertextlistexpander_is_empty(this.__wbg_ptr) !== 0;
  }
  /**
   * @param {number} index
   * @returns {FheTypes | undefined}
   */
  get_kind_of(t) {
    const e = s.provencompactciphertextlist_get_kind_of(this.__wbg_ptr, t);
    return e === 84 ? void 0 : e;
  }
  /**
   * @param {CompactPkeCrs} crs
   * @param {TfheCompactPublicKey} public_key
   * @param {Uint8Array} metadata
   * @returns {CompactCiphertextListExpander}
   */
  verify_and_expand(t, e, r) {
    E(t, We), E(e, $e);
    const i = q(r, s.__wbindgen_malloc), o = j, a = s.provencompactciphertextlist_verify_and_expand(this.__wbg_ptr, t.__wbg_ptr, e.__wbg_ptr, i, o);
    if (a[2])
      throw c(a[1]);
    return ls.__wrap(a[0]);
  }
  /**
   * @returns {CompactCiphertextListExpander}
   */
  expand_without_verification() {
    const t = s.provencompactciphertextlist_expand_without_verification(this.__wbg_ptr);
    if (t[2])
      throw c(t[1]);
    return ls.__wrap(t[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.provencompactciphertextlist_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {ProvenCompactCiphertextList}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.provencompactciphertextlist_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return es.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.provencompactciphertextlist_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {ProvenCompactCiphertextList}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.provencompactciphertextlist_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return es.__wrap(o[0]);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortint_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintciphertext_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintclientkey_free(n >>> 0, 1));
const uu = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_shortintcompactpublickeyencryptionparameters_free(n >>> 0, 1));
class Vs {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Vs.prototype);
    return e.__wbg_ptr = t, uu.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, uu.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_shortintcompactpublickeyencryptionparameters_free(t, 0);
  }
  /**
   * @param {ShortintCompactPublicKeyEncryptionParametersName} name
   */
  constructor(t) {
    const e = s.shortintcompactpublickeyencryptionparameters_new(t);
    return this.__wbg_ptr = e >>> 0, uu.register(this, this.__wbg_ptr, this), this;
  }
  /**
   * @param {number} encryption_lwe_dimension
   * @param {ShortintNoiseDistribution} encryption_noise_distribution
   * @param {bigint} message_modulus
   * @param {bigint} carry_modulus
   * @param {number} modulus_power_of_2_exponent
   * @param {number} ks_base_log
   * @param {number} ks_level
   * @param {ShortintEncryptionKeyChoice} encryption_key_choice
   * @returns {ShortintCompactPublicKeyEncryptionParameters}
   */
  static new_parameters(t, e, r, i, o, a, u, _) {
    E(e, ra);
    const l = s.shortintcompactpublickeyencryptionparameters_new_parameters(t, e.__wbg_ptr, r, i, o, a, u, _);
    if (l[2])
      throw c(l[1]);
    return Vs.__wrap(l[0]);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintcompressedciphertext_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintcompressedpublickey_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintcompressedserverkey_free(n >>> 0, 1));
const Dp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_shortintnoisedistribution_free(n >>> 0, 1));
class ra {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ra.prototype);
    return e.__wbg_ptr = t, Dp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Dp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_shortintnoisedistribution_free(t, 0);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintparameters_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_shortintpublickey_free(n >>> 0, 1));
const Up = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_tfheclientkey_free(n >>> 0, 1));
class K {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(K.prototype);
    return e.__wbg_ptr = t, Up.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Up.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_tfheclientkey_free(t, 0);
  }
  /**
   * @param {TfheConfig} config
   * @returns {TfheClientKey}
   */
  static generate(t) {
    E(t, hs);
    const e = s.tfheclientkey_generate(t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return K.__wrap(e[0]);
  }
  /**
   * @param {TfheConfig} config
   * @param {any} seed
   * @returns {TfheClientKey}
   */
  static generate_with_seed(t, e) {
    E(t, hs);
    const r = s.tfheclientkey_generate_with_seed(t.__wbg_ptr, e);
    if (r[2])
      throw c(r[1]);
    return K.__wrap(r[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.tfheclientkey_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {TfheClientKey}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.tfheclientkey_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return K.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.tfheclientkey_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {TfheClientKey}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.tfheclientkey_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return K.__wrap(o[0]);
  }
}
const Mp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_tfhecompactpublickey_free(n >>> 0, 1));
class $e {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create($e.prototype);
    return e.__wbg_ptr = t, Mp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Mp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_tfhecompactpublickey_free(t, 0);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {TfheCompactPublicKey}
   */
  static new(t) {
    E(t, K);
    const e = s.tfhecompactpublickey_new(t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return $e.__wrap(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.tfhecompactpublickey_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {TfheCompactPublicKey}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.tfhecompactpublickey_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return $e.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.tfhecompactpublickey_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {TfheCompactPublicKey}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.tfhecompactpublickey_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return $e.__wrap(o[0]);
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @param {ShortintCompactPublicKeyEncryptionParameters} conformance_params
   * @returns {TfheCompactPublicKey}
   */
  static safe_deserialize_conformant(t, e, r) {
    const i = q(t, s.__wbindgen_malloc), o = j;
    E(r, Vs);
    const a = s.tfhecompactpublickey_safe_deserialize_conformant(i, o, e, r.__wbg_ptr);
    if (a[2])
      throw c(a[1]);
    return $e.__wrap(a[0]);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_tfhecompressedcompactpublickey_free(n >>> 0, 1));
const jp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_tfhecompressedpublickey_free(n >>> 0, 1));
class pt {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(pt.prototype);
    return e.__wbg_ptr = t, jp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, jp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_tfhecompressedpublickey_free(t, 0);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {TfheCompressedPublicKey}
   */
  static new(t) {
    E(t, K);
    const e = s.tfhecompressedpublickey_new(t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return pt.__wrap(e[0]);
  }
  /**
   * @returns {TfhePublicKey}
   */
  decompress() {
    const t = s.tfhecompressedpublickey_decompress(this.__wbg_ptr);
    if (t[2])
      throw c(t[1]);
    return ht.__wrap(t[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.tfhecompressedpublickey_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {TfheCompressedPublicKey}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.tfhecompressedpublickey_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return pt.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.tfhecompressedpublickey_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {TfheCompressedPublicKey}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.tfhecompressedpublickey_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return pt.__wrap(o[0]);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_tfhecompressedserverkey_free(n >>> 0, 1));
const Gp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_tfheconfig_free(n >>> 0, 1));
class hs {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(hs.prototype);
    return e.__wbg_ptr = t, Gp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Gp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_tfheconfig_free(t, 0);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_tfheconfigbuilder_free(n >>> 0, 1));
const Hp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_tfhepublickey_free(n >>> 0, 1));
class ht {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ht.prototype);
    return e.__wbg_ptr = t, Hp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Hp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_tfhepublickey_free(t, 0);
  }
  /**
   * @param {TfheClientKey} client_key
   * @returns {TfhePublicKey}
   */
  static new(t) {
    E(t, K);
    const e = s.tfhepublickey_new(t.__wbg_ptr);
    if (e[2])
      throw c(e[1]);
    return ht.__wrap(e[0]);
  }
  /**
   * @returns {Uint8Array}
   */
  serialize() {
    const t = s.tfhepublickey_serialize(this.__wbg_ptr);
    if (t[3])
      throw c(t[2]);
    var e = Q(t[0], t[1]).slice();
    return s.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} buffer
   * @returns {TfhePublicKey}
   */
  static deserialize(t) {
    const e = q(t, s.__wbindgen_malloc), r = j, i = s.tfhepublickey_deserialize(e, r);
    if (i[2])
      throw c(i[1]);
    return ht.__wrap(i[0]);
  }
  /**
   * @param {bigint} serialized_size_limit
   * @returns {Uint8Array}
   */
  safe_serialize(t) {
    const e = s.tfhepublickey_safe_serialize(this.__wbg_ptr, t);
    if (e[3])
      throw c(e[2]);
    var r = Q(e[0], e[1]).slice();
    return s.__wbindgen_free(e[0], e[1] * 1, 1), r;
  }
  /**
   * @param {Uint8Array} buffer
   * @param {bigint} serialized_size_limit
   * @returns {TfhePublicKey}
   */
  static safe_deserialize(t, e) {
    const r = q(t, s.__wbindgen_malloc), i = j, o = s.tfhepublickey_safe_deserialize(r, i, e);
    if (o[2])
      throw c(o[1]);
    return ht.__wrap(o[0]);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_tfheserverkey_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => s.__wbg_tfhe_free(n >>> 0, 1));
const Vp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => s.__wbg_wbg_rayon_poolbuilder_free(n >>> 0, 1));
class na {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(na.prototype);
    return e.__wbg_ptr = t, Vp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Vp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    s.__wbg_wbg_rayon_poolbuilder_free(t, 0);
  }
  /**
   * @returns {number}
   */
  numThreads() {
    return s.wbg_rayon_poolbuilder_numThreads(this.__wbg_ptr) >>> 0;
  }
  /**
   * @returns {number}
   */
  receiver() {
    return s.wbg_rayon_poolbuilder_receiver(this.__wbg_ptr) >>> 0;
  }
  build() {
    s.wbg_rayon_poolbuilder_build(this.__wbg_ptr);
  }
}
async function I2(n, t) {
  if (typeof Response == "function" && n instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(n, t);
      } catch (r) {
        if (n.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", r);
        else
          throw r;
      }
    const e = await n.arrayBuffer();
    return await WebAssembly.instantiate(e, t);
  } else {
    const e = await WebAssembly.instantiate(n, t);
    return e instanceof WebAssembly.Instance ? { instance: e, module: n } : e;
  }
}
function O2() {
  const n = {};
  return n.wbg = {}, n.wbg.__wbg_BigInt_470dd987b8190f8e = function(t) {
    return BigInt(t);
  }, n.wbg.__wbg_BigInt_ddea6d2f55558acb = function() {
    return Vi(function(t) {
      return BigInt(t);
    }, arguments);
  }, n.wbg.__wbg_buffer_609cc3eee51ed158 = function(t) {
    return t.buffer;
  }, n.wbg.__wbg_call_672a4d21634d4a24 = function() {
    return Vi(function(t, e) {
      return t.call(e);
    }, arguments);
  }, n.wbg.__wbg_call_7cccdd69e0791ae2 = function() {
    return Vi(function(t, e, r) {
      return t.call(e, r);
    }, arguments);
  }, n.wbg.__wbg_crypto_574e78ad8b13b65f = function(t) {
    return t.crypto;
  }, n.wbg.__wbg_error_7534b8e9a36f1ab4 = function(t, e) {
    let r, i;
    try {
      r = t, i = e, console.error(xs(t, e));
    } finally {
      s.__wbindgen_free(r, i, 1);
    }
  }, n.wbg.__wbg_getRandomValues_b8f5dbd5f3995a9e = function() {
    return Vi(function(t, e) {
      t.getRandomValues(e);
    }, arguments);
  }, n.wbg.__wbg_getTime_46267b1c24877e30 = function(t) {
    return t.getTime();
  }, n.wbg.__wbg_instanceof_Window_def73ea0955fc569 = function(t) {
    let e;
    try {
      e = t instanceof Window;
    } catch {
      e = !1;
    }
    return e;
  }, n.wbg.__wbg_msCrypto_a61aeb35a24c1329 = function(t) {
    return t.msCrypto;
  }, n.wbg.__wbg_new0_f788a2397c7ca929 = function() {
    return /* @__PURE__ */ new Date();
  }, n.wbg.__wbg_new_8a6f238a6ece86ea = function() {
    return new Error();
  }, n.wbg.__wbg_new_a12002a7f91c75be = function(t) {
    return new Uint8Array(t);
  }, n.wbg.__wbg_newnoargs_105ed471475aaf50 = function(t, e) {
    return new Function(xs(t, e));
  }, n.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(t, e, r) {
    return new Uint8Array(t, e >>> 0, r >>> 0);
  }, n.wbg.__wbg_newwithlength_a381634e90c276d4 = function(t) {
    return new Uint8Array(t >>> 0);
  }, n.wbg.__wbg_node_905d3e251edff8a2 = function(t) {
    return t.node;
  }, n.wbg.__wbg_process_dc0fbacc7c1c06f7 = function(t) {
    return t.process;
  }, n.wbg.__wbg_randomFillSync_ac0988aba3254290 = function() {
    return Vi(function(t, e) {
      t.randomFillSync(e);
    }, arguments);
  }, n.wbg.__wbg_require_60cc747a6bc5215a = function() {
    return Vi(function() {
      return module.require;
    }, arguments);
  }, n.wbg.__wbg_set_65595bdd868b3009 = function(t, e, r) {
    t.set(e, r >>> 0);
  }, n.wbg.__wbg_stack_0ed75d68575b0f3c = function(t, e) {
    const r = e.stack, i = go(r, s.__wbindgen_malloc, s.__wbindgen_realloc), o = j;
    nr().setInt32(t + 4 * 1, o, !0), nr().setInt32(t + 4 * 0, i, !0);
  }, n.wbg.__wbg_startWorkers_2ca11761e08ff5d5 = function(t, e, r) {
    return P2(t, e, na.__wrap(r));
  }, n.wbg.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {
    const t = typeof Co > "u" ? null : Co;
    return di(t) ? 0 : Ps(t);
  }, n.wbg.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {
    const t = typeof globalThis > "u" ? null : globalThis;
    return di(t) ? 0 : Ps(t);
  }, n.wbg.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {
    const t = typeof self > "u" ? null : self;
    return di(t) ? 0 : Ps(t);
  }, n.wbg.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {
    const t = typeof window > "u" ? null : window;
    return di(t) ? 0 : Ps(t);
  }, n.wbg.__wbg_subarray_aa9065fa9dc5df96 = function(t, e, r) {
    return t.subarray(e >>> 0, r >>> 0);
  }, n.wbg.__wbg_toString_2f76f493957b63da = function(t, e, r) {
    const i = e.toString(r), o = go(i, s.__wbindgen_malloc, s.__wbindgen_realloc), a = j;
    nr().setInt32(t + 4 * 1, a, !0), nr().setInt32(t + 4 * 0, o, !0);
  }, n.wbg.__wbg_toString_c813bbd34d063839 = function(t) {
    return t.toString();
  }, n.wbg.__wbg_versions_c01dfd4722a88165 = function(t) {
    return t.versions;
  }, n.wbg.__wbindgen_bigint_from_i128 = function(t, e) {
    return t << BigInt(64) | BigInt.asUintN(64, e);
  }, n.wbg.__wbindgen_bigint_from_i64 = function(t) {
    return t;
  }, n.wbg.__wbindgen_bigint_from_u128 = function(t, e) {
    return BigInt.asUintN(64, t) << BigInt(64) | BigInt.asUintN(64, e);
  }, n.wbg.__wbindgen_bigint_from_u64 = function(t) {
    return BigInt.asUintN(64, t);
  }, n.wbg.__wbindgen_bigint_get_as_i64 = function(t, e) {
    const r = e, i = typeof r == "bigint" ? r : void 0;
    nr().setBigInt64(t + 8 * 1, di(i) ? BigInt(0) : i, !0), nr().setInt32(t + 4 * 0, !di(i), !0);
  }, n.wbg.__wbindgen_bit_and = function(t, e) {
    return t & e;
  }, n.wbg.__wbindgen_bit_or = function(t, e) {
    return t | e;
  }, n.wbg.__wbindgen_debug_string = function(t, e) {
    const r = Tu(e), i = go(r, s.__wbindgen_malloc, s.__wbindgen_realloc), o = j;
    nr().setInt32(t + 4 * 1, o, !0), nr().setInt32(t + 4 * 0, i, !0);
  }, n.wbg.__wbindgen_error_new = function(t, e) {
    return new Error(xs(t, e));
  }, n.wbg.__wbindgen_init_externref_table = function() {
    const t = s.__wbindgen_export_2, e = t.grow(4);
    t.set(0, void 0), t.set(e + 0, void 0), t.set(e + 1, null), t.set(e + 2, !0), t.set(e + 3, !1);
  }, n.wbg.__wbindgen_is_function = function(t) {
    return typeof t == "function";
  }, n.wbg.__wbindgen_is_object = function(t) {
    const e = t;
    return typeof e == "object" && e !== null;
  }, n.wbg.__wbindgen_is_string = function(t) {
    return typeof t == "string";
  }, n.wbg.__wbindgen_is_undefined = function(t) {
    return t === void 0;
  }, n.wbg.__wbindgen_jsval_eq = function(t, e) {
    return t === e;
  }, n.wbg.__wbindgen_lt = function(t, e) {
    return t < e;
  }, n.wbg.__wbindgen_memory = function() {
    return s.memory;
  }, n.wbg.__wbindgen_module = function() {
    return ro.__wbindgen_wasm_module;
  }, n.wbg.__wbindgen_neg = function(t) {
    return -t;
  }, n.wbg.__wbindgen_number_new = function(t) {
    return t;
  }, n.wbg.__wbindgen_shl = function(t, e) {
    return t << e;
  }, n.wbg.__wbindgen_shr = function(t, e) {
    return t >> e;
  }, n.wbg.__wbindgen_string_get = function(t, e) {
    const r = e, i = typeof r == "string" ? r : void 0;
    var o = di(i) ? 0 : go(i, s.__wbindgen_malloc, s.__wbindgen_realloc), a = j;
    nr().setInt32(t + 4 * 1, a, !0), nr().setInt32(t + 4 * 0, o, !0);
  }, n.wbg.__wbindgen_string_new = function(t, e) {
    return xs(t, e);
  }, n.wbg.__wbindgen_throw = function(t, e) {
    throw new Error(xs(t, e));
  }, n;
}
function T2(n, t) {
  n.wbg.memory = t || new WebAssembly.Memory({ initial: 21, maximum: 16384, shared: !0 });
}
function C2(n, t, e) {
  if (s = n.exports, ro.__wbindgen_wasm_module = t, Fs = null, ks = null, typeof e < "u" && (typeof e != "number" || e === 0 || e % 65536 !== 0))
    throw "invalid stack size";
  return s.__wbindgen_start(e), s;
}
async function ro(n, t) {
  if (s !== void 0) return s;
  let e;
  typeof n < "u" && (Object.getPrototypeOf(n) === Object.prototype ? { module_or_path: n, memory: t, thread_stack_size: e } = n : console.warn("using deprecated parameters for the initialization function; pass a single object instead")), typeof n > "u" && (n = new URL(
    /* @vite-ignore */
    "/tfhe_bg.wasm",
    import.meta.url
  ));
  const r = O2();
  (typeof n == "string" || typeof Request == "function" && n instanceof Request || typeof URL == "function" && n instanceof URL) && (n = fetch(n)), T2(r, t);
  const { instance: i, module: o } = await I2(await n, r);
  return C2(i, o, e);
}
var N2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  CompactCiphertextList: ui,
  CompactCiphertextListBuilder: eo,
  CompactCiphertextListExpander: ls,
  CompactPkeCrs: We,
  FheBool: pr,
  FheInt10: wr,
  FheInt1024: dr,
  FheInt104: gr,
  FheInt112: yr,
  FheInt12: br,
  FheInt120: mr,
  FheInt128: Ar,
  FheInt136: Er,
  FheInt14: vr,
  FheInt144: xr,
  FheInt152: Rr,
  FheInt16: zr,
  FheInt160: Br,
  FheInt168: Sr,
  FheInt176: Pr,
  FheInt184: kr,
  FheInt192: Fr,
  FheInt2: Ir,
  FheInt200: Or,
  FheInt2048: Tr,
  FheInt208: Cr,
  FheInt216: Nr,
  FheInt224: Lr,
  FheInt232: Dr,
  FheInt24: Ur,
  FheInt240: Mr,
  FheInt248: jr,
  FheInt256: Gr,
  FheInt32: Hr,
  FheInt4: Vr,
  FheInt40: qr,
  FheInt48: Qr,
  FheInt512: Kr,
  FheInt56: Wr,
  FheInt6: Jr,
  FheInt64: $r,
  FheInt72: Yr,
  FheInt8: Zr,
  FheInt80: Xr,
  FheInt88: tn,
  FheInt96: en,
  FheUint10: rn,
  FheUint1024: nn,
  FheUint104: sn,
  FheUint112: on,
  FheUint12: an,
  FheUint120: cn,
  FheUint128: un,
  FheUint136: _n,
  FheUint14: fn,
  FheUint144: ln,
  FheUint152: hn,
  FheUint16: pn,
  FheUint160: wn,
  FheUint168: dn,
  FheUint176: gn,
  FheUint184: yn,
  FheUint192: bn,
  FheUint2: mn,
  FheUint200: An,
  FheUint2048: En,
  FheUint208: vn,
  FheUint216: xn,
  FheUint224: Rn,
  FheUint232: zn,
  FheUint24: Bn,
  FheUint240: Sn,
  FheUint248: Pn,
  FheUint256: kn,
  FheUint32: Fn,
  FheUint4: In,
  FheUint40: On,
  FheUint48: Tn,
  FheUint512: Cn,
  FheUint56: Nn,
  FheUint6: Ln,
  FheUint64: Dn,
  FheUint72: Un,
  FheUint8: Mn,
  FheUint80: jn,
  FheUint88: Gn,
  FheUint96: Hn,
  ProvenCompactCiphertextList: es,
  ShortintCompactPublicKeyEncryptionParameters: Vs,
  ShortintNoiseDistribution: ra,
  TfheClientKey: K,
  TfheCompactPublicKey: $e,
  TfheCompressedPublicKey: pt,
  TfheConfig: hs,
  TfhePublicKey: ht,
  ZkComputeLoad: Bg,
  default: ro,
  initThreadPool: __,
  init_panic_hook: u_,
  wbg_rayon_PoolBuilder: na,
  wbg_rayon_start_worker: F2
});
let rt, ee = 0, Is = null;
function rs() {
  return (Is === null || Is.byteLength === 0) && (Is = new Uint8Array(rt.memory.buffer)), Is;
}
const vo = typeof TextEncoder < "u" ? new TextEncoder("utf-8") : { encode: () => {
  throw Error("TextEncoder not available");
} }, L2 = typeof vo.encodeInto == "function" ? function(n, t) {
  return vo.encodeInto(n, t);
} : function(n, t) {
  const e = vo.encode(n);
  return t.set(e), {
    read: n.length,
    written: e.length
  };
};
function Si(n, t, e) {
  if (e === void 0) {
    const u = vo.encode(n), _ = t(u.length, 1) >>> 0;
    return rs().subarray(_, _ + u.length).set(u), ee = u.length, _;
  }
  let r = n.length, i = t(r, 1) >>> 0;
  const o = rs();
  let a = 0;
  for (; a < r; a++) {
    const u = n.charCodeAt(a);
    if (u > 127) break;
    o[i + a] = u;
  }
  if (a !== r) {
    a !== 0 && (n = n.slice(a)), i = e(i, r, r = a + n.length * 3, 1) >>> 0;
    const u = rs().subarray(i + a, i + r), _ = L2(n, u);
    a += _.written, i = e(i, r, a, 1) >>> 0;
  }
  return ee = a, i;
}
let bi = null;
function Ue() {
  return (bi === null || bi.buffer.detached === !0 || bi.buffer.detached === void 0 && bi.buffer !== rt.memory.buffer) && (bi = new DataView(rt.memory.buffer)), bi;
}
function Wi(n) {
  const t = rt.__externref_table_alloc();
  return rt.__wbindgen_export_4.set(t, n), t;
}
function gi(n, t) {
  try {
    return n.apply(this, t);
  } catch (e) {
    const r = Wi(e);
    rt.__wbindgen_exn_store(r);
  }
}
const Sg = typeof TextDecoder < "u" ? new TextDecoder("utf-8", { ignoreBOM: !0, fatal: !0 }) : { decode: () => {
  throw Error("TextDecoder not available");
} };
typeof TextDecoder < "u" && Sg.decode();
function Rs(n, t) {
  return n = n >>> 0, Sg.decode(rs().subarray(n, n + t));
}
function ai(n) {
  return n == null;
}
function Cu(n) {
  const t = typeof n;
  if (t == "number" || t == "boolean" || n == null)
    return `${n}`;
  if (t == "string")
    return `"${n}"`;
  if (t == "symbol") {
    const i = n.description;
    return i == null ? "Symbol" : `Symbol(${i})`;
  }
  if (t == "function") {
    const i = n.name;
    return typeof i == "string" && i.length > 0 ? `Function(${i})` : "Function";
  }
  if (Array.isArray(n)) {
    const i = n.length;
    let o = "[";
    i > 0 && (o += Cu(n[0]));
    for (let a = 1; a < i; a++)
      o += ", " + Cu(n[a]);
    return o += "]", o;
  }
  const e = /\[object ([^\]]+)\]/.exec(toString.call(n));
  let r;
  if (e && e.length > 1)
    r = e[1];
  else
    return toString.call(n);
  if (r == "Object")
    try {
      return "Object(" + JSON.stringify(n) + ")";
    } catch {
      return "Object";
    }
  return n instanceof Error ? `${n.name}: ${n.message}
${n.stack}` : r;
}
function Fi(n, t) {
  if (!(n instanceof t))
    throw new Error(`expected instance of ${t.name}`);
}
function Xe(n, t) {
  return n = n >>> 0, rs().subarray(n / 1, n / 1 + t);
}
function tr(n, t) {
  const e = t(n.length * 1, 1) >>> 0;
  return rs().set(n, e / 1), ee = n.length, e;
}
function Ui(n) {
  const t = rt.__wbindgen_export_4.get(n);
  return rt.__externref_table_dealloc(n), t;
}
function D2(n, t) {
  const e = Si(t, rt.__wbindgen_malloc, rt.__wbindgen_realloc), r = ee, i = rt.new_server_id_addr(n, e, r);
  if (i[2])
    throw Ui(i[1]);
  return ps.__wrap(i[0]);
}
function Pg(n, t) {
  const e = t(n.length * 4, 4) >>> 0;
  for (let r = 0; r < n.length; r++) {
    const i = Wi(n[r]);
    Ue().setUint32(e + 4 * r, i, !0);
  }
  return ee = n.length, e;
}
function U2(n, t, e) {
  const r = Pg(n, rt.__wbindgen_malloc), i = ee, o = Si(t, rt.__wbindgen_malloc, rt.__wbindgen_realloc), a = ee, u = Si(e, rt.__wbindgen_malloc, rt.__wbindgen_realloc), _ = ee, l = rt.new_client(r, i, o, a, u, _);
  if (l[2])
    throw Ui(l[1]);
  return ia.__wrap(l[0]);
}
function kg(n, t) {
  n = n >>> 0;
  const e = Ue(), r = [];
  for (let i = n; i < n + 4 * t; i += 4)
    r.push(rt.__wbindgen_export_4.get(e.getUint32(i, !0)));
  return rt.__externref_drop_slice(n, t), r;
}
function M2() {
  const n = rt.ml_kem_pke_keygen();
  return Mi.__wrap(n);
}
function j2(n) {
  Fi(n, Mi);
  const t = rt.ml_kem_pke_get_pk(n.__wbg_ptr);
  return bs.__wrap(t);
}
function G2(n) {
  Fi(n, bs);
  const t = rt.ml_kem_pke_pk_to_u8vec(n.__wbg_ptr);
  if (t[3])
    throw Ui(t[2]);
  var e = Xe(t[0], t[1]).slice();
  return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
}
function H2(n) {
  Fi(n, Mi);
  const t = rt.ml_kem_pke_sk_to_u8vec(n.__wbg_ptr);
  if (t[3])
    throw Ui(t[2]);
  var e = Xe(t[0], t[1]).slice();
  return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
}
function V2(n) {
  const t = tr(n, rt.__wbindgen_malloc), e = ee, r = rt.u8vec_to_ml_kem_pke_pk(t, e);
  if (r[2])
    throw Ui(r[1]);
  return bs.__wrap(r[0]);
}
function q2(n) {
  const t = tr(n, rt.__wbindgen_malloc), e = ee, r = rt.u8vec_to_ml_kem_pke_sk(t, e);
  if (r[2])
    throw Ui(r[1]);
  return Mi.__wrap(r[0]);
}
function Q2(n, t, e, r, i, o, a) {
  Fi(n, ia), Fi(i, bs), Fi(o, Mi);
  const u = rt.process_user_decryption_resp_from_js(n.__wbg_ptr, t, e, r, i.__wbg_ptr, o.__wbg_ptr, a);
  if (u[3])
    throw Ui(u[2]);
  var _ = kg(u[0], u[1]).slice();
  return rt.__wbindgen_free(u[0], u[1] * 4, 4), _;
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_ciphertexthandle_free(n >>> 0, 1));
const qp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_client_free(n >>> 0, 1));
class ia {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ia.prototype);
    return e.__wbg_ptr = t, qp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, qp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_client_free(t, 0);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_cryptoboxct_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_eip712domainmsg_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_parseduserdecryptionrequest_free(n >>> 0, 1));
const Qp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_privateenckey_free(n >>> 0, 1));
class Mi {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Mi.prototype);
    return e.__wbg_ptr = t, Qp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Qp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_privateenckey_free(t, 0);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_privatesigkey_free(n >>> 0, 1));
const Kp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_publicenckey_free(n >>> 0, 1));
class bs {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(bs.prototype);
    return e.__wbg_ptr = t, Kp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Kp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_publicenckey_free(t, 0);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_publicsigkey_free(n >>> 0, 1));
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_requestid_free(n >>> 0, 1));
const Wp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_serveridaddr_free(n >>> 0, 1));
class ps {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(ps.prototype);
    return e.__wbg_ptr = t, Wp.register(e, e.__wbg_ptr, e), e;
  }
  static __unwrap(t) {
    return t instanceof ps ? t.__destroy_into_raw() : 0;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Wp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_serveridaddr_free(t, 0);
  }
}
const Jp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_typedciphertext_free(n >>> 0, 1));
class qs {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(qs.prototype);
    return e.__wbg_ptr = t, Jp.register(e, e.__wbg_ptr, e), e;
  }
  static __unwrap(t) {
    return t instanceof qs ? t.__destroy_into_raw() : 0;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Jp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_typedciphertext_free(t, 0);
  }
  /**
   * The actual ciphertext to decrypt, taken directly from fhevm.
   * @returns {Uint8Array}
   */
  get ciphertext() {
    const t = rt.__wbg_get_typedciphertext_ciphertext(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * The actual ciphertext to decrypt, taken directly from fhevm.
   * @param {Uint8Array} arg0
   */
  set ciphertext(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_name(this.__wbg_ptr, e, r);
  }
  /**
   * The type of plaintext encrypted. The type should match FheType from tfhe-rs:
   * <https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs>
   * @returns {number}
   */
  get fhe_type() {
    return rt.__wbg_get_typedciphertext_fhe_type(this.__wbg_ptr);
  }
  /**
   * The type of plaintext encrypted. The type should match FheType from tfhe-rs:
   * <https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs>
   * @param {number} arg0
   */
  set fhe_type(t) {
    rt.__wbg_set_typedciphertext_fhe_type(this.__wbg_ptr, t);
  }
  /**
   * The external handle of the ciphertext (the handle used in the copro).
   * @returns {Uint8Array}
   */
  get external_handle() {
    const t = rt.__wbg_get_typedciphertext_external_handle(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * The external handle of the ciphertext (the handle used in the copro).
   * @param {Uint8Array} arg0
   */
  set external_handle(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_version(this.__wbg_ptr, e, r);
  }
  /**
   * The ciphertext format, see CiphertextFormat documentation for details.
   * CiphertextFormat::default() is used if unspecified.
   * @returns {number}
   */
  get ciphertext_format() {
    return rt.__wbg_get_typedciphertext_ciphertext_format(this.__wbg_ptr);
  }
  /**
   * The ciphertext format, see CiphertextFormat documentation for details.
   * CiphertextFormat::default() is used if unspecified.
   * @param {number} arg0
   */
  set ciphertext_format(t) {
    rt.__wbg_set_typedciphertext_ciphertext_format(this.__wbg_ptr, t);
  }
}
const $p = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_typedplaintext_free(n >>> 0, 1));
class f_ {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(f_.prototype);
    return e.__wbg_ptr = t, $p.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, $p.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_typedplaintext_free(t, 0);
  }
  /**
   * The actual plaintext in bytes.
   * @returns {Uint8Array}
   */
  get bytes() {
    const t = rt.__wbg_get_typedplaintext_bytes(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * The actual plaintext in bytes.
   * @param {Uint8Array} arg0
   */
  set bytes(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_name(this.__wbg_ptr, e, r);
  }
  /**
   * The type of plaintext encrypted. The type should match FheType from tfhe-rs:
   * <https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs>
   * @returns {number}
   */
  get fhe_type() {
    return rt.__wbg_get_typedplaintext_fhe_type(this.__wbg_ptr);
  }
  /**
   * The type of plaintext encrypted. The type should match FheType from tfhe-rs:
   * <https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs>
   * @param {number} arg0
   */
  set fhe_type(t) {
    rt.__wbg_set_typedplaintext_fhe_type(this.__wbg_ptr, t);
  }
}
const Yp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_typedsigncryptedciphertext_free(n >>> 0, 1));
class Qs {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(Qs.prototype);
    return e.__wbg_ptr = t, Yp.register(e, e.__wbg_ptr, e), e;
  }
  static __unwrap(t) {
    return t instanceof Qs ? t.__destroy_into_raw() : 0;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Yp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_typedsigncryptedciphertext_free(t, 0);
  }
  /**
   * The type of plaintext encrypted. The type should match FheType from tfhe-rs:
   * <https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs>
   * @returns {number}
   */
  get fhe_type() {
    return rt.__wbg_get_typedciphertext_fhe_type(this.__wbg_ptr);
  }
  /**
   * The type of plaintext encrypted. The type should match FheType from tfhe-rs:
   * <https://github.com/zama-ai/tfhe-rs/blob/main/tfhe/src/high_level_api/mod.rs>
   * @param {number} arg0
   */
  set fhe_type(t) {
    rt.__wbg_set_typedciphertext_fhe_type(this.__wbg_ptr, t);
  }
  /**
   * The signcrypted payload, using a hybrid encryption approach in
   * sign-then-encrypt.
   * @returns {Uint8Array}
   */
  get signcrypted_ciphertext() {
    const t = rt.__wbg_get_typedsigncryptedciphertext_signcrypted_ciphertext(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * The signcrypted payload, using a hybrid encryption approach in
   * sign-then-encrypt.
   * @param {Uint8Array} arg0
   */
  set signcrypted_ciphertext(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_name(this.__wbg_ptr, e, r);
  }
  /**
   * The external handles that were originally in the request.
   * @returns {Uint8Array}
   */
  get external_handle() {
    const t = rt.__wbg_get_typedsigncryptedciphertext_external_handle(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * The external handles that were originally in the request.
   * @param {Uint8Array} arg0
   */
  set external_handle(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_version(this.__wbg_ptr, e, r);
  }
  /**
   * The packing factor determines whether the decrypted plaintext
   * has a different way of packing compared to what is specified in the plaintext modulus.
   * @returns {number}
   */
  get packing_factor() {
    return rt.__wbg_get_typedciphertext_ciphertext_format(this.__wbg_ptr) >>> 0;
  }
  /**
   * The packing factor determines whether the decrypted plaintext
   * has a different way of packing compared to what is specified in the plaintext modulus.
   * @param {number} arg0
   */
  set packing_factor(t) {
    rt.__wbg_set_typedciphertext_ciphertext_format(this.__wbg_ptr, t);
  }
}
typeof FinalizationRegistry > "u" || new FinalizationRegistry((n) => rt.__wbg_userdecryptionrequest_free(n >>> 0, 1));
const K2 = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_userdecryptionresponse_free(n >>> 0, 1));
class l_ {
  static __unwrap(t) {
    return t instanceof l_ ? t.__destroy_into_raw() : 0;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, K2.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_userdecryptionresponse_free(t, 0);
  }
  /**
   * @returns {Uint8Array}
   */
  get signature() {
    const t = rt.__wbg_get_userdecryptionresponse_signature(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * @param {Uint8Array} arg0
   */
  set signature(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_name(this.__wbg_ptr, e, r);
  }
  /**
   * This is the external signature created from the Eip712 domain
   * on the structure, where userDecryptedShare is bc2wrap::serialize(&payload)
   * struct UserDecryptResponseVerification {
   *      bytes publicKey;
   *      uint256\[\] ctHandles;
   *      bytes userDecryptedShare;
   * }
   * @returns {Uint8Array}
   */
  get external_signature() {
    const t = rt.__wbg_get_userdecryptionresponse_external_signature(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * This is the external signature created from the Eip712 domain
   * on the structure, where userDecryptedShare is bc2wrap::serialize(&payload)
   * struct UserDecryptResponseVerification {
   *      bytes publicKey;
   *      uint256\[\] ctHandles;
   *      bytes userDecryptedShare;
   * }
   * @param {Uint8Array} arg0
   */
  set external_signature(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_version(this.__wbg_ptr, e, r);
  }
  /**
   * The actual \[UserDecryptionResponsePayload\].
   * @returns {UserDecryptionResponsePayload | undefined}
   */
  get payload() {
    const t = rt.__wbg_get_userdecryptionresponse_payload(this.__wbg_ptr);
    return t === 0 ? void 0 : No.__wrap(t);
  }
  /**
   * The actual \[UserDecryptionResponsePayload\].
   * @param {UserDecryptionResponsePayload | null} [arg0]
   */
  set payload(t) {
    let e = 0;
    ai(t) || (Fi(t, No), e = t.__destroy_into_raw()), rt.__wbg_set_userdecryptionresponse_payload(this.__wbg_ptr, e);
  }
}
const Zp = typeof FinalizationRegistry > "u" ? { register: () => {
}, unregister: () => {
} } : new FinalizationRegistry((n) => rt.__wbg_userdecryptionresponsepayload_free(n >>> 0, 1));
class No {
  static __wrap(t) {
    t = t >>> 0;
    const e = Object.create(No.prototype);
    return e.__wbg_ptr = t, Zp.register(e, e.__wbg_ptr, e), e;
  }
  __destroy_into_raw() {
    const t = this.__wbg_ptr;
    return this.__wbg_ptr = 0, Zp.unregister(this), t;
  }
  free() {
    const t = this.__destroy_into_raw();
    rt.__wbg_userdecryptionresponsepayload_free(t, 0);
  }
  /**
   * The server's signature verification key, Encoded using SEC1.
   * Needed to validate the response, but MUST also be linked to a list of
   * trusted keys.
   * @returns {Uint8Array}
   */
  get verification_key() {
    const t = rt.__wbg_get_userdecryptionresponsepayload_verification_key(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * The server's signature verification key, Encoded using SEC1.
   * Needed to validate the response, but MUST also be linked to a list of
   * trusted keys.
   * @param {Uint8Array} arg0
   */
  set verification_key(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_name(this.__wbg_ptr, e, r);
  }
  /**
   * This is needed to ensure the response corresponds to the request.
   * It is the digest of UserDecryptionLinker hashed using EIP712
   * under the given domain in the request.
   * @returns {Uint8Array}
   */
  get digest() {
    const t = rt.__wbg_get_userdecryptionresponsepayload_digest(this.__wbg_ptr);
    var e = Xe(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 1, 1), e;
  }
  /**
   * This is needed to ensure the response corresponds to the request.
   * It is the digest of UserDecryptionLinker hashed using EIP712
   * under the given domain in the request.
   * @param {Uint8Array} arg0
   */
  set digest(t) {
    const e = tr(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_eip712domainmsg_version(this.__wbg_ptr, e, r);
  }
  /**
   * The resulting signcrypted ciphertexts, each ciphertext
   * must be decrypted and then reconstructed with the other shares
   * to produce the final plaintext.
   * @returns {TypedSigncryptedCiphertext[]}
   */
  get signcrypted_ciphertexts() {
    const t = rt.__wbg_get_userdecryptionresponsepayload_signcrypted_ciphertexts(this.__wbg_ptr);
    var e = kg(t[0], t[1]).slice();
    return rt.__wbindgen_free(t[0], t[1] * 4, 4), e;
  }
  /**
   * The resulting signcrypted ciphertexts, each ciphertext
   * must be decrypted and then reconstructed with the other shares
   * to produce the final plaintext.
   * @param {TypedSigncryptedCiphertext[]} arg0
   */
  set signcrypted_ciphertexts(t) {
    const e = Pg(t, rt.__wbindgen_malloc), r = ee;
    rt.__wbg_set_userdecryptionresponsepayload_signcrypted_ciphertexts(this.__wbg_ptr, e, r);
  }
  /**
   * The ID of the MPC party doing the user decryption. Used for polynomial
   * reconstruction.
   * @returns {number}
   */
  get party_id() {
    return rt.__wbg_get_userdecryptionresponsepayload_party_id(this.__wbg_ptr) >>> 0;
  }
  /**
   * The ID of the MPC party doing the user decryption. Used for polynomial
   * reconstruction.
   * @param {number} arg0
   */
  set party_id(t) {
    rt.__wbg_set_userdecryptionresponsepayload_party_id(this.__wbg_ptr, t);
  }
  /**
   * The degree of the sharing scheme used.
   * @returns {number}
   */
  get degree() {
    return rt.__wbg_get_userdecryptionresponsepayload_degree(this.__wbg_ptr) >>> 0;
  }
  /**
   * The degree of the sharing scheme used.
   * @param {number} arg0
   */
  set degree(t) {
    rt.__wbg_set_userdecryptionresponsepayload_degree(this.__wbg_ptr, t);
  }
}
async function W2(n, t) {
  if (typeof Response == "function" && n instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(n, t);
      } catch (r) {
        if (n.headers.get("Content-Type") != "application/wasm")
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", r);
        else
          throw r;
      }
    const e = await n.arrayBuffer();
    return await WebAssembly.instantiate(e, t);
  } else {
    const e = await WebAssembly.instantiate(n, t);
    return e instanceof WebAssembly.Instance ? { instance: e, module: n } : e;
  }
}
function J2() {
  const n = {};
  return n.wbg = {}, n.wbg.__wbg_String_8f0eb39a4a4c2f66 = function(t, e) {
    const r = String(e), i = Si(r, rt.__wbindgen_malloc, rt.__wbindgen_realloc), o = ee;
    Ue().setInt32(t + 4 * 1, o, !0), Ue().setInt32(t + 4 * 0, i, !0);
  }, n.wbg.__wbg_buffer_609cc3eee51ed158 = function(t) {
    return t.buffer;
  }, n.wbg.__wbg_call_672a4d21634d4a24 = function() {
    return gi(function(t, e) {
      return t.call(e);
    }, arguments);
  }, n.wbg.__wbg_call_7cccdd69e0791ae2 = function() {
    return gi(function(t, e, r) {
      return t.call(e, r);
    }, arguments);
  }, n.wbg.__wbg_crypto_ed58b8e10a292839 = function(t) {
    return t.crypto;
  }, n.wbg.__wbg_done_769e5ede4b31c67b = function(t) {
    return t.done;
  }, n.wbg.__wbg_error_7534b8e9a36f1ab4 = function(t, e) {
    let r, i;
    try {
      r = t, i = e, console.error(Rs(t, e));
    } finally {
      rt.__wbindgen_free(r, i, 1);
    }
  }, n.wbg.__wbg_getRandomValues_bcb4912f16000dc4 = function() {
    return gi(function(t, e) {
      t.getRandomValues(e);
    }, arguments);
  }, n.wbg.__wbg_get_67b2ba62fc30de12 = function() {
    return gi(function(t, e) {
      return Reflect.get(t, e);
    }, arguments);
  }, n.wbg.__wbg_get_b9b93047fe3cf45b = function(t, e) {
    return t[e >>> 0];
  }, n.wbg.__wbg_getwithrefkey_1dc361bd10053bfe = function(t, e) {
    return t[e];
  }, n.wbg.__wbg_instanceof_ArrayBuffer_e14585432e3737fc = function(t) {
    let e;
    try {
      e = t instanceof ArrayBuffer;
    } catch {
      e = !1;
    }
    return e;
  }, n.wbg.__wbg_instanceof_Uint8Array_17156bcf118086a9 = function(t) {
    let e;
    try {
      e = t instanceof Uint8Array;
    } catch {
      e = !1;
    }
    return e;
  }, n.wbg.__wbg_isArray_a1eab7e0d067391b = function(t) {
    return Array.isArray(t);
  }, n.wbg.__wbg_isSafeInteger_343e2beeeece1bb0 = function(t) {
    return Number.isSafeInteger(t);
  }, n.wbg.__wbg_iterator_9a24c88df860dc65 = function() {
    return Symbol.iterator;
  }, n.wbg.__wbg_length_a446193dc22c12f8 = function(t) {
    return t.length;
  }, n.wbg.__wbg_length_e2d2a49132c1b256 = function(t) {
    return t.length;
  }, n.wbg.__wbg_msCrypto_0a36e2ec3a343d26 = function(t) {
    return t.msCrypto;
  }, n.wbg.__wbg_new_8a6f238a6ece86ea = function() {
    return new Error();
  }, n.wbg.__wbg_new_a12002a7f91c75be = function(t) {
    return new Uint8Array(t);
  }, n.wbg.__wbg_newnoargs_105ed471475aaf50 = function(t, e) {
    return new Function(Rs(t, e));
  }, n.wbg.__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a = function(t, e, r) {
    return new Uint8Array(t, e >>> 0, r >>> 0);
  }, n.wbg.__wbg_newwithlength_a381634e90c276d4 = function(t) {
    return new Uint8Array(t >>> 0);
  }, n.wbg.__wbg_next_25feadfc0913fea9 = function(t) {
    return t.next;
  }, n.wbg.__wbg_next_6574e1a8a62d1055 = function() {
    return gi(function(t) {
      return t.next();
    }, arguments);
  }, n.wbg.__wbg_node_02999533c4ea02e3 = function(t) {
    return t.node;
  }, n.wbg.__wbg_process_5c1d670bc53614b8 = function(t) {
    return t.process;
  }, n.wbg.__wbg_randomFillSync_ab2cfe79ebbf2740 = function() {
    return gi(function(t, e) {
      t.randomFillSync(e);
    }, arguments);
  }, n.wbg.__wbg_require_79b1e9274cde3c87 = function() {
    return gi(function() {
      return module.require;
    }, arguments);
  }, n.wbg.__wbg_serveridaddr_new = function(t) {
    return ps.__wrap(t);
  }, n.wbg.__wbg_serveridaddr_unwrap = function(t) {
    return ps.__unwrap(t);
  }, n.wbg.__wbg_set_65595bdd868b3009 = function(t, e, r) {
    t.set(e, r >>> 0);
  }, n.wbg.__wbg_stack_0ed75d68575b0f3c = function(t, e) {
    const r = e.stack, i = Si(r, rt.__wbindgen_malloc, rt.__wbindgen_realloc), o = ee;
    Ue().setInt32(t + 4 * 1, o, !0), Ue().setInt32(t + 4 * 0, i, !0);
  }, n.wbg.__wbg_static_accessor_GLOBAL_88a902d13a557d07 = function() {
    const t = typeof Co > "u" ? null : Co;
    return ai(t) ? 0 : Wi(t);
  }, n.wbg.__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0 = function() {
    const t = typeof globalThis > "u" ? null : globalThis;
    return ai(t) ? 0 : Wi(t);
  }, n.wbg.__wbg_static_accessor_SELF_37c5d418e4bf5819 = function() {
    const t = typeof self > "u" ? null : self;
    return ai(t) ? 0 : Wi(t);
  }, n.wbg.__wbg_static_accessor_WINDOW_5de37043a91a9c40 = function() {
    const t = typeof window > "u" ? null : window;
    return ai(t) ? 0 : Wi(t);
  }, n.wbg.__wbg_subarray_aa9065fa9dc5df96 = function(t, e, r) {
    return t.subarray(e >>> 0, r >>> 0);
  }, n.wbg.__wbg_typedciphertext_new = function(t) {
    return qs.__wrap(t);
  }, n.wbg.__wbg_typedciphertext_unwrap = function(t) {
    return qs.__unwrap(t);
  }, n.wbg.__wbg_typedplaintext_new = function(t) {
    return f_.__wrap(t);
  }, n.wbg.__wbg_typedsigncryptedciphertext_new = function(t) {
    return Qs.__wrap(t);
  }, n.wbg.__wbg_typedsigncryptedciphertext_unwrap = function(t) {
    return Qs.__unwrap(t);
  }, n.wbg.__wbg_userdecryptionresponse_unwrap = function(t) {
    return l_.__unwrap(t);
  }, n.wbg.__wbg_value_cd1ffa7b1ab794f1 = function(t) {
    return t.value;
  }, n.wbg.__wbg_versions_c71aa1626a93e0a1 = function(t) {
    return t.versions;
  }, n.wbg.__wbindgen_as_number = function(t) {
    return +t;
  }, n.wbg.__wbindgen_boolean_get = function(t) {
    const e = t;
    return typeof e == "boolean" ? e ? 1 : 0 : 2;
  }, n.wbg.__wbindgen_debug_string = function(t, e) {
    const r = Cu(e), i = Si(r, rt.__wbindgen_malloc, rt.__wbindgen_realloc), o = ee;
    Ue().setInt32(t + 4 * 1, o, !0), Ue().setInt32(t + 4 * 0, i, !0);
  }, n.wbg.__wbindgen_error_new = function(t, e) {
    return new Error(Rs(t, e));
  }, n.wbg.__wbindgen_in = function(t, e) {
    return t in e;
  }, n.wbg.__wbindgen_init_externref_table = function() {
    const t = rt.__wbindgen_export_4, e = t.grow(4);
    t.set(0, void 0), t.set(e + 0, void 0), t.set(e + 1, null), t.set(e + 2, !0), t.set(e + 3, !1);
  }, n.wbg.__wbindgen_is_function = function(t) {
    return typeof t == "function";
  }, n.wbg.__wbindgen_is_null = function(t) {
    return t === null;
  }, n.wbg.__wbindgen_is_object = function(t) {
    const e = t;
    return typeof e == "object" && e !== null;
  }, n.wbg.__wbindgen_is_string = function(t) {
    return typeof t == "string";
  }, n.wbg.__wbindgen_is_undefined = function(t) {
    return t === void 0;
  }, n.wbg.__wbindgen_jsval_loose_eq = function(t, e) {
    return t == e;
  }, n.wbg.__wbindgen_memory = function() {
    return rt.memory;
  }, n.wbg.__wbindgen_number_get = function(t, e) {
    const r = e, i = typeof r == "number" ? r : void 0;
    Ue().setFloat64(t + 8 * 1, ai(i) ? 0 : i, !0), Ue().setInt32(t + 4 * 0, !ai(i), !0);
  }, n.wbg.__wbindgen_string_get = function(t, e) {
    const r = e, i = typeof r == "string" ? r : void 0;
    var o = ai(i) ? 0 : Si(i, rt.__wbindgen_malloc, rt.__wbindgen_realloc), a = ee;
    Ue().setInt32(t + 4 * 1, a, !0), Ue().setInt32(t + 4 * 0, o, !0);
  }, n.wbg.__wbindgen_string_new = function(t, e) {
    return Rs(t, e);
  }, n.wbg.__wbindgen_throw = function(t, e) {
    throw new Error(Rs(t, e));
  }, n;
}
function $2(n, t) {
  return rt = n.exports, h_.__wbindgen_wasm_module = t, bi = null, Is = null, rt.__wbindgen_start(), rt;
}
async function h_(n) {
  if (rt !== void 0) return rt;
  typeof n < "u" && (Object.getPrototypeOf(n) === Object.prototype ? { module_or_path: n } = n : console.warn("using deprecated parameters for the initialization function; pass a single object instead")), typeof n > "u" && (n = new URL(
    /* @vite-ignore */
    "/kms_lib_bg.wasm",
    import.meta.url
  ));
  const t = J2();
  (typeof n == "string" || typeof Request == "function" && n instanceof Request || typeof URL == "function" && n instanceof URL) && (n = fetch(n));
  const { instance: e, module: r } = await W2(await n, t);
  return $2(e, r);
}
const Y2 = BigInt(1024 * 1024 * 512), p_ = BigInt(1024 * 1024 * 512), w_ = BigInt(1024 * 1024 * 512), Cs = (n) => n ? n.endsWith("/") ? n.slice(0, -1) : n : "", Xp = (n) => {
  let t = n.toString(16);
  return t.length % 2 ? "0" + t : t;
}, He = (n) => {
  const t = n.replace(/^(0x)/, "").match(/.{1,2}/g);
  return t ? Uint8Array.from(t.map((e) => parseInt(e, 16))) : new Uint8Array();
};
function _r(n, t = !1) {
  return `${t ? "0x" : ""}${n.reduce((e, r) => e + r.toString(16).padStart(2, "0"), "")}`;
}
const xo = function(n) {
  if (!n || n?.length === 0)
    return BigInt(0);
  const t = Array.from(n).map((e) => e.toString(16).padStart(2, "0")).join("");
  return BigInt(`0x${t}`);
};
function Fg(n) {
  if (n instanceof Error && typeof n.cause == "object" && n.cause !== null)
    return n.cause;
}
function FA(n) {
  const t = Fg(n);
  if (!(!t || !("code" in t) || !t.code) && typeof t.code == "string")
    return t.code;
}
function IA(n) {
  const t = Fg(n);
  if (!(!t || !("status" in t) || t.status === void 0) && typeof t.status == "number")
    return t.status;
}
async function Ig(n, t) {
  let e;
  if (t.status === 429)
    e = "Relayer rate limit exceeded: Please wait and try again later.";
  else
    switch (n) {
      case "PUBLIC_DECRYPT": {
        e = `Public decrypt failed: relayer respond with HTTP code ${t.status}`;
        break;
      }
      case "USER_DECRYPT": {
        e = `User decrypt failed: relayer respond with HTTP code ${t.status}`;
        break;
      }
      case "KEY_URL": {
        e = `HTTP error! status: ${t.status}`;
        break;
      }
      default: {
        const i = await t.text();
        e = `Relayer didn't response correctly. Bad status ${t.statusText}. Content: ${i}`;
        break;
      }
    }
  const r = {
    code: "RELAYER_FETCH_ERROR",
    operation: n,
    status: t.status,
    statusText: t.statusText,
    url: t.url
  };
  throw new Error(e, {
    cause: r
  });
}
function Og(n, t) {
  let e;
  switch (n) {
    case "PUBLIC_DECRYPT": {
      e = "Public decrypt failed: Relayer didn't return a JSON";
      break;
    }
    case "USER_DECRYPT": {
      e = "User decrypt failed: Relayer didn't return a JSON";
      break;
    }
    default: {
      e = "Relayer didn't return a JSON";
      break;
    }
  }
  const r = {
    code: "RELAYER_NO_JSON_ERROR",
    operation: n,
    error: t
  };
  throw new Error(e, {
    cause: r
  });
}
function Tg(n, t) {
  let e;
  switch (n) {
    case "PUBLIC_DECRYPT": {
      e = "Public decrypt failed: Relayer returned an unexpected JSON response";
      break;
    }
    case "USER_DECRYPT": {
      e = "User decrypt failed: Relayer returned an unexpected JSON response";
      break;
    }
    default: {
      e = "Relayer returned an unexpected JSON response";
      break;
    }
  }
  const r = {
    code: "RELAYER_UNEXPECTED_JSON_ERROR",
    operation: n,
    error: t
  };
  throw new Error(e, {
    cause: r
  });
}
function Z2(n, t) {
  let e;
  switch (n) {
    case "PUBLIC_DECRYPT": {
      e = "Pulbic decrypt failed: the public decryption didn't succeed for an unknown reason";
      break;
    }
    case "USER_DECRYPT": {
      e = "User decrypt failed: the user decryption didn't succeed for an unknown reason";
      break;
    }
    default: {
      e = "Relayer didn't response correctly.";
      break;
    }
  }
  const r = {
    code: "RELAYER_INTERNAL_ERROR",
    operation: n,
    error: t
  };
  throw new Error(e, {
    cause: r
  });
}
function Cg(n, t, e) {
  if (!e)
    switch (n) {
      case "PUBLIC_DECRYPT": {
        e = "Public decrypt failed: Relayer didn't respond";
        break;
      }
      case "USER_DECRYPT": {
        e = "User decrypt failed: Relayer didn't respond";
        break;
      }
      default: {
        e = "Relayer didn't response correctly. Bad JSON.";
        break;
      }
    }
  const r = {
    code: "RELAYER_UNKNOWN_ERROR",
    operation: n,
    error: t
  };
  throw new Error(e ?? "Relayer didn't response correctly.", {
    cause: r
  });
}
function Ng(n) {
  if (!n || typeof n != "object")
    throw new Error("Unexpected response JSON.");
  if (!("response" in n && n.response !== null && n.response !== void 0))
    throw new Error("Unexpected response JSON format: missing 'response' property.");
}
async function d_(n, t, e, r) {
  const i = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      ...r?.apiKey && { "x-api-key": r.apiKey }
    },
    body: JSON.stringify(e)
  };
  let o, a;
  try {
    o = await fetch(t, i);
  } catch (_) {
    Cg(n, _);
  }
  o.ok || await Ig(n, o);
  let u;
  try {
    u = await o.json();
  } catch (_) {
    Og(n, _);
  }
  try {
    Ng(u), a = u;
  } catch (_) {
    Tg(n, _);
  }
  return a;
}
async function X2(n, t) {
  let e, r;
  try {
    e = await fetch(t);
  } catch (o) {
    Cg(n, o);
  }
  e.ok || await Ig(n, e);
  let i;
  try {
    i = await e.json();
  } catch (o) {
    Og(n, o);
  }
  try {
    Ng(i), r = i;
  } catch (o) {
    Tg(n, o);
  }
  return r;
}
const _u = {}, Lg = async (n, t) => {
  if (_u[n])
    return _u[n];
  const e = await X2("KEY_URL", `${n}/v1/keyurl`);
  try {
    let r;
    if (!t)
      r = e.response.fhe_key_info[0].fhe_public_key.urls[0], t = e.response.fhe_key_info[0].fhe_public_key.data_id;
    else {
      const B = e.response.fhe_key_info.find((I) => I.fhe_public_key.data_id === t);
      if (!B)
        throw new Error(`Could not find FHE key info with data_id ${t}`);
      r = B.fhe_public_key.urls[0];
    }
    const i = await fetch(r);
    if (!i.ok)
      throw new Error(`HTTP error! status: ${i.status} on ${i.url}`);
    let o;
    typeof i.bytes == "function" ? o = await i.bytes() : o = new Uint8Array(await i.arrayBuffer());
    const a = e.response.crs[2048].urls[0], u = e.response.crs[2048].data_id, _ = await fetch(a);
    if (!_.ok)
      throw new Error(`HTTP error! status: ${_.status} on ${_.url}`);
    let l;
    typeof _.bytes == "function" ? l = await _.bytes() : l = new Uint8Array(await _.arrayBuffer());
    let f;
    try {
      f = TFHE.TfheCompactPublicKey.safe_deserialize(o, p_);
    } catch (B) {
      throw new Error("Invalid public key (deserialization failed)", {
        cause: B
      });
    }
    let g;
    try {
      g = TFHE.CompactPkeCrs.safe_deserialize(new Uint8Array(l), w_);
    } catch (B) {
      throw new Error("Invalid crs (deserialization failed)", {
        cause: B
      });
    }
    const y = {
      publicKey: f,
      publicKeyId: t,
      publicParams: {
        2048: {
          publicParams: g,
          publicParamsId: u
        }
      }
    };
    return _u[n] = y, y;
  } catch (r) {
    throw new Error("Impossible to fetch public key: wrong relayer url.", {
      cause: r
    });
  }
}, Dg = [
  "function getKmsSigners() view returns (address[])",
  "function getThreshold() view returns (uint256)"
], Ug = [
  "function getCoprocessorSigners() view returns (address[])",
  "function getThreshold() view returns (uint256)"
], tA = (n) => {
  if (typeof n.network == "string")
    return new Rm(n.network);
  if (n.network)
    return new vi(n.network);
  throw new Error("You must provide a network URL or a EIP1193 object (eg: window.ethereum)");
}, eA = async (n, t) => {
  if (t.chainId && typeof t.chainId == "number")
    return t.chainId;
  if (t.chainId && typeof t.chainId != "number")
    throw new Error("chainId must be a number.");
  {
    const e = (await n.getNetwork()).chainId;
    return Number(e);
  }
}, rA = async (n) => {
  if (n.relayerUrl && !n.publicKey) {
    const t = await Lg(Cs(n.relayerUrl));
    return { publicKey: t.publicKey, publicKeyId: t.publicKeyId };
  } else if (n.publicKey && n.publicKey.data && n.publicKey.id) {
    const t = n.publicKey.data;
    try {
      return {
        publicKey: TFHE.TfheCompactPublicKey.safe_deserialize(t, p_),
        publicKeyId: n.publicKey.id
      };
    } catch (e) {
      throw new Error("Invalid public key (deserialization failed)", {
        cause: e
      });
    }
  } else
    throw new Error("You must provide a public key with its public key ID.");
}, nA = async (n) => {
  if (n.relayerUrl && !n.publicParams)
    return (await Lg(Cs(n.relayerUrl))).publicParams;
  if (n.publicParams && n.publicParams[2048]) {
    const t = n.publicParams[2048].publicParams;
    try {
      return {
        2048: {
          publicParams: TFHE.CompactPkeCrs.safe_deserialize(t, w_),
          publicParamsId: n.publicParams[2048].publicParamsId
        }
      };
    } catch (e) {
      throw new Error("Invalid public key (deserialization failed)", {
        cause: e
      });
    }
  } else
    throw new Error("You must provide a valid CRS with its CRS ID.");
}, iA = async (n, t) => await new Ze(t.kmsContractAddress, Dg, n).getKmsSigners(), sA = async (n, t) => {
  const r = await new Ze(t.kmsContractAddress, Dg, n).getThreshold();
  return Number(r);
}, oA = async (n, t) => await new Ze(t.inputVerifierContractAddress, Ug, n).getCoprocessorSigners(), aA = async (n, t) => {
  const r = await new Ze(t.inputVerifierContractAddress, Ug, n).getThreshold();
  return Number(r);
}, tw = {
  0: 2,
  // ebool
  2: 8,
  // euint8
  3: 16,
  // euint16
  4: 32,
  // euint32
  5: 64,
  // euint64
  6: 128,
  // euint128
  7: 160,
  // eaddress
  8: 256
  // euint256
};
function Mg(n) {
  let t = 0;
  for (const e of n) {
    if (e.length !== 66)
      throw new Error(`Handle ${e} is not of valid length`);
    const r = e.slice(-4, -2).toLowerCase(), i = parseInt(r, 16);
    if (!(i in tw))
      throw new Error(`Handle ${e} is not of valid type`);
    if (t += tw[i], t > 2048)
      throw new Error("Cannot decrypt more than 2048 encrypted bits in a single request");
  }
  return t;
}
const Ro = (n) => Ut(n), cA = [
  "function persistAllowed(bytes32 handle, address account) view returns (bool)"
], ew = 10, rw = BigInt(365);
function uA(n, t) {
  return t === 0 ? n === BigInt(1) : t === 7 ? Ro("0x" + n.toString(16).padStart(40, "0")) : t === 9 ? "0x" + n.toString(16).padStart(128, "0") : t === 10 ? "0x" + n.toString(16).padStart(256, "0") : t === 11 ? "0x" + n.toString(16).padStart(512, "0") : n;
}
function _A(n, t) {
  let e = [];
  for (const i of n) {
    const o = i.slice(-4, -2).toLowerCase(), a = parseInt(o, 16);
    e.push(a);
  }
  let r = {};
  return n.forEach((i, o) => r[i] = uA(t[o], e[o])), r;
}
function fA(n, t) {
  if (t === BigInt(0))
    throw Error("durationDays is null");
  if (t > rw)
    throw Error(`durationDays is above max duration of ${rw}`);
  const e = BigInt(Math.floor(Date.now() / 1e3));
  if (n > e)
    throw Error("startTimestamp is set in the future");
  const r = t * BigInt(86400);
  if (n + r < e)
    throw Error("User decrypt request has expired");
}
const lA = (n, t, e, r, i, o, a, u) => async (_, l, f, g, y, B, I, S) => {
  let T, A;
  try {
    T = TKMS.u8vec_to_ml_kem_pke_pk(He(f)), A = TKMS.u8vec_to_ml_kem_pke_sk(He(l));
  } catch (L) {
    throw new Error("Invalid public or private key", { cause: L });
  }
  const R = g.replace(/^(0x)/, ""), P = f.replace(/^(0x)/, ""), z = _.map((L) => ({
    handle: typeof L.handle == "string" ? _r(He(L.handle), !0) : _r(L.handle, !0),
    contractAddress: Ro(L.contractAddress)
  }));
  Mg(z.map((L) => L.handle)), fA(BigInt(I), BigInt(S));
  const k = new Ze(i, cA, a), C = z.map(async ({ handle: L, contractAddress: At }) => {
    const Rt = await k.persistAllowed(L, B), at = await k.persistAllowed(L, At);
    if (!Rt)
      throw new Error(`User ${B} is not authorized to user decrypt handle ${L}!`);
    if (!at)
      throw new Error(`dapp contract ${At} is not authorized to user decrypt handle ${L}!`);
    if (B === At)
      throw new Error(`userAddress ${B} should not be equal to contractAddress when requesting user decryption!`);
  }), N = y.length;
  if (N === 0)
    throw Error("contractAddresses is empty");
  if (N > ew)
    throw Error(`contractAddresses max length of ${ew} exceeded`);
  await Promise.all(C).catch((L) => {
    throw L;
  });
  const D = {
    handleContractPairs: z,
    requestValidity: {
      startTimestamp: I.toString(),
      // Convert to string
      durationDays: S.toString()
      // Convert to string
    },
    contractsChainId: e.toString(),
    // Convert to string
    contractAddresses: y.map((L) => Ro(L)),
    userAddress: Ro(B),
    signature: R,
    publicKey: P
  }, Y = await d_("USER_DECRYPT", `${o}/v1/user-decrypt`, D, u);
  let Z = n.map((L, At) => TKMS.new_server_id_addr(At + 1, L));
  const ft = TKMS.new_client(Z, B, "default");
  try {
    const L = new ArrayBuffer(32);
    new DataView(L).setUint32(28, t, !1);
    const at = {
      name: "Decryption",
      version: "1",
      chain_id: new Uint8Array(L),
      verifying_contract: r,
      salt: null
    }, wt = {
      signature: R,
      client_address: B,
      enc_key: P,
      ciphertext_handles: z.map((Bt) => Bt.handle.replace(/^0x/, "")),
      eip712_verifying_contract: r
    }, xt = TKMS.process_user_decryption_resp_from_js(ft, wt, at, Y.response, T, A, !0).map((Bt) => xo(Bt.bytes));
    return _A(z.map((Bt) => Bt.handle), xt);
  } catch (L) {
    throw new Error("An error occured during decryption", { cause: L });
  }
}, ir = (n, t) => {
  if (n == null)
    throw new Error("Missing value");
  let e;
  if (t >= 8 ? e = BigInt(`0x${new Array(t / 8).fill(null).reduce((r) => `${r}ff`, "")}`) : e = BigInt(2 ** t - 1), typeof n != "number" && typeof n != "bigint")
    throw new Error("Value must be a number or a bigint.");
  if (n > e)
    throw new Error(`The value exceeds the limit for ${t}bits integer (${e.toString()}).`);
}, hA = ({ aclContractAddress: n, chainId: t, tfheCompactPublicKey: e, publicParams: r, contractAddress: i, userAddress: o }) => {
  if (!Ge(i))
    throw new Error("Contract address is not a valid address.");
  if (!Ge(o))
    throw new Error("User address is not a valid address.");
  const a = e, u = [], _ = TFHE.CompactCiphertextList.builder(a);
  let l = new Uint8Array();
  const f = (g) => {
    if (u.reduce((y, B) => y + Math.max(2, B), 0) + g > 2048)
      throw Error("Packing more than 2048 bits in a single input ciphertext is unsupported");
    if (u.length + 1 > 256)
      throw Error("Packing more than 256 variables in a single input ciphertext is unsupported");
  };
  return {
    addBool(g) {
      if (g == null)
        throw new Error("Missing value");
      if (typeof g != "boolean" && typeof g != "number" && typeof g != "bigint")
        throw new Error("The value must be a boolean, a number or a bigint.");
      if (Number(g) > 1)
        throw new Error("The value must be 1 or 0.");
      return ir(Number(g), 1), f(2), _.push_boolean(!!g), u.push(1), this;
    },
    add8(g) {
      return ir(g, 8), f(8), _.push_u8(Number(g)), u.push(8), this;
    },
    add16(g) {
      return ir(g, 16), f(16), _.push_u16(Number(g)), u.push(16), this;
    },
    add32(g) {
      return ir(g, 32), f(32), _.push_u32(Number(g)), u.push(32), this;
    },
    add64(g) {
      return ir(g, 64), f(64), _.push_u64(BigInt(g)), u.push(64), this;
    },
    add128(g) {
      return ir(g, 128), f(128), _.push_u128(BigInt(g)), u.push(128), this;
    },
    addAddress(g) {
      if (!Ge(g))
        throw new Error("The value must be a valid address.");
      return f(160), _.push_u160(BigInt(g)), u.push(160), this;
    },
    add256(g) {
      return ir(g, 256), f(256), _.push_u256(BigInt(g)), u.push(256), this;
    },
    addBytes64(g) {
      if (g.length !== 64)
        throw Error("Uncorrect length of input Uint8Array, should be 64 for an ebytes64");
      const y = xo(g);
      return ir(y, 512), f(512), _.push_u512(y), u.push(512), this;
    },
    addBytes128(g) {
      if (g.length !== 128)
        throw Error("Uncorrect length of input Uint8Array, should be 128 for an ebytes128");
      const y = xo(g);
      return ir(y, 1024), f(1024), _.push_u1024(y), u.push(1024), this;
    },
    addBytes256(g) {
      if (g.length !== 256)
        throw Error("Uncorrect length of input Uint8Array, should be 256 for an ebytes256");
      const y = xo(g);
      return ir(y, 2048), f(2048), _.push_u2048(y), u.push(2048), this;
    },
    getBits() {
      return u;
    },
    encrypt() {
      const y = (() => {
        const z = (D) => Object.keys(D), k = u.reduce((D, Y) => D + Y, 0), C = z(r), N = C.find((D) => Number(D) >= k);
        if (!N)
          throw new Error(`Too many bits in provided values. Maximum is ${C[C.length - 1]}.`);
        return N;
      })(), B = r[y].publicParams, I = He(i), S = He(o), T = He(n), A = He(t.toString(16).padStart(64, "0")), R = new Uint8Array(I.length + S.length + T.length + 32);
      return R.set(I, 0), R.set(S, 20), R.set(T, 40), R.set(A, R.length - A.length), l = _.build_with_proof_packed(B, R, TFHE.ZkComputeLoad.Verify).safe_serialize(Y2), l;
    }
  };
}, pA = {
  1: 0,
  // ebool takes 2 encrypted bits
  8: 2,
  16: 3,
  32: 4,
  64: 5,
  128: 6,
  160: 7,
  256: 8,
  512: 9,
  1024: 10,
  2048: 11
}, wA = BigInt("18446744073709551615"), dA = (n, t, e, r, i) => {
  const o = rh("keccak256").update(Ye.from(n)).digest(), a = Ye.from(He(e)), u = r.toString(16).padStart(64, "0"), _ = Ye.from(u, "hex");
  return t.map((f, g) => {
    const y = pA[f], B = Ye.from([g]), I = rh("keccak256").update(o).update(B).update(a).update(_).digest(), S = new Uint8Array(32);
    if (S.set(I, 0), BigInt(r) > wA)
      throw new Error("ChainId exceeds maximum allowed value (8 bytes)");
    const T = He(u).slice(24, 32);
    return S[21] = g, S.set(T, 22), S[30] = y, S[31] = i, S;
  });
}, nw = (n) => Ut(n), gA = () => 0;
function yA(n, t, e) {
  const r = /* @__PURE__ */ new Map();
  t.forEach((i, o) => {
    if (r.has(i)) {
      const a = i;
      throw new Error(`Duplicate coprocessor signer address found: ${a} appears multiple times in recovered addresses`);
    }
    r.set(i, o);
  });
  for (const i of t)
    if (!n.includes(i))
      throw new Error(`Invalid address found: ${i} is not in the list of coprocessor signers`);
  return t.length >= e;
}
function bA(n) {
  const t = n.response;
  return typeof t != "object" || t === null || !("handles" in t && Array.isArray(t.handles)) || !("signatures" in t && Array.isArray(t.signatures)) ? !1 : t.signatures.every((e) => typeof e == "string") && t.handles.every((e) => typeof e == "string");
}
const mA = (n, t, e, r, i, o, a, u, _) => (l, f) => {
  if (!Ge(l))
    throw new Error("Contract address is not a valid address.");
  if (!Ge(f))
    throw new Error("User address is not a valid address.");
  const g = hA({
    aclContractAddress: n,
    chainId: e,
    tfheCompactPublicKey: o,
    publicParams: a,
    contractAddress: l,
    userAddress: f
  });
  return {
    _input: g,
    addBool(y) {
      return g.addBool(y), this;
    },
    add8(y) {
      return g.add8(y), this;
    },
    add16(y) {
      return g.add16(y), this;
    },
    add32(y) {
      return g.add32(y), this;
    },
    add64(y) {
      return g.add64(y), this;
    },
    add128(y) {
      return g.add128(y), this;
    },
    add256(y) {
      return g.add256(y), this;
    },
    addAddress(y) {
      return g.addAddress(y), this;
    },
    getBits() {
      return g.getBits();
    },
    encrypt: async (y) => {
      const B = g.getBits(), I = g.encrypt(), S = {
        contractAddress: nw(l),
        userAddress: nw(f),
        ciphertextWithInputVerification: _r(I),
        contractChainId: "0x" + e.toString(16)
      }, T = await d_("INPUT_PROOF", `${i}/v1/input-proof`, S, y);
      bA(T) || Z2("INPUT_PROOF", T);
      const A = dA(I, B, n, e, gA());
      if (T.response.handles && T.response.handles.length > 0) {
        const Z = T.response.handles.map(He);
        if (A.length != Z.length)
          throw new Error(`Incorrect Handles list sizes: (expected) ${A.length} != ${Z.length} (received)`);
        for (let ft = 0; ft < A.length; ft += 1) {
          let L = A[ft], At = Z[ft], Rt = _r(L), at = _r(At);
          if (Rt !== at)
            throw new Error(`Incorrect Handle ${ft}: (expected) ${Rt} != ${at} (received)`);
        }
      }
      const R = T.response.signatures, P = {
        name: "InputVerification",
        version: "1",
        chainId: r,
        verifyingContract: t
      }, z = {
        CiphertextVerification: [
          { name: "ctHandles", type: "bytes32[]" },
          { name: "userAddress", type: "address" },
          { name: "contractAddress", type: "address" },
          { name: "contractChainId", type: "uint256" }
        ]
      }, k = R.map((Z) => {
        const ft = Z.startsWith("0x") ? Z : `0x${Z}`;
        return Rd(P, z, {
          ctHandles: A,
          userAddress: f,
          contractAddress: l,
          contractChainId: e
        }, ft);
      });
      if (!yA(u, k, _))
        throw Error("Coprocessor signers threshold is not reached");
      let N = Xp(A.length);
      const D = R.length;
      return N += Xp(D), A.map((Z) => _r(Z)).map((Z) => N += Z), R.map((Z) => N += Z.slice(2)), {
        handles: A,
        inputProof: He(N)
      };
    }
  };
}, AA = [
  "function isAllowedForDecryption(bytes32 handle) view returns (bool)"
];
function EA(n, t, e) {
  const r = /* @__PURE__ */ new Map();
  t.forEach((i, o) => {
    if (r.has(i)) {
      const a = i;
      throw new Error(`Duplicate KMS signer address found: ${a} appears multiple times in recovered addresses`);
    }
    r.set(i, o);
  });
  for (const i of t)
    if (!n.includes(i))
      throw new Error(`Invalid address found: ${i} is not in the list of KMS signers`);
  return t.length >= e;
}
const vA = {
  0: "bool",
  2: "uint256",
  3: "uint256",
  4: "uint256",
  5: "uint256",
  6: "uint256",
  7: "address",
  8: "uint256"
};
function xA(n, t) {
  let e = [];
  for (const l of n) {
    const f = l.slice(-4, -2).toLowerCase(), g = parseInt(f, 16);
    e.push(g);
  }
  const r = "0x" + "00".repeat(32) + // dummy requestID (ignored)
  t.slice(2) + "00".repeat(32), i = e.map((l) => vA[l]), u = new Ci().decode(["uint256", ...i, "bytes[]"], r).slice(1, 1 + e.length);
  let _ = {};
  return n.forEach((l, f) => _[l] = u[f]), _;
}
const RA = (n, t, e, r, i, o, a, u) => async (_) => {
  const l = new Ze(i, AA, a);
  let f;
  try {
    f = await Promise.all(_.map(async (k) => {
      const C = _r(typeof k == "string" ? He(k) : k, !0);
      if (!await l.isAllowedForDecryption(C))
        throw new Error(`Handle ${C} is not allowed for public decryption!`);
      return C;
    }));
  } catch (k) {
    throw k;
  }
  Mg(f);
  const g = {
    ciphertextHandles: f
  }, y = await d_("PUBLIC_DECRYPT", `${o}/v1/public-decrypt`, g, u), B = {
    name: "Decryption",
    version: "1",
    chainId: e,
    verifyingContract: r
  }, I = {
    PublicDecryptVerification: [
      { name: "ctHandles", type: "bytes32[]" },
      { name: "decryptedResult", type: "bytes" }
    ]
  }, S = y.response[0], T = S.decrypted_value.startsWith("0x") ? S.decrypted_value : `0x${S.decrypted_value}`, R = S.signatures.map((k) => {
    const C = k.startsWith("0x") ? k : `0x${k}`;
    return Rd(B, I, { ctHandles: f, decryptedResult: T }, C);
  });
  if (!EA(n, R, t))
    throw Error("KMS signers threshold is not reached");
  return xA(f, T);
}, zA = (n, t) => (e, r, i, o, a) => {
  if (a && !Ge(a))
    throw new Error("Invalid delegated account.");
  if (!Ge(n))
    throw new Error("Invalid verifying contract address.");
  if (!r.every((y) => Ge(y)))
    throw new Error("Invalid contract address.");
  const u = typeof e == "string" ? e.startsWith("0x") ? e : `0x${e}` : e, _ = typeof i == "number" ? i.toString() : i, l = typeof o == "number" ? o.toString() : o, f = [
    { name: "name", type: "string" },
    { name: "version", type: "string" },
    { name: "chainId", type: "uint256" },
    { name: "verifyingContract", type: "address" }
  ], g = {
    name: "Decryption",
    version: "1",
    chainId: t,
    verifyingContract: n
  };
  return a ? {
    types: {
      EIP712Domain: f,
      DelegatedUserDecryptRequestVerification: [
        { name: "publicKey", type: "bytes" },
        { name: "contractAddresses", type: "address[]" },
        { name: "contractsChainId", type: "uint256" },
        { name: "startTimestamp", type: "uint256" },
        { name: "durationDays", type: "uint256" },
        {
          name: "delegatedAccount",
          type: "address"
        }
      ]
    },
    primaryType: "DelegatedUserDecryptRequestVerification",
    domain: g,
    message: {
      publicKey: u,
      contractAddresses: r,
      contractsChainId: t,
      startTimestamp: _,
      durationDays: l,
      delegatedAccount: a
    }
  } : {
    types: {
      EIP712Domain: f,
      UserDecryptRequestVerification: [
        { name: "publicKey", type: "bytes" },
        { name: "contractAddresses", type: "address[]" },
        { name: "contractsChainId", type: "uint256" },
        { name: "startTimestamp", type: "uint256" },
        { name: "durationDays", type: "uint256" }
      ]
    },
    primaryType: "UserDecryptRequestVerification",
    domain: g,
    message: {
      publicKey: u,
      contractAddresses: r,
      contractsChainId: t,
      startTimestamp: _,
      durationDays: l
    }
  };
}, BA = () => {
  const n = TKMS.ml_kem_pke_keygen();
  return {
    publicKey: _r(TKMS.ml_kem_pke_pk_to_u8vec(TKMS.ml_kem_pke_get_pk(n))),
    privateKey: _r(TKMS.ml_kem_pke_sk_to_u8vec(n))
  };
};
ns.fetch = B2(ns.fetch, { retries: 5, retryDelay: 500 });
const OA = {
  // ACL_CONTRACT_ADDRESS (FHEVM Host chain)
  aclContractAddress: "0x687820221192C5B662b25367F70076A37bc79b6c",
  // KMS_VERIFIER_CONTRACT_ADDRESS (FHEVM Host chain)
  kmsContractAddress: "0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC",
  // INPUT_VERIFIER_CONTRACT_ADDRESS (FHEVM Host chain)
  inputVerifierContractAddress: "0xbc91f3daD1A5F19F8390c400196e58073B6a0BC4",
  // DECRYPTION_ADDRESS (Gateway chain)
  verifyingContractAddressDecryption: "0xb6E160B1ff80D67Bfe90A85eE06Ce0A2613607D1",
  // INPUT_VERIFICATION_ADDRESS (Gateway chain)
  verifyingContractAddressInputVerification: "0x7048C39f048125eDa9d678AEbaDfB22F7900a29F",
  // FHEVM Host chain id
  chainId: 11155111,
  // Gateway chain id
  gatewayChainId: 55815,
  // Optional RPC provider to host chain
  network: "https://eth-sepolia.public.blastapi.io",
  // Relayer URL
  relayerUrl: "https://relayer.testnet.zama.cloud"
}, TA = async (n) => {
  const { verifyingContractAddressDecryption: t, verifyingContractAddressInputVerification: e, publicKey: r, kmsContractAddress: i, aclContractAddress: o, gatewayChainId: a } = n;
  if (!i || !Ge(i))
    throw new Error("KMS contract address is not valid or empty");
  if (!t || !Ge(t))
    throw new Error("Verifying contract for Decryption address is not valid or empty");
  if (!e || !Ge(e))
    throw new Error("Verifying contract for InputVerification address is not valid or empty");
  if (!o || !Ge(o))
    throw new Error("ACL contract address is not valid or empty");
  if (r && !(r.data instanceof Uint8Array))
    throw new Error("publicKey must be a Uint8Array");
  const u = tA(n);
  if (!u)
    throw new Error("No network has been provided!");
  const _ = await eA(u, n), l = await rA(n), f = await nA(n), g = await iA(u, n), y = await sA(u, n), B = await oA(u, n), I = await aA(u, n);
  return {
    createEncryptedInput: mA(o, e, _, a, Cs(n.relayerUrl), l.publicKey, f, B, I),
    generateKeypair: BA,
    createEIP712: zA(t, _),
    publicDecrypt: RA(g, y, a, t, o, Cs(n.relayerUrl), u),
    userDecrypt: lA(g, a, _, t, o, Cs(n.relayerUrl), u),
    getPublicKey: () => l.publicKey ? {
      publicKey: l.publicKey.safe_serialize(p_),
      publicKeyId: l.publicKeyId
    } : null,
    getPublicParams: (S) => f[S] ? {
      publicParams: f[S].publicParams.safe_serialize(w_),
      publicParamsId: f[S].publicParamsId
    } : null
  };
};
let iw = !1;
const CA = async ({ tfheParams: n, kmsParams: t, thread: e } = {}) => (e == null && (e = navigator.hardwareConcurrency), await S2() || (console.warn(`This browser does not support threads. Verify that your server returns correct headers:
`, `'Cross-Origin-Opener-Policy': 'same-origin'
`, "'Cross-Origin-Embedder-Policy': 'require-corp'"), e = void 0), iw || (await ro({ module_or_path: n }), await h_({
  module_or_path: t
}), e && (u_(), await __(e)), iw = !0), !0);
window.TFHE = {
  default: ro,
  initThreadPool: __,
  init_panic_hook: u_,
  TfheCompactPublicKey: $e,
  CompactPkeCrs: We,
  CompactCiphertextList: ui,
  ZkComputeLoad: Bg
};
window.TKMS = {
  default: h_,
  u8vec_to_ml_kem_pke_pk: V2,
  u8vec_to_ml_kem_pke_sk: q2,
  new_client: U2,
  new_server_id_addr: D2,
  process_user_decryption_resp_from_js: Q2,
  ml_kem_pke_keygen: M2,
  ml_kem_pke_pk_to_u8vec: G2,
  ml_kem_pke_sk_to_u8vec: H2,
  ml_kem_pke_get_pk: j2
};
export {
  pA as ENCRYPTION_TYPES,
  OA as SepoliaConfig,
  zA as createEIP712,
  TA as createInstance,
  BA as generateKeypair,
  FA as getErrorCauseCode,
  IA as getErrorCauseStatus,
  CA as initSDK
};
