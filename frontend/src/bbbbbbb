// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// 1) –ü–æ–ª–∏—Ñ–∏–ª–ª fetch ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ç—á–∏—Ç globalThis –∏ window
import "cross-fetch/polyfill";

// 2) –ü–æ–ª–∏—Ñ–∏–ª–ª—ã –¥–ª—è Node.js API (Buffer, process)
import "./po";

// 3) –ò–º–ø–æ—Ä—Ç ethers –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å MetaMask
import { ethers } from "ethers";

// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const SERVER_URL = "http://localhost:3001";
const RELAYER_URI = "https://relayer.testnet.zama.cloud";
const CONTRACT_ADDR = "0x9342a00060e3A0dbc8d77a6C9F7c42cb62d5D0c6";

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SDK
let sdkInstance;
let initSDK;
let createInstance;
let SepoliaConfig;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
window.addEventListener("DOMContentLoaded", async () => {
  // 4) –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç SDK - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  try {
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç
    try {
      const module = await import("@zama-fhe/relayer-sdk");
      initSDK = module.initSDK;
      createInstance = module.createInstance;
      SepoliaConfig = module.SepoliaConfig;
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç SDK");
    } catch (err1) {
      console.warn("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º /web:", err1.message);

      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ–ø—Ä–æ–±—É–µ–º /web –≤–µ—Ä—Å–∏—é
      try {
        const module = await import("@zama-fhe/relayer-sdk/web");
        initSDK = module.initSDK;
        createInstance = module.createInstance;
        SepoliaConfig = module.SepoliaConfig;
        console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /web –∏–º–ø–æ—Ä—Ç SDK");
      } catch (err2) {
        console.warn("‚ö†Ô∏è Web –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º /bundle:", err2.message);

        // –í–∞—Ä–∏–∞–Ω—Ç 3: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π /bundle
        const module = await import("@zama-fhe/relayer-sdk/bundle");
        initSDK = module.initSDK;
        createInstance = module.createInstance;
        SepoliaConfig = module.SepoliaConfig;
        console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /bundle –∏–º–ø–æ—Ä—Ç SDK");
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!initSDK || !createInstance || !SepoliaConfig) {
      throw new Error("SDK —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
  } catch (err) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Relayer SDK:", err);
    console.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CDN –≤–µ—Ä—Å–∏—é –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–∫–µ—Ç–∞");
    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SDK. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.");
    return;
  }

  // 5) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
  try {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK...");
    await initSDK(); // –∑–∞–≥—Ä—É–∂–∞–µ–º WASM-—Ñ–∞–π–ª—ã

    sdkInstance = await createInstance({
      ...SepoliaConfig,
      relayerUrl: RELAYER_URI,
      // –î–æ–±–∞–≤–ª—è–µ–º network –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω MetaMask
      ...(window.ethereum ? { network: window.ethereum } : {}),
    });

    console.log("‚úÖ SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK:", err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SDK. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.");
    return;
  }

  // 6) –ü–æ–ª—É—á–µ–Ω–∏–µ UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const computeBtn = document.getElementById("computeBtn");
  const statusEl = document.getElementById("status");
  const resultEl = document.getElementById("result");

  if (!computeBtn || !statusEl || !resultEl) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ DOM-—ç–ª–µ–º–µ–Ω—Ç—ã.");
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ SDK –≥–æ—Ç–æ–≤
  statusEl.textContent = "‚úÖ SDK –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ";

  // 7) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´Compute¬ª
  computeBtn.addEventListener("click", async () => {
    const aVal = parseInt(document.getElementById("a")?.value ?? "", 10);
    const bVal = parseInt(document.getElementById("b")?.value ?? "", 10);

    if (isNaN(aVal) || isNaN(bVal)) {
      alert("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞.");
      return;
    }

    computeBtn.disabled = true;
    statusEl.textContent = "üîê Encrypting‚Ä¶";
    resultEl.textContent = "";

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MetaMask
      if (!window.ethereum) {
        throw new Error("MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.");
      }

      // a) –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ MetaMask
      const provider = new ethers.BrowserProvider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = await provider.getSigner();
      const userAddress = await signer.getAddress();

      console.log("üë§ –ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userAddress);

      // b) –®–∞–≥ 1: —à–∏—Ñ—Ä—É–µ–º —á–∏—Å–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      statusEl.textContent = "üîê Encrypting values...";
      const encryptRes = await fetch(`${SERVER_URL}/encrypt`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ a: aVal, b: bVal, userAddress }),
      });

      if (!encryptRes.ok) {
        const errorText = await encryptRes.text();
        throw new Error(`–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ${encryptRes.status} ${encryptRes.statusText}\n${errorText}`);
      }

      const { handleA, handleB, proof } = await encryptRes.json();
      console.log("üîê –ó–Ω–∞—á–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã");

      // c) –®–∞–≥ 2: –≤—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      statusEl.textContent = "‚öôÔ∏è Computing sum...";
      const computeRes = await fetch(`${SERVER_URL}/compute`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ handleA, handleB, proof, userAddress }),
      });

      if (!computeRes.ok) {
        const errorText = await computeRes.text();
        throw new Error(`–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: ${computeRes.status} ${computeRes.statusText}\n${errorText}`);
      }

      const { sumHandle } = await computeRes.json();
      console.log("‚öôÔ∏è –°—É–º–º–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞");

      // d) –®–∞–≥ 3: –≥–æ—Ç–æ–≤–∏–º –ø–æ–¥–ø–∏—Å—å EIP-712 –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
      statusEl.textContent = "üîë Preparing decryption...";
      const keypair = sdkInstance.generateKeypair();
      const startTs = Math.floor(Date.now() / 1000);
      const duration = 365; // –¥–Ω–µ–π

      const eip712 = sdkInstance.createEIP712(keypair.publicKey, [CONTRACT_ADDR], startTs, duration);

      statusEl.textContent = "‚úçÔ∏è Signing transaction...";
      const signature = await signer.signTypedData(eip712.domain, eip712.types, eip712.message);

      console.log("‚úçÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞");

      // e) –®–∞–≥ 4: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      statusEl.textContent = "üîì Decrypting result...";
      const decryptRes = await fetch(`${SERVER_URL}/decrypt`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sumHandle,
          userAddress,
          publicKey: Buffer.from(keypair.publicKey).toString("hex"),
          privateKey: Buffer.from(keypair.privateKey).toString("hex"),
          signature,
          startTs,
          durationDays: duration,
        }),
      });

      if (!decryptRes.ok) {
        const errorText = await decryptRes.text();
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${decryptRes.status} ${decryptRes.statusText}\n${errorText}`);
      }

      const { plaintext } = await decryptRes.json();
      console.log("üîì –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω");

      // f) –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      statusEl.textContent = "‚úÖ –ì–æ—Ç–æ–≤–æ!";
      resultEl.textContent = `Result: ${aVal} + ${bVal} = ${plaintext}`;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:", err);
      statusEl.textContent = "‚ùå –û—à–∏–±–∫–∞";
      resultEl.textContent = "";
      alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${err.message}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ ‚Äî –≤ –∫–æ–Ω—Å–æ–ª–∏.`);
    } finally {
      computeBtn.disabled = false;
    }
  });
});
