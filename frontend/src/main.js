import { ethers } from "ethers";
import { createInstance, FhevmInstance, initFhevm } from "fhevmjs";
import EncryptedAdderABI from "./abis/EncryptedAdder.json";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONTRACT_ADDRESS = import.meta.env.VITE_CONTRACT_ADDRESS;
const RELAYER_URI = import.meta.env.VITE_RELAYER_URI;
const CHAIN_ID = parseInt(import.meta.env.VITE_CHAIN_ID || "8009");

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let fhevmInstance: FhevmInstance;
let contract: ethers.Contract;
let signer: ethers.Signer;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
  // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MetaMask
  if (!window.ethereum) throw new Error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
  await window.ethereum.request({ method: "eth_requestAccounts" });
  
  // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ethers.js
  const provider = new ethers.BrowserProvider(window.ethereum);
  signer = await provider.getSigner();
  
  // 3. –ó–∞–≥—Ä—É–∑–∫–∞ FHEVM
  await initFhevm();
  fhevmInstance = await createInstance({
    chainId: CHAIN_ID,
    publicKey: "auto",
    relayerUrl: RELAYER_URI
  });
  
  // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  contract = new ethers.Contract(
    CONTRACT_ADDRESS,
    EncryptedAdderABI.abi,
    signer
  );
  
  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è UI
  document.getElementById("computeBtn")!.disabled = false;
  updateStatus("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
async function handleCompute() {
  const a = parseInt((document.getElementById("a") as HTMLInputElement).value);
  const b = parseInt((document.getElementById("b") as HTMLInputElement).value);
  
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (isNaN(a) || isNaN(b)) throw new Error("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞!");
    if (a < 0 || b < 0) throw new Error("–¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!");
    
    updateStatus("üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
    disableUI();
    
    // 1. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const encryptedA = fhevmInstance.encrypt64(a);
    const encryptedB = fhevmInstance.encrypt64(b);
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ proof
    const proof = fhevmInstance.createProof();
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAddress = await signer.getAddress();
    
    updateStatus("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç...");
    
    // 4. –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - setInputs
    const txSet = await contract.setInputs(
      encryptedA,
      encryptedB,
      proof,
      userAddress
    );
    await txSet.wait();
    
    updateStatus("üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–º–º—ã...");
    
    // 5. –í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ - computeSum
    const txCompute = await contract.computeSum(userAddress);
    await txCompute.wait();
    
    updateStatus("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
    
    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const encryptedResult = await contract.getLatestSum();
    
    updateStatus("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
    
    // 7. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const decryptedResult = fhevmInstance.decrypt(encryptedResult);
    
    // 8. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    showResult(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${a} + ${b} = ${decryptedResult}`);
    
  } catch (error: any) {
    updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
  } finally {
    enableUI();
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function updateStatus(message: string) {
  document.getElementById("status")!.textContent = message;
}

function showResult(message: string) {
  document.getElementById("result")!.textContent = message;
}

function disableUI() {
  (document.getElementById("computeBtn") as HTMLButtonElement).disabled = true;
}

function enableUI() {
  (document.getElementById("computeBtn") as HTMLButtonElement).disabled = false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", () => {
  initApp().catch(console.error);
  document.getElementById("computeBtn")!.addEventListener("click", handleCompute);
});